/*
	Created By		: RRZ Innovations (PTY) LTD | www.rrzinnovations.com
    Lead Developer  : Zahed Rassool
	Date Created	: 01 March 2016
	Description		: The WCF Service.
    Instructions    : Just ensure that everything is serialized to be compatible with JSON.
    Modified By     : Roxanne Rassool
    Date Modified   : 28 June 2016
    Description     : Added Login and Register methods
    Modified By     :
    Date Modified   :
    Description     :
	Copyright RRZ Innovations (Pty) Ltd 2016
	This file and all it's contents is the property of RRZ Innovations and the respective client and shall, under no circumstance, be copied, resditrubuted or ammended without explicit permission from RRZ Innovations / the owning client.
*/
using RRZTools;
using Surveya_Service;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Configuration;
using System.Data.Entity;
using System.Data.Entity.Core.Objects;
using System.Data.Entity.Validation;
using System.Data.SqlClient;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Security.Cryptography;
using Newtonsoft.Json.Linq;
using System.ServiceModel;
using System.Text;
using System.Web.Hosting;
using System.Web.Security;
using System.Net;
using System.Net.Mail;
using System.ServiceModel.Web;
using System.Web;
using System.Data.OleDb;
using System.ServiceModel.Channels;
using System.Globalization;
using System.Net.Configuration;
using Surveya_Service.SMS;

namespace Surveya_Service
{
    // NOTE: You can use the "Rename" command on the "Refactor" menu to change the class name "Surveya_Service" in code, svc and config file together.
    // NOTE: In order to launch WCF Test Client for testing this service, please select Surveya_Service.svc or Surveya_Service.svc.cs at the Solution Explorer and start debugging.
    public class Surveya_Service : ISurveya_Service
    {
        /// <summary>
        /// The Role(s) that will be used in the application
        /// </summary>
        string[] ApplicationRoles = new string[] { "RRZAdministrator", "Administrator", "Company Owner", "Company Administrator", "Project Administrator", "Field Worker" };

        /// <summary>
        /// The role that gains FULL access to entire application.
        /// </summary>
        const string RRZAdminRole = "RRZAdministrator";
        /// <summary>
        /// The role that gains FULL access to entire application.
        /// </summary>
        const string AdminRole = "Administrator";

        //question types
        static readonly Guid CameraType = new Guid("A4DCCA9E-5FF7-4FCC-86B4-C91200441978");
        static readonly Guid LocationType = new Guid("051F6215-123E-4FFE-9F56-ADB7BA3A5020");
        static readonly Guid SignatureType = new Guid("FB10AC75-1604-4CEF-92A6-F71E6733CA29");
        static readonly Guid CalculationType = new Guid("525D9A3A-99A5-46B4-B5B3-958A2A723989");
        static readonly Guid NumericalType = new Guid("2296589D-F6A9-4CAD-AC36-D83414CD9429");
        static readonly Guid RatingType = new Guid("E4EEBC6E-39C6-4853-8C70-007B5C256EF2");

        //role id of the company owner - to give this role when someone registers on fahdiels website
        static readonly Guid CompanyOwnerRoleID = new Guid("40EC673F-0AE7-41C4-8884-A9D7D308D6C6");

        //role id of the project adminsitrator - to give this role to the primary contact person that is added on a project
        static readonly Guid ProjectAdministatorRoleID = new Guid("8B3CBCAE-C087-4B5C-93BC-EE048C6223CC");

        //the role ID's that should receive the PCI and POPI Emails
        string[] PCIPOPIEmailRoles = new string[] { CompanyOwnerRoleID.ToString(), ProjectAdministatorRoleID.ToString() };

        //group types that questions could have`
        string[] GroupTypes = new string[] { "Page", "Table", "Normal" };

        //store the value for the group type "Table"
        static readonly string GroupTypeTable = "Table";

        //path to the surveya logo
        string surveyaThumbLogo = ConfigurationManager.AppSettings["defaultThumbLogoPath"].ToString();

        string[] compareStrings = new string[] { "<", "<=", "=", ">=", ">", "!=", "<>" };

        enum docType
        {
            Other = 0,
            Passport = 1,
            Visa = 2,
            VaccinationCertificates = 3,
            CustomsClearanceCertificates = 4,
            ETickets = 5,
            AccommodationConfirmation = 6,
            DriversLicense = 7
        }

        /// <summary>
        /// Test Method
        /// </summary>
        /// <param name="ID">The id to test</param>
        /// <returns>A name ;)</returns>
        public List<string> GetNames(string ID)
        {
            //populate a list of objects
            List<string> myList = new List<string>();
            if (ID == "2")
            {
                myList.Add("devtestpro01@gmail.com");
                myList.Add("devtestpro01@gmail.com");
            }
            return myList;
        }

        #region RRZ ADMIN Account Administration (CHANGE TO PUBLIC ONLY WHEN NEEDED)
        /// <summary>
        /// Used to register the first Administrator Account
        /// </summary>
        /// <returns>true if successfull, a wrapped error otherwise.</returns>
        private string RegisterRRZAdmin()
        {
            try
            {
                //Register the RRZ Admin User ONLY
                Membership.CreateUser("rrzsupport", "blahblah", "devtestpro01@gmail.com");
                //if the rrzadmin role does not exist, create it.
                /*if (!Roles.GetAllRoles().Contains(RRZAdminRole))
                {
                    Roles.CreateRole(RRZAdminRole);
                }
                */
                //add the user to the role
                //Roles.AddUserToRole("rrzsupport", RRZAdminRole);


                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {

                    var roles = (from r in entity.Roles
                                 where r.RoleName == RRZAdminRole
                                 select r).FirstOrDefault();

                    if (roles == null)
                    {

                        var param = new ObjectParameter("result", typeof(string));

                        entity.CreateRole(Guid.NewGuid(), RRZAdminRole, "RRZ Admin", null, true, true, param);

                        if (param.Value.ToString() != "1")
                        {
                            return Utils.WrapError(param.Value.ToString());
                        }
                    }

                    var curUser = (from u in entity.aspnet_Membership
                                   where u.Email.ToLower() == "devtestpro01@gmail.com"
                                   select u).FirstOrDefault();

                    if (curUser != null)
                    {
                        curUser.Firstnames = "RRZ Innovations";
                        curUser.Lastname = "Support";
                        entity.Entry(curUser).State = EntityState.Modified;

                        var role = (from r in entity.Roles
                                    where r.RoleName == RRZAdminRole
                                    select r).FirstOrDefault();

                        if (role == null)
                        {
                            return Utils.WrapError("RRZ Admin Role was not created");
                        }

                        var newUser = new CompanyUser();
                        newUser.ID = Guid.NewGuid();
                        newUser.UserID = curUser.UserId;
                        newUser.RoleID = role.RoleId;

                        entity.CompanyUsers.Add(newUser);

                        entity.SaveChanges();

                        return "true";
                    }

                    return Utils.WrapError("Could not find user in the database, not created correctly?");
                }

            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                return Utils.WrapError(ee.Message);
            }
        }

        #endregion

        #region Administration and Global items

        /// <summary>
        /// Used to generate a secret key for the users session(WEB ONLY)
        /// </summary>
        /// <param name="username">the username</param>
        /// <param name="password">the password</param>
        /// <returns>A wrapped error or the secret key</returns>
        public string GetSecretKey(string username, string password)
        {
            //ensure that the user is valid
            try
            {
                if (Membership.ValidateUser(username, password))
                {
                    //ensure that the user has the view right on the webcomponent
                    string secretKey = GenerateSecretKey(username, password);
                    //check that the user has valid rights for the web component
                    if (Utils.IsError(secretKey))
                    {
                        return secretKey;
                    }
                    //string[] userRoles = Roles.GetRolesForUser(username);

                    using (Surveya_DevEntities entity = new Surveya_DevEntities())
                    {
                        var roles = entity.GetRolesForUser((Guid)Membership.GetUser(username).ProviderUserKey).ToList();

                        //var admins = roles.Where(x => x.RoleName == AdminRole).ToList();

                        foreach (var role in roles)
                        {

                            if (!(role.RoleName.Equals(AdminRole) || role.RoleName.Equals(RRZAdminRole)))
                            {
                                return Utils.WrapError("You do not have appropriate rights to access this component.");
                            }
                        }
                    }

                    //everything is fine so return the secret key
                    return secretKey;
                }
                return Utils.WrapError("Authentication failed!");
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        private string GenerateSecretKey(string username, string password)
        {
            try
            {
                //create the secret key
                string secret = DateTime.Now.ToString() + "</>";
                secret += username + "</>";
                secret += password;

                //encrypt the key
                return Utils.Encrypt(secret);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);

            }
        }

        private string CheckUserHasRight(string secretKey, string userRight)
        {
            if (string.IsNullOrWhiteSpace(secretKey))
            {
                return Utils.WrapError("Please ensure that you are logged in");
            }

            string validationResult = ValidateUser(secretKey);
            if (Utils.IsError(validationResult))
            {
                return validationResult;
            }
            //not error see if user has adequate rights (TO BE DONE)
            string username = validationResult;

            //get the user
            MembershipUser theUser = Membership.GetUser(username);

            if (theUser != null)
            {
                Guid LoggedInUserID = (Guid)theUser.ProviderUserKey;

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    var userRoles = entity.GetRolesForUser(LoggedInUserID).ToList();

                    foreach (var role in userRoles)
                    {

                        if (role.RoleName.Equals(AdminRole) || role.RoleName.Equals(RRZAdminRole))
                        {
                            return username;
                        }
                    }
                }

                //not an admin lets see what this user can do
                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    var userRights = entity.CheckUserHasRight((Guid)theUser.ProviderUserKey, userRight).ToList();
                    if (userRights != null && userRights.Count > 0)
                    {
                        return username;
                    }
                    return Utils.WrapError("You are not authorised to perform that action");
                }
            }
            else
            {
                return Utils.WrapError("That username and password combination is not valid.");
            }
        }

        private string CleanForDecimal(string item, bool defaultValue = false)
        {
            if (String.IsNullOrWhiteSpace(item))
            {
                if (defaultValue)
                {
                    return "0,00";
                }
                return item;
            }
            else
            {
                return item.Replace('.', ',');
            }
        }

        #endregion

        #region Global Helpers

        /// <summary>
        /// Authenticates a user
        /// </summary>
        /// <param name="secretKey">A Key that identifies the user</param>
        /// <returns>true if the user is valid.</returns>
        private string ValidateUser(string secretKey)
        {
            string username = "undefined";
            try
            {
                //decrypt the string to get the username and password.
                string decryptedInformation = Utils.Decrypt(secretKey);
                string[] userInformation = decryptedInformation.Split(new string[] { "</>" }, StringSplitOptions.None);
                if (userInformation.Length == 3)
                {
                    if (!string.IsNullOrWhiteSpace(userInformation[1]))
                    {
                        username = userInformation[1];
                    }

                    if (Membership.ValidateUser(userInformation[1], userInformation[2]))
                    {
                        MembershipUser theUser = Membership.GetUser(userInformation[1] + "");
                        Guid LoggedInUserID = (Guid)theUser.ProviderUserKey;

                        //check if the user is active and is allowed to use the system
                        var UserIsActive = CheckUserIsActive(LoggedInUserID + "");
                        if (Utils.IsError(UserIsActive))
                        {
                            return UserIsActive;
                        }

                        return userInformation[1];
                    }
                    else
                    {
                        return Utils.WrapError("Authentication Failed.");
                    }
                }
                else
                {
                    return Utils.WrapError("Authentication failed, invalid secret key.");
                }

            }
            catch (Exception ee)
            {
                Helper.LogError(username + "-" + ee.Message, ee.StackTrace);
                return Utils.WrapError("Authentication failed:" + ee.Message);
            }
        }

        //either RRZAdmin role or normal Admin role
        private string CheckUserHasAnyAdminRole(string secretKey)
        {
            if (string.IsNullOrWhiteSpace(secretKey))
            {
                return Utils.WrapError("Please ensure that you are logged in");
            }
            string validationResult = ValidateUser(secretKey);
            if (Utils.IsError(validationResult))
            {
                return validationResult;
            }
            //not error see if user has adequate rights (TO BE DONE)
            string username = validationResult;

            //get the user
            MembershipUser theUser = Membership.GetUser(username);
            if (theUser != null)
            {
                //get the roles for the user
                //string[] userRoles = Roles.GetRolesForUser(username);
                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {

                    var userRoles = entity.GetRolesForUser((Guid)theUser.ProviderUserKey).ToList();

                    foreach (var role in userRoles)
                    {

                        if (role.RoleName.Equals(AdminRole) || role.RoleName.Equals(RRZAdminRole))
                        {

                            return "true";
                        }
                    }
                }

                return Utils.WrapError("You do not have permission to access this feature");

            }
            else
            {
                return Utils.WrapError("That username and password combination is not valid.");
            }
        }

        //only RRZAdmin role
        private string CheckUserHasRRZAdminRole(string secretKey)
        {
            if (string.IsNullOrWhiteSpace(secretKey))
            {
                return Utils.WrapError("Please ensure that you are logged in");
            }
            string validationResult = ValidateUser(secretKey);
            if (Utils.IsError(validationResult))
            {
                return validationResult;
            }
            //not error see if user has adequate rights (TO BE DONE)
            string username = validationResult;

            //get the user
            MembershipUser theUser = Membership.GetUser(username);
            if (theUser != null)
            {

                //get the roles for the user
                //string[] userRoles = Roles.GetRolesForUser(username);
                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    var userRoles = entity.GetRolesForUser((Guid)theUser.ProviderUserKey).ToList();

                    foreach (var role in userRoles)
                    {
                        if (role.RoleName.Equals(RRZAdminRole))
                        {
                            return "true";
                        }
                    }
                }

                return Utils.WrapError("You do not have permission to access this feature");

            }
            else
            {
                return Utils.WrapError("That username and password combination is not valid.");
            }
        }

        //only Admin role
        private string CheckUserHasAdminRole(string secretKey)
        {
            if (string.IsNullOrWhiteSpace(secretKey))
            {
                return Utils.WrapError("Please ensure that you are logged in");
            }
            string validationResult = ValidateUser(secretKey);
            if (Utils.IsError(validationResult))
            {
                return validationResult;
            }
            //not error see if user has adequate rights (TO BE DONE)
            string username = validationResult;

            //get the user
            MembershipUser theUser = Membership.GetUser(username);
            if (theUser != null)
            {
                //get the roles for the user
                //string[] userRoles = Roles.GetRolesForUser(username);

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    var userRoles = entity.GetRolesForUser((Guid)theUser.ProviderUserKey).ToList();

                    foreach (var role in userRoles)
                    {
                        if (role.RoleName.Equals(AdminRole))
                        {
                            return "true";
                        }
                    }
                }

                return Utils.WrapError("You do not have permission to access this feature");

            }
            else
            {
                return Utils.WrapError("That username and password combination is not valid.");
            }
        }

        //trim the extra whitespaces if the value is not null
        private string TrimIfNotNull(string value)
        {
            if (string.IsNullOrWhiteSpace(value))
            {
                return value;
            }
            return value.Trim();
        }

        //get the id of the logged in user
        private string GetUserID(string secretKey)
        {
            string validationResult = ValidateUser(secretKey);
            if (Utils.IsError(validationResult))
            {
                return validationResult;
            }
            //not error see if user has adequate rights (TO BE DONE)
            string username = validationResult;

            //get the user
            MembershipUser theUser = Membership.GetUser(username);
            return theUser.ProviderUserKey.ToString();

        }

        //get the id of the logged in user
        /*private string GetUsername(string secretKey)
        {
            string username = "undefined";
            try
            {
                //decrypt the string to get the username and password.
                string decryptedInformation = Utils.Decrypt(secretKey);
                string[] userInformation = decryptedInformation.Split(new string[] { "</>" }, StringSplitOptions.None);
                if (userInformation.Length == 3)
                {
                    if (!string.IsNullOrWhiteSpace(userInformation[1]))
                    {
                        username = userInformation[1];
                        return username;
                    }

                    return Utils.WrapError("Authentication Failed.");
                }
                else
                {
                    return Utils.WrapError("Authentication failed, invalid secret key.");
                }

            }
            catch (Exception ee)
            {
                Helper.LogError(username + "-" + ee.Message, ee.StackTrace);
                return Utils.WrapError("Authentication failed:" + ee.Message);
            }

        }*/

        //check if the specified company is the company that the user belongs to
        /*private string CheckUserCompany(string secretKey, string companyID)
        {
            string userID = GetUserID(secretKey);
            if (Utils.IsError(userID))
            {
                return userID;
            }

            Guid UserID;
            if (!Guid.TryParse(userID, out UserID))
            {
                return Utils.WrapError("User ID is not in the correct format");
            }

            using (Surveya_DevEntities entity = new Surveya_DevEntities())
            {
                var userCompany = (from cu in entity.CompanyUsers
                                   where cu.UserID == UserID
                                   select cu).FirstOrDefault();

                if (userCompany == null)
                {
                    return Utils.WrapError("The user is not assigned to a company");
                }

                Guid CompanyID;
                if (!Guid.TryParse(companyID, out CompanyID))
                {
                    return Utils.WrapError("Company ID is not in the correct format");
                }

                if (userCompany.CompanyID != CompanyID)
                {
                    return Utils.WrapError("You do not have access to this company");
                }

                return "true";
            }
        }*/

        //get the company that the user belongs to
        /*private string GetUserCompanyID(string secretKey)
        {

            string userID = GetUserID(secretKey);
            if (Utils.IsError(userID))
            {
                return userID;
            }

            Guid UserID;
            if (!Guid.TryParse(userID, out UserID))
            {
                return Utils.WrapError("User ID is not in the correct format");
            }

            using (Surveya_DevEntities entity = new Surveya_DevEntities())
            {
                var userCompany = (from cu in entity.CompanyUsers
                                   join c in entity.Companies
                                   on cu.CompanyID equals c.ID
                                   where cu.UserID == UserID
                                   select c).FirstOrDefault();

                if (userCompany == null)
                {
                    return Utils.WrapError("You are not assigned to a company");
                }

                return userCompany.ID.ToString();
            }
        }*/

        //check if a project is active / not
        /*private string CheckProjectIsActiveAndStarted(string projectID)
        {
            try
            {
                //remove any extra whitespaces
                projectID = TrimIfNotNull(projectID);

                //convert the project id received
                Guid ProjectID;
                if (!Guid.TryParse(projectID, out ProjectID))
                {
                    return Utils.WrapError("Project ID is not in the correct format");
                }

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    //get the project you are wanting to check
                    var project = (from p in entity.Projects
                                   where p.ID == ProjectID
                                   select p).FirstOrDefault();

                    if (project == null)
                    {
                        return Utils.WrapError("Project not found");
                    }

                    if (!project.IsActive.Value)
                    {
                        return Utils.WrapError("This project is inactive. Changes are no longer permitted.");
                    }

                    if (project.ActualStartDate != null)
                    {
                        return Utils.WrapError("This project has been started. Changes to the project information is no longer permitted.");
                    }

                    if (project.ActualStartDate != null && project.ActualEndDate != null)
                    {
                        return Utils.WrapError("This project has ended. Changes to the project information and creation of surveys is no longer permitted.");
                    }

                }

                dynamic returnItem = new JObject();
                returnItem.Status = "Success";
                return returnItem.ToString();
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        //check if a project is active / not
        private string CheckProjectIsActive(string projectID)
        {
            try
            {
                //remove any extra whitespaces
                projectID = TrimIfNotNull(projectID);

                //convert the project id received
                Guid ProjectID;
                if (!Guid.TryParse(projectID, out ProjectID))
                {
                    return Utils.WrapError("Project ID is not in the correct format");
                }

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    //get the project you are wanting to check
                    var project = (from p in entity.Projects
                                   where p.ID == ProjectID
                                   select p).FirstOrDefault();

                    if (project == null)
                    {
                        return Utils.WrapError("Project not found");
                    }

                    if (!project.IsActive.Value)
                    {
                        return Utils.WrapError("This project is inactive. Changes are no longer permitted.");
                    }

                }

                dynamic returnItem = new JObject();
                returnItem.Status = "Success";
                return returnItem.ToString();
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }*/

        //check if a survey is active / not
        /*private string CheckSurveyIsActiveAndStarted(string surveyID)
        {
            try
            {
                //remove any extra whitespaces
                surveyID = TrimIfNotNull(surveyID);

                //convert the survey id received
                Guid SurveyID;
                if (!Guid.TryParse(surveyID, out SurveyID))
                {
                    return Utils.WrapError("Survey ID is not in the correct format");
                }

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    //get the survey you are wanting to check
                    var survey = (from s in entity.Surveys
                                  join p in entity.Projects
                                  on s.ProjectID equals p.ID
                                  where s.ID == SurveyID
                                  select new
                                  {
                                      s.IsActive,
                                      s.StartDate,
                                      s.EndDate,
                                      ProjectIsActive = p.IsActive
                                  }).FirstOrDefault();

                    if (survey == null)
                    {
                        return Utils.WrapError("Survey not found");
                    }

                    if (!survey.IsActive.Value)
                    {
                        return Utils.WrapError("This survey is inactive. Changes are no longer permitted");
                    }

                    if (survey.StartDate != null)
                    {
                        return Utils.WrapError("This survey has been started. Changes to the survey information and questions is no longer permitted.");
                    }

                    if (survey.StartDate != null && survey.EndDate != null)
                    {
                        return Utils.WrapError("This survey has ended. Changes to the survey information and questions is no longer permitted.");
                    }

                    if (!survey.ProjectIsActive.Value)
                    {
                        return Utils.WrapError("The project that this survey is associated with is inactive. Changes are no longer permitted");
                    }
                }

                dynamic returnItem = new JObject();
                returnItem.Status = "Success";
                return returnItem.ToString();
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        //check if a survey is active / not
        private string CheckSurveyIsActive(string surveyID)
        {
            try
            {
                //remove any extra whitespaces
                surveyID = TrimIfNotNull(surveyID);

                //convert the survey id received
                Guid SurveyID;
                if (!Guid.TryParse(surveyID, out SurveyID))
                {
                    return Utils.WrapError("Survey ID is not in the correct format");
                }

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    //get the survey you are wanting to check
                    var survey = (from s in entity.Surveys
                                  join p in entity.Projects
                                  on s.ProjectID equals p.ID
                                  where s.ID == SurveyID
                                  select new
                                  {
                                      s.IsActive,
                                      s.StartDate,
                                      s.EndDate,
                                      ProjectIsActive = p.IsActive
                                  }).FirstOrDefault();

                    if (survey == null)
                    {
                        return Utils.WrapError("Survey not found");
                    }

                    if (!survey.IsActive.Value)
                    {
                        return Utils.WrapError("This survey is inactive. Changes are no longer permitted");
                    }

                    if (!survey.ProjectIsActive.Value)
                    {
                        return Utils.WrapError("The project that this survey is associated with is inactive. Changes are no longer permitted");
                    }
                }

                dynamic returnItem = new JObject();
                returnItem.Status = "Success";
                return returnItem.ToString();
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }*/

        //check if the user is active on a user level
        private string CheckUserIsActive(string userID)
        {
            try
            {
                //remove any extra whitespaces
                userID = TrimIfNotNull(userID);

                //convert the user id received
                Guid UserID;
                if (!Guid.TryParse(userID, out UserID))
                {
                    return Utils.WrapError("User ID is not in the correct format");
                }

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    //get the user you are wanting to check
                    var user = (from m in entity.aspnet_Membership
                                where m.UserId == UserID
                                select m).FirstOrDefault();

                    if (user == null)
                    {
                        return Utils.WrapError("User not found");
                    }

                    //if the user is locked out, don't let them login
                    if (user.IsLockedOut)
                    {
                        return Utils.WrapError("Your account has been locked. Please contact your Project Administrator or Company Owner and request a password reset.");
                    }
                    //if the user is not active, dont let them login
                    if (!user.IsActive.Value)
                    {
                        return Utils.WrapError("Your account is no longer active. Please contact your Project Administrator or Company Owner.");
                    }

                    //get the company the user is assigned to
                    var company = (from c in entity.Companies
                                   join cu in entity.CompanyUsers
                                   on c.ID equals cu.CompanyID
                                   where cu.UserID == UserID
                                   select c).FirstOrDefault();

                    //if there is a company assigned
                    if (company != null)
                    {
                        //if the company is not active
                        if (!company.IsActive.Value)
                        {
                            return Utils.WrapError("Your company is no longer active. Please contact your Project Administrator or Company Owner.");
                        }
                    }

                }

                dynamic returnItem = new JObject();
                returnItem.Status = "Success";
                return returnItem.ToString();
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        //check if a user is active on a project level
        private string CheckProjectUserIsActive(string userID, string projectID)
        {
            try
            {
                //remove any extra whitespaces
                userID = TrimIfNotNull(userID);
                projectID = TrimIfNotNull(projectID);

                //convert the user id received
                Guid UserID;
                if (!Guid.TryParse(userID, out UserID))
                {
                    return Utils.WrapError("User ID is not in the correct format");
                }

                //convert the project id received
                Guid ProjectID;
                if (!Guid.TryParse(projectID, out ProjectID))
                {
                    return Utils.WrapError("Project ID is not in the correct format");
                }

                //check if the user is active on a user level
                string userIsActive = CheckUserIsActive(userID);
                if (Utils.IsError(userIsActive))
                {
                    return userIsActive;
                }

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {

                    var projectTeam = (from pt in entity.ProjectTeams
                                           //join p in entity.Projects
                                           //on pt.ProjectID equals p.ID
                                       where pt.ProjectID == ProjectID && pt.UserID == UserID
                                       select new
                                       {
                                           ProjectUserIsActive = pt.IsActive//,
                                           //ProjectIsActive = p.IsActive,
                                           //p.ActualEndDate,
                                           //p.ActualStartDate
                                       }).FirstOrDefault();


                    if (projectTeam == null)
                    {
                        return Utils.WrapError("The user was not assigned to this project");
                    }

                    //if the user is inactive
                    if (!projectTeam.ProjectUserIsActive.Value)
                    {
                        return Utils.WrapError("The user is inactive on this project");
                    }

                    //check the project's status
                    var projectStatus = CheckProjectStatus(ProjectID + "", "true", "true", "true");
                    if (Utils.IsError(projectStatus))
                    {
                        return projectStatus;
                    }


                    /*if (!projectTeam.ProjectIsActive.Value)
                    {
                        return Utils.WrapError("This project is inactive. Changes are no longer permitted.");
                    }

                    if (projectTeam.ActualStartDate != null)
                    {
                        return Utils.WrapError("This project has been started. Changes to the project information is no longer permitted.");
                    }

                    if (projectTeam.ActualStartDate != null && projectTeam.ActualEndDate != null)
                    {
                        return Utils.WrapError("This project has ended. Changes to the project information and creation of surveys is no longer permitted.");
                    }*/


                }

                dynamic returnItem = new JObject();
                returnItem.Status = "Success";
                return returnItem.ToString();
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        //check if a user is active on a survey level
        private string CheckSurveyUserIsActive(string userID, string surveyID)
        {
            try
            {
                //remove any extra whitespaces
                userID = TrimIfNotNull(userID);
                surveyID = TrimIfNotNull(surveyID);

                //convert the user id received
                Guid UserID;
                if (!Guid.TryParse(userID, out UserID))
                {
                    return Utils.WrapError("User ID is not in the correct format");
                }

                //convert the survey id received
                Guid SurveyID;
                if (!Guid.TryParse(surveyID, out SurveyID))
                {
                    return Utils.WrapError("Survey ID is not in the correct format");
                }


                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {

                    var surveyTeam = (from st in entity.SurveyTeams
                                      join s in entity.Surveys
                                      on st.SurveyID equals s.ID
                                      where st.SurveyID == SurveyID && st.UserID == UserID
                                      select new
                                      {
                                          SurveyUserIsActive = st.IsActive,
                                          s.ProjectID,
                                          //  SurveyIsActive = s.IsActive,
                                          //  s.StartDate,
                                          //  s.EndDate
                                      }).FirstOrDefault();


                    if (surveyTeam == null)
                    {
                        return Utils.WrapError("The user was not assigned to this survey");
                    }

                    //check if the user is active on a project and user level
                    string userIsActive = CheckProjectUserIsActive(userID, surveyTeam.ProjectID + "");
                    if (Utils.IsError(userIsActive))
                    {
                        return userIsActive;
                    }
                    /*if (!surveyTeam.SurveyIsActive.Value)
                    {
                        return Utils.WrapError("This survey is inactive. Changes are no longer permitted.");
                    }

                    if (surveyTeam.StartDate != null)
                    {
                        return Utils.WrapError("This survey has been started. Changes to the survey information and questions is no longer permitted.");
                    }

                    if (surveyTeam.StartDate != null && surveyTeam.EndDate != null)
                    {
                        return Utils.WrapError("This survey has ended. Changes to the survey information and questions is no longer permitted.");
                    }*/

                    //if the user is inactive
                    if (!surveyTeam.SurveyUserIsActive.Value)
                    {
                        return Utils.WrapError("The user is inactive on this survey");
                    }

                    //check the survey's status
                    var surveyStatus = CheckSurveyStatus(surveyID + "", "true", "true", "true");
                    if (Utils.IsError(surveyStatus))
                    {
                        return surveyStatus;
                    }
                }

                dynamic returnItem = new JObject();
                returnItem.Status = "Success";
                return returnItem.ToString();
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        /// <summary>
        /// check the status of a project
        /// </summary>
        /// <param name="projectID">The ID of the Project</param>
        /// <param name="checkIsInactive">true - Check if the project is inactive  / null if you don't want to check this field</param>
        /// <param name="checkIsStarted">true - Check if the project is started / null if you don't want to check this field</param>
        /// <param name="checkIsEnded">true - Check if the project has ended  / null if you don't want to check this field</param>
        /// <returns></returns>
        private string CheckProjectStatus(string projectID, string checkIsInactive, string checkIsStarted, string checkIsEnded)
        {
            try
            {
                //remove any extra whitespaces
                projectID = TrimIfNotNull(projectID);

                //convert the project id received
                Guid ProjectID;
                if (!Guid.TryParse(projectID, out ProjectID))
                {
                    return Utils.WrapError("Project ID is not in the correct format");
                }

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    //get the project you are wanting to check
                    var project = (from p in entity.Projects
                                   where p.ID == ProjectID
                                   select p).FirstOrDefault();

                    if (project == null)
                    {
                        return Utils.WrapError("Project not found");
                    }

                    //if the IsActive needs to be checked
                    if (checkIsInactive != null)
                    {

                        //check the IsActive Status
                        if (!project.IsActive.Value)
                        {
                            Helper.LogMessage("Project checkIsInactive = false");
                            return Utils.WrapError("This project is inactive. Changes are no longer permitted.");
                        }
                    }
                    //if the isEnded needs to be checked
                    if (checkIsEnded != null)
                    {

                        if (project.ActualStartDate != null && project.ActualEndDate != null)
                        {
                            Helper.LogMessage("Project checkIsEnded = true");
                            return Utils.WrapError("This project has ended. Changes to the project information and creation of surveys is no longer permitted.");
                        }
                    }


                    //if the Start date needs to be checked
                    if (checkIsStarted != null)
                    {

                        if (project.ActualStartDate != null)
                        {
                            Helper.LogMessage("Project checkIsStarted = true");
                            return Utils.WrapError("This project has been started. Changes to the project information is no longer permitted.");
                        }
                    }

                }

                dynamic returnItem = new JObject();
                returnItem.Status = "Success";
                return returnItem.ToString();
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        /// <summary>
        /// check the status of a survey
        /// </summary>
        /// <param name="surveyID">The ID of the Survey</param>
        /// <param name="checkIsInactive">true - Check if the survey is inactive  / null if you don't want to check this field</param>
        /// <param name="checkIsStarted">true - Check if the survey is started / null if you don't want to check this field</param>
        /// <param name="checkIsEnded">true - Check if the survey has ended  / null if you don't want to check this field</param>
        /// <returns></returns>
        private string CheckSurveyStatus(string surveyID, string checkIsInactive, string checkIsStarted, string checkIsEnded)
        {
            try
            {
                //remove any extra whitespaces
                surveyID = TrimIfNotNull(surveyID);

                //convert the survey id received
                Guid SurveyID;
                if (!Guid.TryParse(surveyID, out SurveyID))
                {
                    return Utils.WrapError("Survey ID is not in the correct format");
                }


                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    //get the survey you are wanting to check
                    var survey = (from s in entity.Surveys
                                  join p in entity.Projects
                                  on s.ProjectID equals p.ID
                                  where s.ID == SurveyID
                                  select new
                                  {
                                      s.IsActive,
                                      s.StartDate,
                                      s.EndDate,
                                      s.SurveyTitle,
                                      ProjectIsActive = p.IsActive
                                  }).FirstOrDefault();

                    if (survey == null)
                    {
                        return Utils.WrapError("Survey not found");
                    }

                    //if the IsActive needs to be checked
                    if (checkIsInactive != null)
                    {

                        //check the IsActive Status
                        if (!survey.IsActive.Value)
                        {
                            Helper.LogMessage("Survey checkIsInactive = false");
                            return Utils.WrapError("This survey is inactive. Changes are no longer permitted");
                        }

                    }

                    //if the isEnded needs to be checked
                    if (checkIsEnded != null)
                    {
                        if (survey.StartDate != null && survey.EndDate != null)
                        {
                            Helper.LogMessage("Project checkIsEnded = true");
                            return Utils.WrapError("This survey has ended. Changes are no longer permitted.");
                        }
                    }


                    //if the Start date needs to be checked
                    if (checkIsStarted != null)
                    {
                        if (survey.StartDate != null)
                        {
                            Helper.LogMessage("Project checkIsStarted = true");
                            return Utils.WrapError("This survey has been started. Changes are no longer permitted.");
                        }
                    }

                }

                dynamic returnItem = new JObject();
                returnItem.Status = "Success";
                return returnItem.ToString();
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        //check if the package is active and get the details of the package
        private string CheckCompanyPackageIsActive(string companyID)
        {
            try
            {
                //remove any extra whitespaces
                companyID = TrimIfNotNull(companyID);

                //convert the company id received
                Guid CompanyID;
                if (!Guid.TryParse(companyID, out CompanyID))
                {
                    return Utils.WrapError("Company ID is not in the correct format");
                }

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    DateTime StartDate = DateTime.Today;

                    var curPackage = entity.GetCompanyCurrentPackage(CompanyID, StartDate).FirstOrDefault();
                    //if there are no packages for the company
                    if (curPackage == null)
                    {
                        return Utils.WrapError("Your company does not have any active packages. Please purchase a package before continuing.");
                    }

                    dynamic returnItem = new JObject();
                    returnItem.Status = "Success";
                    returnItem.CompanyPackageID = curPackage.ID;
                    returnItem.PackageName = curPackage.PackageName;
                    returnItem.Description = curPackage.Description;
                    returnItem.DateStart = curPackage.DateStart;
                    returnItem.DateExpires = curPackage.DateExpires;
                    returnItem.NumberMonthsSignedUpFor = curPackage.NumberMonthsSignedUpFor;
                    returnItem.Price = curPackage.Price;
                    returnItem.PaymentType = curPackage.PaymentType;
                    returnItem.NumberOfSurveys = curPackage.NumberOfSurveys;
                    returnItem.NumberOfQuestions = curPackage.NumberOfQuestions;
                    returnItem.NumberOfUsers = curPackage.NumberOfUsers;
                    returnItem.NumberOfResponses = curPackage.NumberOfResponses;
                    returnItem.NumberOfProjects = curPackage.NumberOfProjects;
                    returnItem.BasicReporting = curPackage.BasicReporting;
                    returnItem.AdvancedReporting = curPackage.AdvancedReporting;
                    returnItem.Excel = curPackage.Excel;
                    returnItem.PDF = curPackage.PDF;
                    returnItem.CSV = curPackage.CSV;
                    returnItem.Piping = curPackage.Piping;
                    returnItem.Summing = curPackage.Summing;
                    returnItem.WhiteLabelling = curPackage.WhiteLabelling;
                    returnItem.PhotoCamera = curPackage.PhotoCamera;
                    returnItem.GeoServices = curPackage.GeoServices;
                    returnItem.Signatures = curPackage.Signatures;
                    returnItem.UniqueID = curPackage.UniqueID;
                    return returnItem.ToString();
                }
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        //number of surveys in total for the month
        private string CheckCompanyPackageNoSurveys(string companyID)
        {
            try
            {
                //remove any extra whitespaces
                companyID = TrimIfNotNull(companyID);

                //convert the company id received
                Guid CompanyID;
                if (!Guid.TryParse(companyID, out CompanyID))
                {
                    return Utils.WrapError("Company ID is not in the correct format");
                }

                //check that the company has a active package
                var result = CheckCompanyPackageIsActive(companyID);
                if (Utils.IsError(result))
                {
                    return result;
                }

                //convert the company package id retrieved from the CheckCompanyPackageIsActive()
                JObject objResult = JObject.Parse(result);
                string companyPackageID = objResult.GetValue("CompanyPackageID").ToString();
                Guid CompanyPackageID;
                if (!Guid.TryParse(companyPackageID, out CompanyPackageID))
                {
                    Helper.LogMessage("Your company package could not be retrieved. Please contact the Surveya Administrator to resolve this issue.");
                    Helper.LogMessage("CheckCompanyPackageNoSurveys: CompanyPackageID is not in the correct format");
                    return Utils.WrapError("Your company package could not be retrieved. Please contact the Surveya Administrator to resolve this issue.");
                }

                string numberOfItemsAllowed = objResult.GetValue("NumberOfSurveys").ToString();
                int NumberOfItemsAllowed;
                if (!Int32.TryParse(numberOfItemsAllowed, out NumberOfItemsAllowed))
                {
                    Helper.LogMessage("Your company package could not be retrieved. Please contact the Surveya Administrator to resolve this issue.");
                    Helper.LogMessage("CheckCompanyPackageNoSurveys: NumberOfItemsAllowed is not in the correct format");
                    return Utils.WrapError("Your company package could not be retrieved. Please contact the Surveya Administrator to resolve this issue.");
                }

                string packageStartDate = objResult.GetValue("DateStart").ToString();
                DateTime PackageStartDate;
                if (!DateTime.TryParse(packageStartDate, out PackageStartDate))
                {
                    Helper.LogMessage("Your company package could not be retrieved. Please contact the Surveya Administrator to resolve this issue.");
                    Helper.LogMessage("CheckCompanyPackageNoSurveys: PackageStartDate is not in the correct format");
                    return Utils.WrapError("Your company package could not be retrieved. Please contact the Surveya Administrator to resolve this issue.");
                }

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    //get the current date
                    DateTime curDate = DateTime.Today;

                    //get the start day of the package
                    int startDay = PackageStartDate.Day;

                    //get the current month and year we are in
                    int curMonth = curDate.Month;
                    int curYear = curDate.Year;

                    //create a end date for the month we checking - this month is based on when the package was signed up for
                    DateTime endDate = new DateTime(curYear, curMonth, startDay);

                    //check if the end date is in the current month that we are checking
                    //if the month has passed
                    if (endDate < curDate)
                    {
                        //set the end date to next month
                        endDate = endDate.AddMonths(1);
                    }

                    //calculate the start date which will be a month before the end date
                    DateTime startDate = endDate.AddMonths(-1);

                    //calculate the current number of surveys the company has
                    var curItems = (from s in entity.Surveys
                                    join p in entity.Projects
                                    on s.ProjectID equals p.ID
                                    where p.ProjectCompany == CompanyID /*&& s.IsActive == true && p.IsActive == true*/
                                    && s.DateCreated >= startDate && s.DateCreated <= endDate
                                    select s).ToList();

                    //check if there were any surveys found
                    if (curItems != null && curItems.Count() > 0)
                    {
                        //compare the number of allowed surveys to the number of current surveys
                        if (curItems.Count() >= NumberOfItemsAllowed)
                        {
                            return Utils.WrapError("You have reached the total number of Surveys allowed on your current package for this month ( " + startDate.ToString("dd MMM yyyy") + " - " + endDate.ToString("dd MMM yyyy") + " ) ");
                        }
                    }

                    dynamic returnItem = new JObject();
                    returnItem.Status = "Success";
                    return returnItem.ToString();
                }
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        //number of questions per survey
        private string CheckCompanyPackageNoQuestions(string companyID, string surveyID)
        {
            try
            {
                //remove any extra whitespaces
                companyID = TrimIfNotNull(companyID);
                surveyID = TrimIfNotNull(surveyID);

                //convert the company id received
                Guid CompanyID;
                if (!Guid.TryParse(companyID, out CompanyID))
                {
                    return Utils.WrapError("Company ID is not in the correct format");
                }
                Guid SurveyID;
                if (!Guid.TryParse(surveyID, out SurveyID))
                {
                    return Utils.WrapError("Survey ID is not in the correct format");
                }

                //check that the company has a active package
                var result = CheckCompanyPackageIsActive(companyID);
                if (Utils.IsError(result))
                {
                    return result;
                }

                //convert the company package id retrieved from the CheckCompanyPackageIsActive()
                JObject objResult = JObject.Parse(result);
                string companyPackageID = objResult.GetValue("CompanyPackageID").ToString();
                Guid CompanyPackageID;
                if (!Guid.TryParse(companyPackageID, out CompanyPackageID))
                {
                    Helper.LogMessage("Your company package could not be retrieved. Please contact the Surveya Administrator to resolve this issue.");
                    Helper.LogMessage("CheckCompanyPackageNoQuestions: CompanyPackageID is not in the correct format");
                    return Utils.WrapError("Your company package could not be retrieved. Please contact the Surveya Administrator to resolve this issue.");
                }

                string numberOfItemsAllowed = objResult.GetValue("NumberOfQuestions").ToString();
                int NumberOfItemsAllowed;
                if (!Int32.TryParse(numberOfItemsAllowed, out NumberOfItemsAllowed))
                {
                    Helper.LogMessage("Your company package could not be retrieved. Please contact the Surveya Administrator to resolve this issue.");
                    Helper.LogMessage("CheckCompanyPackageNoQuestions: NumberOfItemsAllowed is not in the correct format");
                    return Utils.WrapError("Your company package could not be retrieved. Please contact the Surveya Administrator to resolve this issue.");
                }

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {

                    //calculate the current number of questions the company has for the specific survey
                    var curItems = (from q in entity.Questions
                                    join qg in entity.QuestionGroups
                                    on q.GroupID equals qg.ID
                                    join s in entity.Surveys
                                    on qg.SurveyID equals s.ID
                                    join p in entity.Projects
                                    on s.ProjectID equals p.ID
                                    where p.ProjectCompany == CompanyID /*&& s.IsActive == true && p.IsActive == true*/
                                    && qg.SurveyID == SurveyID
                                    select q).ToList();

                    //check if there were any questions found
                    if (curItems != null && curItems.Count() > 0)
                    {
                        //compare the number of allowed questions to the number of current questions
                        if (curItems.Count() >= NumberOfItemsAllowed)
                        {
                            return Utils.WrapError("You have reached the total number of Questions allowed for this survey");
                        }
                    }

                    dynamic returnItem = new JObject();
                    returnItem.Status = "Success";
                    return returnItem.ToString();
                }
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        //number of questions if creating a new survey
        private string CheckCompanyPackageNoQuestionsNewSurvey(string companyID, string numberQuestionsAdding)
        {
            try
            {
                //remove any extra whitespaces
                companyID = TrimIfNotNull(companyID);
                numberQuestionsAdding = TrimIfNotNull(numberQuestionsAdding);

                //convert the company id received
                Guid CompanyID;
                if (!Guid.TryParse(companyID, out CompanyID))
                {
                    return Utils.WrapError("Company ID is not in the correct format");
                }

                Int32 NumberQuestionsAdding;
                if (!Int32.TryParse(numberQuestionsAdding, out NumberQuestionsAdding))
                {
                    return Utils.WrapError("Number Of Questions adding is not in the correct format");
                }

                //check that the company has a active package
                var result = CheckCompanyPackageIsActive(companyID);
                if (Utils.IsError(result))
                {
                    return result;
                }

                //convert the company package id retrieved from the CheckCompanyPackageIsActive()
                JObject objResult = JObject.Parse(result);
                string companyPackageID = objResult.GetValue("CompanyPackageID").ToString();
                Guid CompanyPackageID;
                if (!Guid.TryParse(companyPackageID, out CompanyPackageID))
                {
                    Helper.LogMessage("Your company package could not be retrieved. Please contact the Surveya Administrator to resolve this issue.");
                    Helper.LogMessage("CheckCompanyPackageNoQuestions: CompanyPackageID is not in the correct format");
                    return Utils.WrapError("Your company package could not be retrieved. Please contact the Surveya Administrator to resolve this issue.");
                }

                string numberOfItemsAllowed = objResult.GetValue("NumberOfQuestions").ToString();
                int NumberOfItemsAllowed;
                if (!Int32.TryParse(numberOfItemsAllowed, out NumberOfItemsAllowed))
                {
                    Helper.LogMessage("Your company package could not be retrieved. Please contact the Surveya Administrator to resolve this issue.");
                    Helper.LogMessage("CheckCompanyPackageNoQuestions: NumberOfItemsAllowed is not in the correct format");
                    return Utils.WrapError("Your company package could not be retrieved. Please contact the Surveya Administrator to resolve this issue.");
                }

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {

                    if (NumberQuestionsAdding > NumberOfItemsAllowed)
                    {
                        return Utils.WrapError("Duplicating this survey will exceed your number of allowed questions for this survey");
                    }

                    dynamic returnItem = new JObject();
                    returnItem.Status = "Success";
                    return returnItem.ToString();
                }
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        //number of active users in total
        private string CheckCompanyPackageNoUsers(string companyID)
        {
            try
            {
                //remove any extra whitespaces
                companyID = TrimIfNotNull(companyID);

                //convert the company id received
                Guid CompanyID;
                if (!Guid.TryParse(companyID, out CompanyID))
                {
                    return Utils.WrapError("Company ID is not in the correct format");
                }

                //check that the company has a active package
                var result = CheckCompanyPackageIsActive(companyID);
                if (Utils.IsError(result))
                {
                    return result;
                }

                //convert the company package id retrieved from the CheckCompanyPackageIsActive()
                JObject objResult = JObject.Parse(result);
                string companyPackageID = objResult.GetValue("CompanyPackageID").ToString();
                Guid CompanyPackageID;
                if (!Guid.TryParse(companyPackageID, out CompanyPackageID))
                {
                    Helper.LogMessage("Your company package could not be retrieved. Please contact the Surveya Administrator to resolve this issue.");
                    Helper.LogMessage("CheckCompanyPackageNoUsers: CompanyPackageID is not in the correct format");
                    return Utils.WrapError("Your company package could not be retrieved. Please contact the Surveya Administrator to resolve this issue.");
                }

                string numberOfItemsAllowed = objResult.GetValue("NumberOfUsers").ToString();
                int NumberOfItemsAllowed;
                if (!Int32.TryParse(numberOfItemsAllowed, out NumberOfItemsAllowed))
                {
                    Helper.LogMessage("Your company package could not be retrieved. Please contact the Surveya Administrator to resolve this issue.");
                    Helper.LogMessage("CheckCompanyPackageNoUsers: NumberOfItemsAllowed is not in the correct format");
                    return Utils.WrapError("Your company package could not be retrieved. Please contact the Surveya Administrator to resolve this issue.");
                }

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    //calculate the current number of users the company has
                    var curItems = (from cu in entity.CompanyUsers
                                    join m in entity.aspnet_Membership
                                    on cu.UserID equals m.UserId
                                    where cu.CompanyID == CompanyID && m.IsActive == true
                                    select m).ToList();

                    //check if there were any users found
                    if (curItems != null && curItems.Count() > 0)
                    {
                        //compare the number of allowed users to the number of current users
                        if (curItems.Count() >= NumberOfItemsAllowed)
                        {
                            return Utils.WrapError("You have reached the total number of active Users allowed on your current package");
                        }
                    }

                    dynamic returnItem = new JObject();
                    returnItem.Status = "Success";
                    return returnItem.ToString();
                }
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        //number of responses per survey
        private string CheckCompanyPackageNoResponses(string companyID, string surveyID, string numberReponsesUploading)
        {
            try
            {
                //remove any extra whitespaces
                companyID = TrimIfNotNull(companyID);
                surveyID = TrimIfNotNull(surveyID);

                //convert the company id received
                Guid CompanyID;
                if (!Guid.TryParse(companyID, out CompanyID))
                {
                    return Utils.WrapError("Company ID is not in the correct format");
                }

                Guid SurveyID;
                if (!Guid.TryParse(surveyID, out SurveyID))
                {
                    return Utils.WrapError("Survey ID is not in the correct format");
                }

                Int32 NumberResponsesUploading;
                if (!Int32.TryParse(numberReponsesUploading, out NumberResponsesUploading))
                {
                    return Utils.WrapError("Number Of Responses uploading is not in the correct format");
                }

                //check that the company has a active package
                var result = CheckCompanyPackageIsActive(companyID);
                if (Utils.IsError(result))
                {
                    return result;
                }

                //convert the company package id retrieved from the CheckCompanyPackageIsActive()
                JObject objResult = JObject.Parse(result);
                string companyPackageID = objResult.GetValue("CompanyPackageID").ToString();
                Guid CompanyPackageID;
                if (!Guid.TryParse(companyPackageID, out CompanyPackageID))
                {
                    Helper.LogMessage("Your company package could not be retrieved. Please contact the Surveya Administrator to resolve this issue.");
                    Helper.LogMessage("CheckCompanyPackageNoResponses: CompanyPackageID is not in the correct format");
                    return Utils.WrapError("Your company package could not be retrieved. Please contact the Surveya Administrator to resolve this issue.");
                }

                string numberOfItemsAllowed = objResult.GetValue("NumberOfResponses").ToString();
                int NumberOfItemsAllowed;
                if (!Int32.TryParse(numberOfItemsAllowed, out NumberOfItemsAllowed))
                {
                    Helper.LogMessage("Your company package could not be retrieved. Please contact the Surveya Administrator to resolve this issue.");
                    Helper.LogMessage("CheckCompanyPackageNoResponses: NumberOfItemsAllowed is not in the correct format");
                    return Utils.WrapError("Your company package could not be retrieved. Please contact the Surveya Administrator to resolve this issue.");
                }

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {

                    //calculate the current number of responses the company has
                    var curItems = (from r in entity.Responses
                                    join s in entity.Surveys
                                    on r.SurveyID equals s.ID
                                    join p in entity.Projects
                                    on s.ProjectID equals p.ID
                                    where p.ProjectCompany == CompanyID /*&& s.IsActive == true && p.IsActive == true && r.IsDeleted == false*/
                                    && r.SurveyID == SurveyID
                                    select r).ToList();

                    //check if there were any responses found
                    if (curItems != null && curItems.Count() > 0)
                    {
                        //compare the number of allowed responses to the number of current users
                        if (curItems.Count() >= NumberOfItemsAllowed)
                        {
                            return Utils.WrapError("You have reached the total number of Responses allowed for this survey");
                        }
                        else if ((curItems.Count() + NumberResponsesUploading) > NumberOfItemsAllowed)
                        {
                            return Utils.WrapError("Uploading " + NumberResponsesUploading + " responses will exceed your number of allowed responses for this survey");
                        }
                    }
                    //if theres no responses in the DB, just check the number of responses being uploaded
                    else
                    {
                        if (NumberResponsesUploading > NumberOfItemsAllowed)
                        {
                            return Utils.WrapError("Uploading " + NumberResponsesUploading + " responses will exceed your number of allowed responses for this survey");
                        }
                    }

                    dynamic returnItem = new JObject();
                    returnItem.Status = "Success";
                    return returnItem.ToString();
                }
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        //number of projects in total for the month
        private string CheckCompanyPackageNoProjects(string companyID)
        {
            try
            {
                //remove any extra whitespaces
                companyID = TrimIfNotNull(companyID);

                //convert the company id received
                Guid CompanyID;
                if (!Guid.TryParse(companyID, out CompanyID))
                {
                    return Utils.WrapError("Company ID is not in the correct format");
                }

                //check that the company has a active package
                var result = CheckCompanyPackageIsActive(companyID);
                if (Utils.IsError(result))
                {
                    return result;
                }

                //convert the company package id retrieved from the CheckCompanyPackageIsActive()
                JObject objResult = JObject.Parse(result);
                string companyPackageID = objResult.GetValue("CompanyPackageID").ToString();
                Guid CompanyPackageID;
                if (!Guid.TryParse(companyPackageID, out CompanyPackageID))
                {
                    Helper.LogMessage("Your company package could not be retrieved. Please contact the Surveya Administrator to resolve this issue.");
                    Helper.LogMessage("CheckCompanyPackageNoProjects: CompanyPackageID is not in the correct format");
                    return Utils.WrapError("Your company package could not be retrieved. Please contact the Surveya Administrator to resolve this issue.");
                }

                string numberOfItemsAllowed = objResult.GetValue("NumberOfProjects").ToString();

                int NumberOfItemsAllowed;
                if (!Int32.TryParse(numberOfItemsAllowed, out NumberOfItemsAllowed))
                {
                    Helper.LogMessage("Your company package could not be retrieved. Please contact the Surveya Administrator to resolve this issue.");
                    Helper.LogMessage("CheckCompanyPackageNoProjects: NumberOfItemsAllowed is not in the correct format");
                    return Utils.WrapError("Your company package could not be retrieved. Please contact the Surveya Administrator to resolve this issue.");
                }


                string packageStartDate = objResult.GetValue("DateStart").ToString();
                DateTime PackageStartDate;
                if (!DateTime.TryParse(packageStartDate, out PackageStartDate))
                {
                    Helper.LogMessage("Your company package could not be retrieved. Please contact the Surveya Administrator to resolve this issue.");
                    Helper.LogMessage("CheckCompanyPackageNoSurveys: PackageStartDate is not in the correct format");
                    return Utils.WrapError("Your company package could not be retrieved. Please contact the Surveya Administrator to resolve this issue.");
                }

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    //get the current date
                    DateTime curDate = DateTime.Today;

                    //get the start day of the package
                    int startDay = PackageStartDate.Day;

                    //get the current month and year we are in
                    int curMonth = curDate.Month;
                    int curYear = curDate.Year;


                    //create a end date for the month we checking - this month is based on when the package was signed up for
                    DateTime endDate = new DateTime(curYear, curMonth, startDay);

                    //check if the end date is in the current month that we are checking
                    //if the month has passed
                    if (endDate < curDate)
                    {
                        //set the end date to next month
                        endDate = endDate.AddMonths(1);
                    }

                    //calculate the start date which will be a month before the end date
                    DateTime startDate = endDate.AddMonths(-1);


                    //calculate the current number of projects the company has
                    var curItems = (from p in entity.Projects
                                    where p.ProjectCompany == CompanyID /*&& p.IsActive == true*/
                                    && p.DateCreated >= startDate && p.DateCreated <= endDate
                                    select p).ToList();

                    //check if there were any projects found
                    if (curItems != null && curItems.Count() > 0)
                    {
                        //compare the number of allowed projects to the number of current projects
                        if (curItems.Count() >= NumberOfItemsAllowed)
                        {
                            return Utils.WrapError("You have reached the total number of Projects allowed on your current package for this month ( " + startDate.ToString("dd MMM yyyy") + " - " + endDate.ToString("dd MMM yyyy") + " ) ");
                        }
                    }

                    dynamic returnItem = new JObject();
                    returnItem.Status = "Success";
                    return returnItem.ToString();
                }
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        /*private string CheckCompanyPackageBasicReporting(string companyID)
        {
            try
            {
                //remove any extra whitespaces
                companyID = TrimIfNotNull(companyID);

                //convert the company id received
                Guid CompanyID;
                if (!Guid.TryParse(companyID, out CompanyID))
                {
                    return Utils.WrapError("Company ID is not in the correct format");
                }

                //check that the company has a active package
                var result = CheckCompanyPackageIsActive(companyID);
                if (Utils.IsError(result))
                {
                    return result;
                }

                //convert the company package id retrieved from the CheckCompanyPackageIsActive()
                JObject objResult = JObject.Parse(result);
                string companyPackageID = objResult.GetValue("CompanyPackageID").ToString();
                Guid CompanyPackageID;
                if (!Guid.TryParse(companyPackageID, out CompanyPackageID))
                {
                    Helper.LogMessage("Your company package could not be retrieved. Please contact the Surveya Administrator to resolve this issue.");
                    Helper.LogMessage("CheckCompanyPackageBasicReporting: CompanyPackageID is not in the correct format");
                    return Utils.WrapError("Your company package could not be retrieved. Please contact the Surveya Administrator to resolve this issue.");
                }

                string itemToCheck = objResult.GetValue("BasicReporting").ToString();
                bool ItemToCheck;
                if (!Boolean.TryParse(itemToCheck, out ItemToCheck))
                {
                    Helper.LogMessage("Your company package could not be retrieved. Please contact the Surveya Administrator to resolve this issue.");
                    Helper.LogMessage("CheckCompanyPackageBasicReporting: ItemToCheck is not in the correct format");
                    return Utils.WrapError("Your company package could not be retrieved. Please contact the Surveya Administrator to resolve this issue.");
                }

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    //check if basic reporting is not allowed
                    if (!ItemToCheck)
                    {
                        return Utils.WrapError("Your current package does not allow you access to Basic Reporting. Please purchase another package to utilise Basic Reporting.");
                    }

                    dynamic returnItem = new JObject();
                    returnItem.Status = "Success";
                    return returnItem.ToString();
                }
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        private string CheckCompanyPackageAdvancedReporting(string companyID)
        {
            try
            {
                //remove any extra whitespaces
                companyID = TrimIfNotNull(companyID);

                //convert the company id received
                Guid CompanyID;
                if (!Guid.TryParse(companyID, out CompanyID))
                {
                    return Utils.WrapError("Company ID is not in the correct format");
                }

                //check that the company has a active package
                var result = CheckCompanyPackageIsActive(companyID);
                if (Utils.IsError(result))
                {
                    return result;
                }

                //convert the company package id retrieved from the CheckCompanyPackageIsActive()
                JObject objResult = JObject.Parse(result);
                string companyPackageID = objResult.GetValue("CompanyPackageID").ToString();
                Guid CompanyPackageID;
                if (!Guid.TryParse(companyPackageID, out CompanyPackageID))
                {
                    Helper.LogMessage("Your company package could not be retrieved. Please contact the Surveya Administrator to resolve this issue.");
                    Helper.LogMessage("CheckCompanyPackageAdvancedReporting: CompanyPackageID is not in the correct format");
                    return Utils.WrapError("Your company package could not be retrieved. Please contact the Surveya Administrator to resolve this issue.");
                }

                string itemToCheck = objResult.GetValue("AdvancedReporting").ToString();
                bool ItemToCheck;
                if (!Boolean.TryParse(itemToCheck, out ItemToCheck))
                {
                    Helper.LogMessage("Your company package could not be retrieved. Please contact the Surveya Administrator to resolve this issue.");
                    Helper.LogMessage("CheckCompanyPackageAdvancedReporting: ItemToCheck is not in the correct format");
                    return Utils.WrapError("Your company package could not be retrieved. Please contact the Surveya Administrator to resolve this issue.");
                }

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    //check if advanced reporting is not allowed
                    if (!ItemToCheck)
                    {
                        return Utils.WrapError("Your current package does not allow you access to Advanced Reporting. Please purchase another package to utilise Advanced Reporting.");
                    }

                    dynamic returnItem = new JObject();
                    returnItem.Status = "Success";
                    return returnItem.ToString();
                }
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        private string CheckCompanyPackageExcel(string companyID)
        {
            try
            {
                //remove any extra whitespaces
                companyID = TrimIfNotNull(companyID);

                //convert the company id received
                Guid CompanyID;
                if (!Guid.TryParse(companyID, out CompanyID))
                {
                    return Utils.WrapError("Company ID is not in the correct format");
                }

                //check that the company has a active package
                var result = CheckCompanyPackageIsActive(companyID);
                if (Utils.IsError(result))
                {
                    return result;
                }

                //convert the company package id retrieved from the CheckCompanyPackageIsActive()
                JObject objResult = JObject.Parse(result);
                string companyPackageID = objResult.GetValue("CompanyPackageID").ToString();
                Guid CompanyPackageID;
                if (!Guid.TryParse(companyPackageID, out CompanyPackageID))
                {
                    Helper.LogMessage("Your company package could not be retrieved. Please contact the Surveya Administrator to resolve this issue.");
                    Helper.LogMessage("CheckCompanyPackageExcel: CompanyPackageID is not in the correct format");
                    return Utils.WrapError("Your company package could not be retrieved. Please contact the Surveya Administrator to resolve this issue.");
                }

                string itemToCheck = objResult.GetValue("Excel").ToString();
                bool ItemToCheck;
                if (!Boolean.TryParse(itemToCheck, out ItemToCheck))
                {
                    Helper.LogMessage("Your company package could not be retrieved. Please contact the Surveya Administrator to resolve this issue.");
                    Helper.LogMessage("CheckCompanyPackageExcel: ItemToCheck is not in the correct format");
                    return Utils.WrapError("Your company package could not be retrieved. Please contact the Surveya Administrator to resolve this issue.");
                }

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    //check if Excel is not allowed
                    if (!ItemToCheck)
                    {
                        return Utils.WrapError("Your current package does not allow you access to Excel downloads. Please purchase another package to utilise Excel downloads.");
                    }

                    dynamic returnItem = new JObject();
                    returnItem.Status = "Success";
                    return returnItem.ToString();
                }
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        private string CheckCompanyPackagePDF(string companyID)
        {
            try
            {
                //remove any extra whitespaces
                companyID = TrimIfNotNull(companyID);

                //convert the company id received
                Guid CompanyID;
                if (!Guid.TryParse(companyID, out CompanyID))
                {
                    return Utils.WrapError("Company ID is not in the correct format");
                }

                //check that the company has a active package
                var result = CheckCompanyPackageIsActive(companyID);
                if (Utils.IsError(result))
                {
                    return result;
                }

                //convert the company package id retrieved from the CheckCompanyPackageIsActive()
                JObject objResult = JObject.Parse(result);
                string companyPackageID = objResult.GetValue("CompanyPackageID").ToString();
                Guid CompanyPackageID;
                if (!Guid.TryParse(companyPackageID, out CompanyPackageID))
                {
                    Helper.LogMessage("Your company package could not be retrieved. Please contact the Surveya Administrator to resolve this issue.");
                    Helper.LogMessage("CheckCompanyPackagePDF: CompanyPackageID is not in the correct format");
                    return Utils.WrapError("Your company package could not be retrieved. Please contact the Surveya Administrator to resolve this issue.");
                }

                string itemToCheck = objResult.GetValue("PDF").ToString();
                bool ItemToCheck;
                if (!Boolean.TryParse(itemToCheck, out ItemToCheck))
                {
                    Helper.LogMessage("Your company package could not be retrieved. Please contact the Surveya Administrator to resolve this issue.");
                    Helper.LogMessage("CheckCompanyPackagePDF: ItemToCheck is not in the correct format");
                    return Utils.WrapError("Your company package could not be retrieved. Please contact the Surveya Administrator to resolve this issue.");
                }

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    //check if PDF is not allowed
                    if (!ItemToCheck)
                    {
                        return Utils.WrapError("Your current package does not allow you access to PDF downloads. Please purchase another package to utilise PDF downloads.");
                    }

                    dynamic returnItem = new JObject();
                    returnItem.Status = "Success";
                    return returnItem.ToString();
                }
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        private string CheckCompanyPackageCSV(string companyID)
        {
            try
            {
                //remove any extra whitespaces
                companyID = TrimIfNotNull(companyID);

                //convert the company id received
                Guid CompanyID;
                if (!Guid.TryParse(companyID, out CompanyID))
                {
                    return Utils.WrapError("Company ID is not in the correct format");
                }

                //check that the company has a active package
                var result = CheckCompanyPackageIsActive(companyID);
                if (Utils.IsError(result))
                {
                    return result;
                }

                //convert the company package id retrieved from the CheckCompanyPackageIsActive()
                JObject objResult = JObject.Parse(result);
                string companyPackageID = objResult.GetValue("CompanyPackageID").ToString();
                Guid CompanyPackageID;
                if (!Guid.TryParse(companyPackageID, out CompanyPackageID))
                {
                    Helper.LogMessage("Your company package could not be retrieved. Please contact the Surveya Administrator to resolve this issue.");
                    Helper.LogMessage("CheckCompanyPackageCSV: CompanyPackageID is not in the correct format");
                    return Utils.WrapError("Your company package could not be retrieved. Please contact the Surveya Administrator to resolve this issue.");
                }

                string itemToCheck = objResult.GetValue("CSV").ToString();
                bool ItemToCheck;
                if (!Boolean.TryParse(itemToCheck, out ItemToCheck))
                {
                    Helper.LogMessage("Your company package could not be retrieved. Please contact the Surveya Administrator to resolve this issue.");
                    Helper.LogMessage("CheckCompanyPackageCSV: ItemToCheck is not in the correct format");
                    return Utils.WrapError("Your company package could not be retrieved. Please contact the Surveya Administrator to resolve this issue.");
                }

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    //check if CSV is not allowed
                    if (!ItemToCheck)
                    {
                        return Utils.WrapError("Your current package does not allow you access to CSV downloads. Please purchase another package to utilise CSV downloads.");
                    }

                    dynamic returnItem = new JObject();
                    returnItem.Status = "Success";
                    return returnItem.ToString();
                }
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }*/

        private string CheckCompanyPackagePiping(string companyID)
        {
            try
            {
                //remove any extra whitespaces
                companyID = TrimIfNotNull(companyID);

                //convert the company id received
                Guid CompanyID;
                if (!Guid.TryParse(companyID, out CompanyID))
                {
                    return Utils.WrapError("Company ID is not in the correct format");
                }

                //check that the company has a active package
                var result = CheckCompanyPackageIsActive(companyID);
                if (Utils.IsError(result))
                {
                    return result;
                }

                //convert the company package id retrieved from the CheckCompanyPackageIsActive()
                JObject objResult = JObject.Parse(result);
                string companyPackageID = objResult.GetValue("CompanyPackageID").ToString();
                Guid CompanyPackageID;
                if (!Guid.TryParse(companyPackageID, out CompanyPackageID))
                {
                    Helper.LogMessage("Your company package could not be retrieved. Please contact the Surveya Administrator to resolve this issue.");
                    Helper.LogMessage("CheckCompanyPackagePiping: CompanyPackageID is not in the correct format");
                    return Utils.WrapError("Your company package could not be retrieved. Please contact the Surveya Administrator to resolve this issue.");
                }

                string itemToCheck = objResult.GetValue("Piping").ToString();
                bool ItemToCheck;
                if (!Boolean.TryParse(itemToCheck, out ItemToCheck))
                {
                    Helper.LogMessage("Your company package could not be retrieved. Please contact the Surveya Administrator to resolve this issue.");
                    Helper.LogMessage("CheckCompanyPackagePiping: ItemToCheck is not in the correct format");
                    return Utils.WrapError("Your company package could not be retrieved. Please contact the Surveya Administrator to resolve this issue.");
                }

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    //check if Piping is not allowed
                    if (!ItemToCheck)
                    {
                        return Utils.WrapError("Your current package does not allow you access to Piping. Please purchase another package to utilise Piping.");
                    }

                    dynamic returnItem = new JObject();
                    returnItem.Status = "Success";
                    return returnItem.ToString();
                }
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        private string CheckCompanyPackageSumming(string companyID)
        {
            try
            {
                //remove any extra whitespaces
                companyID = TrimIfNotNull(companyID);

                //convert the company id received
                Guid CompanyID;
                if (!Guid.TryParse(companyID, out CompanyID))
                {
                    return Utils.WrapError("Company ID is not in the correct format");
                }

                //check that the company has a active package
                var result = CheckCompanyPackageIsActive(companyID);
                if (Utils.IsError(result))
                {
                    return result;
                }

                //convert the company package id retrieved from the CheckCompanyPackageIsActive()
                JObject objResult = JObject.Parse(result);
                string companyPackageID = objResult.GetValue("CompanyPackageID").ToString();
                Guid CompanyPackageID;
                if (!Guid.TryParse(companyPackageID, out CompanyPackageID))
                {
                    Helper.LogMessage("Your company package could not be retrieved. Please contact the Surveya Administrator to resolve this issue.");
                    Helper.LogMessage("CheckCompanyPackageSumming: CompanyPackageID is not in the correct format");
                    return Utils.WrapError("Your company package could not be retrieved. Please contact the Surveya Administrator to resolve this issue.");
                }

                string itemToCheck = objResult.GetValue("Summing").ToString();
                bool ItemToCheck;
                if (!Boolean.TryParse(itemToCheck, out ItemToCheck))
                {
                    Helper.LogMessage("Your company package could not be retrieved. Please contact the Surveya Administrator to resolve this issue.");
                    Helper.LogMessage("CheckCompanyPackageSumming: ItemToCheck is not in the correct format");
                    return Utils.WrapError("Your company package could not be retrieved. Please contact the Surveya Administrator to resolve this issue.");
                }

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    //check if Summing is not allowed
                    if (!ItemToCheck)
                    {
                        return Utils.WrapError("Your current package does not allow you access to Summing. Please purchase another package to utilise Summing.");
                    }

                    dynamic returnItem = new JObject();
                    returnItem.Status = "Success";
                    return returnItem.ToString();
                }
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        private string CheckCompanyPackageWhiteLabelling(string companyID)
        {
            try
            {
                //remove any extra whitespaces
                companyID = TrimIfNotNull(companyID);

                //convert the company id received
                Guid CompanyID;
                if (!Guid.TryParse(companyID, out CompanyID))
                {
                    return Utils.WrapError("Company ID is not in the correct format");
                }

                //check that the company has a active package
                var result = CheckCompanyPackageIsActive(companyID);
                if (Utils.IsError(result))
                {
                    return result;
                }

                //convert the company package id retrieved from the CheckCompanyPackageIsActive()
                JObject objResult = JObject.Parse(result);
                string companyPackageID = objResult.GetValue("CompanyPackageID").ToString();
                Guid CompanyPackageID;
                if (!Guid.TryParse(companyPackageID, out CompanyPackageID))
                {
                    Helper.LogMessage("Your company package could not be retrieved. Please contact the Surveya Administrator to resolve this issue.");
                    Helper.LogMessage("CheckCompanyPackageWhiteLabelling: CompanyPackageID is not in the correct format");
                    return Utils.WrapError("Your company package could not be retrieved. Please contact the Surveya Administrator to resolve this issue.");
                }

                string itemToCheck = objResult.GetValue("WhiteLabelling").ToString();
                bool ItemToCheck;
                if (!Boolean.TryParse(itemToCheck, out ItemToCheck))
                {
                    Helper.LogMessage("Your company package could not be retrieved. Please contact the Surveya Administrator to resolve this issue.");
                    Helper.LogMessage("CheckCompanyPackageWhiteLabelling: ItemToCheck is not in the correct format");
                    return Utils.WrapError("Your company package could not be retrieved. Please contact the Surveya Administrator to resolve this issue.");
                }

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    //check if White-Labelling is not allowed
                    if (!ItemToCheck)
                    {
                        return Utils.WrapError("Your current package does not allow you access to Branding. Please purchase another package to add your company branding.");
                    }

                    dynamic returnItem = new JObject();
                    returnItem.Status = "Success";
                    return returnItem.ToString();
                }
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        private string CheckCompanyPackagePhotoCamera(string companyID)
        {
            try
            {
                //remove any extra whitespaces
                companyID = TrimIfNotNull(companyID);

                //convert the company id received
                Guid CompanyID;
                if (!Guid.TryParse(companyID, out CompanyID))
                {
                    return Utils.WrapError("Company ID is not in the correct format");
                }

                //check that the company has a active package
                var result = CheckCompanyPackageIsActive(companyID);
                if (Utils.IsError(result))
                {
                    return result;
                }

                //convert the company package id retrieved from the CheckCompanyPackageIsActive()
                JObject objResult = JObject.Parse(result);
                string companyPackageID = objResult.GetValue("CompanyPackageID").ToString();
                Guid CompanyPackageID;
                if (!Guid.TryParse(companyPackageID, out CompanyPackageID))
                {
                    Helper.LogMessage("Your company package could not be retrieved. Please contact the Surveya Administrator to resolve this issue.");
                    Helper.LogMessage("CheckCompanyPackagePhotoCamera: CompanyPackageID is not in the correct format");
                    return Utils.WrapError("Your company package could not be retrieved. Please contact the Surveya Administrator to resolve this issue.");
                }

                string itemToCheck = objResult.GetValue("PhotoCamera").ToString();
                bool ItemToCheck;
                if (!Boolean.TryParse(itemToCheck, out ItemToCheck))
                {
                    Helper.LogMessage("Your company package could not be retrieved. Please contact the Surveya Administrator to resolve this issue.");
                    Helper.LogMessage("CheckCompanyPackagePhotoCamera: ItemToCheck is not in the correct format");
                    return Utils.WrapError("Your company package could not be retrieved. Please contact the Surveya Administrator to resolve this issue.");
                }

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    //check if PhotoCamera is not allowed
                    if (!ItemToCheck)
                    {
                        return Utils.WrapError("Your current package does not allow you access to the Photo / Camera feature. Please purchase another package to utilise the Photo / Camera feature.");
                    }

                    dynamic returnItem = new JObject();
                    returnItem.Status = "Success";
                    return returnItem.ToString();
                }
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        private string CheckCompanyPackageGeoServices(string companyID)
        {
            try
            {
                //remove any extra whitespaces
                companyID = TrimIfNotNull(companyID);

                //convert the company id received
                Guid CompanyID;
                if (!Guid.TryParse(companyID, out CompanyID))
                {
                    return Utils.WrapError("Company ID is not in the correct format");
                }

                //check that the company has a active package
                var result = CheckCompanyPackageIsActive(companyID);
                if (Utils.IsError(result))
                {
                    return result;
                }

                //convert the company package id retrieved from the CheckCompanyPackageIsActive()
                JObject objResult = JObject.Parse(result);
                string companyPackageID = objResult.GetValue("CompanyPackageID").ToString();
                Guid CompanyPackageID;
                if (!Guid.TryParse(companyPackageID, out CompanyPackageID))
                {
                    Helper.LogMessage("Your company package could not be retrieved. Please contact the Surveya Administrator to resolve this issue.");
                    Helper.LogMessage("CheckCompanyPackageGeoServices: CompanyPackageID is not in the correct format");
                    return Utils.WrapError("Your company package could not be retrieved. Please contact the Surveya Administrator to resolve this issue.");
                }

                string itemToCheck = objResult.GetValue("GeoServices").ToString();
                bool ItemToCheck;
                if (!Boolean.TryParse(itemToCheck, out ItemToCheck))
                {
                    Helper.LogMessage("Your company package could not be retrieved. Please contact the Surveya Administrator to resolve this issue.");
                    Helper.LogMessage("CheckCompanyPackageGeoServices: ItemToCheck is not in the correct format");
                    return Utils.WrapError("Your company package could not be retrieved. Please contact the Surveya Administrator to resolve this issue.");
                }

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    //check if GeoServices is not allowed
                    if (!ItemToCheck)
                    {
                        return Utils.WrapError("Your current package does not allow you access to the Geo Services feature. Please purchase another package to utilise the Geo Services feature.");
                    }

                    dynamic returnItem = new JObject();
                    returnItem.Status = "Success";
                    return returnItem.ToString();
                }
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        private string CheckCompanyPackageSignatures(string companyID)
        {
            try
            {
                //remove any extra whitespaces
                companyID = TrimIfNotNull(companyID);

                //convert the company id received
                Guid CompanyID;
                if (!Guid.TryParse(companyID, out CompanyID))
                {
                    return Utils.WrapError("Company ID is not in the correct format");
                }

                //check that the company has a active package
                var result = CheckCompanyPackageIsActive(companyID);
                if (Utils.IsError(result))
                {
                    return result;
                }

                //convert the company package id retrieved from the CheckCompanyPackageIsActive()
                JObject objResult = JObject.Parse(result);
                string companyPackageID = objResult.GetValue("CompanyPackageID").ToString();
                Guid CompanyPackageID;
                if (!Guid.TryParse(companyPackageID, out CompanyPackageID))
                {
                    Helper.LogMessage("Your company package could not be retrieved. Please contact the Surveya Administrator to resolve this issue.");
                    Helper.LogMessage("CheckCompanyPackageSignatures: CompanyPackageID is not in the correct format");
                    return Utils.WrapError("Your company package could not be retrieved. Please contact the Surveya Administrator to resolve this issue.");
                }

                string itemToCheck = objResult.GetValue("Signatures").ToString();
                bool ItemToCheck;
                if (!Boolean.TryParse(itemToCheck, out ItemToCheck))
                {
                    Helper.LogMessage("Your company package could not be retrieved. Please contact the Surveya Administrator to resolve this issue.");
                    Helper.LogMessage("CheckCompanyPackageSignatures: ItemToCheck is not in the correct format");
                    return Utils.WrapError("Your company package could not be retrieved. Please contact the Surveya Administrator to resolve this issue.");
                }

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    //check if Signatures is not allowed
                    if (!ItemToCheck)
                    {
                        return Utils.WrapError("Your current package does not allow you access to the Signatures feature. Please purchase another package to utilise the Signatures feature.");
                    }

                    dynamic returnItem = new JObject();
                    returnItem.Status = "Success";
                    return returnItem.ToString();
                }
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        private string CheckCompanyUniqueID(string companyID)
        {
            try
            {
                //remove any extra whitespaces
                companyID = TrimIfNotNull(companyID);

                //convert the company id received
                Guid CompanyID;
                if (!Guid.TryParse(companyID, out CompanyID))
                {
                    return Utils.WrapError("Company ID is not in the correct format");
                }

                //check that the company has a active package
                var result = CheckCompanyPackageIsActive(companyID);
                if (Utils.IsError(result))
                {
                    return result;
                }

                //convert the company package id retrieved from the CheckCompanyPackageIsActive()
                JObject objResult = JObject.Parse(result);
                string companyPackageID = objResult.GetValue("CompanyPackageID").ToString();
                Guid CompanyPackageID;
                if (!Guid.TryParse(companyPackageID, out CompanyPackageID))
                {
                    Helper.LogMessage("Your company package could not be retrieved. Please contact the Surveya Administrator to resolve this issue.");
                    Helper.LogMessage("CheckCompanyUniqueID: CompanyPackageID is not in the correct format");
                    return Utils.WrapError("Your company package could not be retrieved. Please contact the Surveya Administrator to resolve this issue.");
                }

                string itemToCheck = objResult.GetValue("UniqueID").ToString();
                bool ItemToCheck;
                if (!Boolean.TryParse(itemToCheck, out ItemToCheck))
                {
                    Helper.LogMessage("Your company package could not be retrieved. Please contact the Surveya Administrator to resolve this issue.");
                    Helper.LogMessage("CheckCompanyUniqueID: ItemToCheck is not in the correct format");
                    return Utils.WrapError("Your company package could not be retrieved. Please contact the Surveya Administrator to resolve this issue.");
                }

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    //check if UniqueID is not allowed
                    if (!ItemToCheck)
                    {
                        return Utils.WrapError("Your current package does not allow you access to the Unique ID feature. Please purchase another package to utilise the Unique ID feature.");
                    }

                    dynamic returnItem = new JObject();
                    returnItem.Status = "Success";
                    return returnItem.ToString();
                }
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        #endregion

        #region Document Manager

        private bool CreateDirectory(string path)
        {
            try
            {
                //create a directory for the company
                // Determine whether the directory exists.
                if (!Directory.Exists(path))
                {

                    // Try to create the directory.
                    DirectoryInfo di = Directory.CreateDirectory(path);
                    Console.WriteLine("The directory was created successfully for {1} at {0}.", Directory.GetCreationTime(path), path);

                    return true;
                }

                Console.WriteLine("The directory for {1} at {0} already exists.", Directory.GetCreationTime(path), path);
                return false;
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return false;
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return false;
            }
        }

        //recreate all the company folders for the specified company, only if the folders don't already exist
        public string RecreateCompanyDirectories(string secretKey, string companyID)
        {
            try
            {

                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                companyID = TrimIfNotNull(companyID);

                var username = CheckUserHasRight(secretKey, "RecreateCompanyDirectories");
                if (Utils.IsError(username))
                {
                    return username;
                }

                Guid CompanyID;
                if (!Guid.TryParse(companyID, out CompanyID))
                {
                    return Utils.WrapError("Company ID is not in the correct format");
                }

                //get the ID for the logged in user
                Guid LoggedInUserID = (Guid)Membership.GetUser(username).ProviderUserKey;

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {

                    //check if the company exists
                    var curCompany = (from c in entity.Companies
                                      where c.ID == CompanyID
                                      select c).FirstOrDefault();

                    if (curCompany == null)
                    {
                        return Utils.WrapError("The Company you are trying to recreate directories for cannot be found.");
                    }

                    //path on where to save the documents
                    string DocumentManagerPath = ConfigurationManager.AppSettings["DocumentManagerPath"].ToString();

                    #region Company and base sub folders

                    string CompanyPath = DocumentManagerPath + "\\" + CompanyID;

                    //create the directory 
                    if (CreateDirectory(CompanyPath))
                    {
                        //path on where to save the documents
                        string UsersPath = CompanyPath + "\\Users";

                        //create the directory 
                        CreateDirectory(UsersPath);

                        string ProjectsPath = CompanyPath + "\\Projects";

                        //create the directory 
                        CreateDirectory(ProjectsPath);
                    }


                    #endregion

                    #region Users / Team Members folders

                    //get all the user for the company and add their folders
                    var curCompanyUsers = (from cu in entity.CompanyUsers
                                           where cu.CompanyID == CompanyID
                                           select cu).ToList();

                    if (curCompanyUsers != null && curCompanyUsers.Count() > 0)
                    {

                        string UsersPath = "";

                        foreach (var user in curCompanyUsers)
                        {

                            UsersPath = DocumentManagerPath + "\\" + CompanyID + "\\Users\\" + user.UserID;

                            //create the directory 
                            CreateDirectory(UsersPath);
                        }

                    }

                    #endregion

                    #region Project and base sub folders

                    //get all the projects for the company
                    var curProjects = (from p in entity.Projects
                                       where p.ProjectCompany == CompanyID
                                       select p).ToList();

                    if (curProjects != null && curProjects.Count() > 0)
                    {
                        string ProjectsPath = "";
                        string ProjectsMiscPath = "";
                        string ProjectsSurveysPath = "";
                        string ProjectsUsersPath = "";

                        foreach (var project in curProjects)
                        {

                            ProjectsPath = DocumentManagerPath + "\\" + CompanyID + "\\Projects\\" + project.ID;

                            //create the directory 
                            if (CreateDirectory(ProjectsPath))
                            {
                                ProjectsMiscPath = ProjectsPath + "\\ProjectDocs";

                                //create the directory 
                                CreateDirectory(ProjectsMiscPath);

                                ProjectsSurveysPath = ProjectsPath + "\\Surveys";

                                //create the directory 
                                CreateDirectory(ProjectsSurveysPath);

                                ProjectsUsersPath = ProjectsPath + "\\Users";

                                //create the directory 
                                CreateDirectory(ProjectsUsersPath);

                            }
                        }
                    }

                    #endregion

                    #region Project Team / Project Users folders

                    //get the current members of the projects for the company
                    var curProjectsTeams = (from p in entity.Projects
                                            join pt in entity.ProjectTeams
                                                on p.ID equals pt.ProjectID
                                            where p.ProjectCompany == CompanyID
                                            select new
                                            {
                                                ProjectID = p.ID,
                                                UserID = pt.UserID
                                            }).ToList();


                    if (curProjectsTeams != null && curProjectsTeams.Count() > 0)
                    {

                        //path on where to save the documents
                        string ProjectsUsersPath = "";
                        foreach (var projectTeam in curProjectsTeams)
                        {
                            //path on where to save the documents
                            ProjectsUsersPath = DocumentManagerPath + "\\" + CompanyID + "\\Projects\\" + projectTeam.ProjectID + "\\Users\\" + projectTeam.UserID;

                            //create the directory 
                            CreateDirectory(ProjectsUsersPath);
                        }
                    }

                    #endregion


                    #region Add Survey

                    //get the surveys for the company
                    var curProjectSurveys = (from p in entity.Projects
                                             join s in entity.Surveys
                                             on p.ID equals s.ProjectID
                                             where p.ProjectCompany == CompanyID
                                             select new
                                             {
                                                 ProjectID = p.ID,
                                                 SurveyID = s.ID
                                             }).ToList();

                    if (curProjectSurveys != null && curProjectSurveys.Count() > 0)
                    {

                        //path on where to save the documents
                        string ProjectsSurveysPath = "";
                        string ProjectsSurveysMiscPath = "";
                        //string ProjectsSurveysResponsesPath = "";

                        foreach (var survey in curProjectSurveys)
                        {
                            //path on where to save the documents
                            ProjectsSurveysPath = DocumentManagerPath + "\\" + CompanyID + "\\Projects\\" + survey.ProjectID + "\\Surveys\\" + survey.SurveyID;

                            //create the directory 
                            if (CreateDirectory(ProjectsSurveysPath))
                            {
                                ProjectsSurveysMiscPath = ProjectsSurveysPath + "\\SurveyDocs";

                                //create the directory
                                CreateDirectory(ProjectsSurveysMiscPath);

                                /*ProjectsSurveysResponsesPath = ProjectsSurveysPath + "\\Responses";

                                //create the directory
                                CreateDirectory(ProjectsSurveysResponsesPath);*/
                            }

                        }

                    }

                    #endregion



                    /* #region UploadResponses

                    //get any responses for the surveys for the company
                    var curResponses = (from p in entity.Projects
                                        join s in entity.Surveys
                                        on p.ID equals s.ProjectID
                                        join r in entity.Responses
                                        on s.ID equals r.SurveyID
                                        where p.ProjectCompany == CompanyID
                                        select new
                                        {
                                            ProjectID = p.ID,
                                            SurveyID = s.ID,
                                            ResponseID = r.ID
                                        }).ToList();

                    if (curResponses != null && curResponses.Count() > 0)
                    {

                        //path on where to save the documents
                        string ProjectsSurveysResponsesPath = "";

                        foreach (var response in curResponses)
                        {
                            //path on where to save the documents
                            ProjectsSurveysResponsesPath = DocumentManagerPath + "\\" + CompanyID + "\\Projects\\" + response.ProjectID + "\\Surveys\\" + response.SurveyID + "\\Responses\\" + response.ResponseID;

                            //create the directory 
                            CreateDirectory(ProjectsSurveysResponsesPath);
                        }

                    }

                    #endregion*/

                    dynamic returnItem = new JObject();
                    returnItem.Status = "Success";
                    returnItem.CompanyID = CompanyID;
                    return returnItem.ToString();
                }

            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        #endregion

        #region Web Application Normal User Methods

        #region Features

        public string GetAllFeatures()
        {
            try
            {
                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    var curFeatures = (from f in entity.Features
                                       orderby f.FriendlyName
                                       select new
                                       {
                                           f.ID,
                                           f.FriendlyName,
                                           f.Name,
                                           f.Description
                                       }).ToList();

                    if (curFeatures == null || curFeatures.Count <= 0)
                    {
                        return "[]";
                    }
                    return Helper.SerializeToJavascriptOject(curFeatures);
                }

            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        #endregion

        #region Packages and Features

        //view all the available packages
        public string GetAllPackages(string isActive)
        {
            try
            {
                Boolean IsActive;
                if (!Boolean.TryParse(isActive, out IsActive))
                {
                    return Utils.WrapError("Is Active is not in the correct format");
                }

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    var curPackage = (from p in entity.Packages
                                      where p.IsActive == IsActive
                                      orderby p.Price, p.PackageName
                                      select new
                                      {
                                          p.ID,
                                          p.NumberOfSurveys,
                                          p.NumberOfQuestions,
                                          p.NumberOfUsers,
                                          p.NumberOfResponses,
                                          p.PackageName,
                                          p.IsActive,
                                          p.DateCreated,
                                          p.Price,
                                          p.Description,
                                          p.NumberOfProjects,
                                          features =
                                          (from f in entity.Features
                                           join pf in entity.PackageFeatures
                                               on f.ID equals pf.FeatureID
                                           where pf.PackageID == p.ID
                                           select new
                                           {
                                               f.ID,
                                               f.Name,
                                               f.FriendlyName,
                                               f.Description,
                                               pf.OptionalFeature,
                                               OptionalPrice = pf.OptionalPrice.HasValue ? pf.OptionalPrice.Value : 0
                                           }).ToList()
                                      }).ToList();

                    if (curPackage == null || curPackage.Count <= 0)
                    {
                        return "[]";
                    }
                    return Helper.SerializeToJavascriptOject(curPackage);
                }

            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        //view specific details of the available package
        public string GetSpecificPackage(string secretKey, string packageID)
        {
            try
            {
                Guid PackageID;
                if (!Guid.TryParse(packageID, out PackageID))
                {
                    return Utils.WrapError("Package ID is not in the correct format");
                }

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    var curPackage = (from p in entity.Packages
                                      where p.ID == PackageID
                                      select new
                                      {
                                          p.ID,
                                          p.NumberOfSurveys,
                                          p.NumberOfQuestions,
                                          p.NumberOfUsers,
                                          p.NumberOfResponses,
                                          p.PackageName,
                                          p.IsActive,
                                          p.DateCreated,
                                          p.Price,
                                          p.Description,
                                          p.NumberOfProjects,
                                          features =
                                          (from f in entity.Features
                                           join pf in entity.PackageFeatures
                                               on f.ID equals pf.FeatureID
                                           where pf.PackageID == p.ID
                                           select new
                                           {
                                               f.ID,
                                               f.Name,
                                               f.FriendlyName,
                                               f.Description,
                                               pf.OptionalFeature,
                                               OptionalPrice = pf.OptionalPrice.HasValue ? pf.OptionalPrice.Value : 0
                                           }).ToList()
                                      }).FirstOrDefault();

                    if (curPackage == null)
                    {
                        return Utils.WrapError("The package you are trying to view could not be found");
                    }
                    return Helper.SerializeToJavascriptOject(curPackage);
                }

            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        //user can view the details of a specific package
        public string GetMyPackage(string secretKey, string companyPackageID)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                companyPackageID = TrimIfNotNull(companyPackageID);

                var username = CheckUserHasRight(secretKey, "GetMyPackage");
                if (Utils.IsError(username))
                {
                    return username;
                }

                Guid CompanyPackageID;
                if (!Guid.TryParse(companyPackageID, out CompanyPackageID))
                {
                    return Utils.WrapError("Package ID is not in the correct format");
                }

                #region Check if the logged in user is assuming a company

                //check if the user is assuming a company
                var assumeResult = CheckAssumeCompany(secretKey);
                if (Utils.IsError(assumeResult))
                {
                    return assumeResult;
                }

                //parse the company ID to a Guid
                Guid CompanyID = Guid.Empty;
                if (!Guid.TryParse(assumeResult, out CompanyID))
                {
                    return Utils.WrapError("The ID of the Company that you are trying to view is in the incorrect format");
                }

                #endregion

                Guid LoggedInUser = (Guid)Membership.GetUser(username).ProviderUserKey;

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {

                    /* var curCompany = (from c in entity.Companies
                                       join cu in entity.CompanyUsers
                                       on c.ID equals cu.CompanyID
                                       where cu.UserID == LoggedInUser
                                       select c).FirstOrDefault();

                     if (curCompany == null)
                     {
                         return Utils.WrapError("The user is not assigned to a company");
                     }*/

                    var curPackage = (from p in entity.CompanyPackages
                                      where p.ID == CompanyPackageID && p.CompanyID == CompanyID
                                      select new
                                      {
                                          p.ID,
                                          p.DateSignedUp,
                                          p.DateStart,
                                          p.PaymentType,
                                          p.Price,
                                          p.DateExpires,
                                          p.NumberMonthsSignedUpFor,
                                          p.IsActive,
                                          p.IsCompleted,
                                          p.NumberOfSurveys,
                                          p.NumberOfQuestions,
                                          p.NumberOfUsers,
                                          p.NumberOfResponses,
                                          p.PackageName,
                                          p.Description,
                                          p.NumberOfProjects,
                                          p.BasicReporting,
                                          p.AdvancedReporting,
                                          p.Excel,
                                          p.PDF,
                                          p.CSV,
                                          p.Piping,
                                          p.Summing,
                                          p.WhiteLabelling,
                                          p.PhotoCamera,
                                          p.GeoServices,
                                          p.Signatures,
                                          p.UniqueID,
                                          p.HasDiscount.Value,
                                          DiscountDescription = p.DiscountDescription == null ? "" : p.DiscountDescription,
                                          DiscountPercentage = p.DiscountPercentage == null ? 0 : p.DiscountPercentage.Value,
                                          DiscountValue = p.DiscountValue == null ? 0 : p.DiscountValue.Value,
                                          p.PackageStartingPrice,
                                          p.OptionalFeaturesPrice,
                                          p.PurchaseOrderNumber
                                      }).FirstOrDefault();

                    if (curPackage == null)
                    {
                        return Utils.WrapError("The package you are trying to view cannot be found");
                    }

                    return Helper.SerializeToJavascriptOject(curPackage);
                }

            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        //user can remove a specific package
        public string RemoveMyPackage(string secretKey, string companyPackageID)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                companyPackageID = TrimIfNotNull(companyPackageID);

                var username = CheckUserHasRight(secretKey, "GetMyPackage");
                if (Utils.IsError(username))
                {
                    return username;
                }

                Guid CompanyPackageID;
                if (!Guid.TryParse(companyPackageID, out CompanyPackageID))
                {
                    return Utils.WrapError("Package ID is not in the correct format");
                }

                #region Check if the logged in user is assuming a company

                //check if the user is assuming a company
                var assumeResult = CheckAssumeCompany(secretKey);
                if (Utils.IsError(assumeResult))
                {
                    return assumeResult;
                }

                //parse the company ID to a Guid
                Guid CompanyID = Guid.Empty;
                if (!Guid.TryParse(assumeResult, out CompanyID))
                {
                    return Utils.WrapError("The ID of the Company that you are trying to view is in the incorrect format");
                }

                #endregion

                Guid LoggedInUser = (Guid)Membership.GetUser(username).ProviderUserKey;

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {

                    /*var curCompany = (from c in entity.Companies
                                      join cu in entity.CompanyUsers
                                      on c.ID equals cu.CompanyID
                                      where cu.UserID == LoggedInUser
                                      select c).FirstOrDefault();

                    if (curCompany == null)
                    {
                        return Utils.WrapError("The user is not assigned to a company");
                    }*/

                    var curPackage = (from p in entity.CompanyPackages
                                      where p.ID == CompanyPackageID && p.CompanyID == CompanyID
                                      select p).FirstOrDefault();

                    if (curPackage == null)
                    {
                        return Utils.WrapError("The package you are trying to remove cannot be found");
                    }

                    if (curPackage.IsActive)
                    {
                        return Utils.WrapError("You cannot remove this package as it is active");
                    }

                    if (curPackage.DateActivated.HasValue)
                    {
                        return Utils.WrapError("You cannot remove this package as it has been activated");
                    }

                    var checkInvoices = (from i in entity.Invoices
                                         where i.CompanyPackageID == CompanyPackageID && i.CompanyID == CompanyID
                                         select i).FirstOrDefault();

                    if (checkInvoices != null)
                    {
                        return Utils.WrapError("You cannot remove this package as a invoice has already been generated for it");
                    }

                    DateTime CurDate = DateTime.Now;

                    //deactivate the package
                    curPackage.DateDeactivated = CurDate;
                    curPackage.IsActive = false;
                    curPackage.DateUpdated = CurDate;
                    curPackage.DeactivatedBy = LoggedInUser;
                    entity.CompanyPackages.Add(curPackage);
                    entity.Entry(curPackage).State = EntityState.Modified;

                    //get the cart for the package
                    var curCart = (from c in entity.CompanyCarts
                                   where c.CompanyPackageID == CompanyPackageID
                                   select c).ToList();

                    if (curCart != null && curCart.Count > 0)
                    {
                        entity.CompanyCarts.RemoveRange(curCart);
                        //entity.Entry(curCart).State = EntityState.Deleted;
                    }

                    entity.SaveChanges();

                    dynamic returnItem = new JObject();
                    returnItem.Status = "Success";
                    return returnItem.ToString();
                }

            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        //user can deactivate a specific package
        public string DeactivateMyPackage(string secretKey, string companyPackageID)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                companyPackageID = TrimIfNotNull(companyPackageID);

                var username = CheckUserHasRight(secretKey, "GetMyPackage");
                if (Utils.IsError(username))
                {
                    return username;
                }

                Guid CompanyPackageID;
                if (!Guid.TryParse(companyPackageID, out CompanyPackageID))
                {
                    return Utils.WrapError("Package ID is not in the correct format");
                }

                #region Check if the logged in user is assuming a company

                //check if the user is assuming a company
                var assumeResult = CheckAssumeCompany(secretKey);
                if (Utils.IsError(assumeResult))
                {
                    return assumeResult;
                }

                //parse the company ID to a Guid
                Guid CompanyID = Guid.Empty;
                if (!Guid.TryParse(assumeResult, out CompanyID))
                {
                    return Utils.WrapError("The ID of the Company that you are trying to view is in the incorrect format");
                }

                #endregion

                Guid LoggedInUser = (Guid)Membership.GetUser(username).ProviderUserKey;

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {

                    var curPackage = (from p in entity.CompanyPackages
                                      where p.ID == CompanyPackageID && p.CompanyID == CompanyID
                                      select p).FirstOrDefault();

                    if (curPackage == null)
                    {
                        return Utils.WrapError("The package you are trying to deactivate cannot be found");
                    }

                    if (!curPackage.IsActive)
                    {
                        return Utils.WrapError("You cannot deactivate this package as it is not currently active");
                    }

                    if (!curPackage.DateActivated.HasValue)
                    {
                        return Utils.WrapError("You cannot deactivate this package as it is not currently active");
                    }

                    DateTime CurDate = DateTime.Now;

                    //deactivate the package
                    curPackage.DateDeactivated = CurDate;
                    curPackage.IsActive = false;
                    curPackage.DateUpdated = CurDate;
                    curPackage.DeactivatedBy = LoggedInUser;
                    entity.CompanyPackages.Add(curPackage);
                    entity.Entry(curPackage).State = EntityState.Modified;

                    //get the cart for the package
                    var curCart = (from c in entity.CompanyCarts
                                   where c.CompanyPackageID == CompanyPackageID
                                   select c).ToList();

                    if (curCart != null && curCart.Count > 0)
                    {
                        entity.CompanyCarts.RemoveRange(curCart);
                    }

                    entity.SaveChanges();

                    dynamic returnItem = new JObject();
                    returnItem.Status = "Success";
                    return returnItem.ToString();
                }

            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }
        public string GetMyPackageHistory(string secretKey)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);

                var username = CheckUserHasRight(secretKey, "GetMyPackage");
                if (Utils.IsError(username))
                {
                    return username;
                }

                #region Check if the logged in user is assuming a company

                //check if the user is assuming a company
                var assumeResult = CheckAssumeCompany(secretKey);
                if (Utils.IsError(assumeResult))
                {
                    return assumeResult;
                }

                //parse the company ID to a Guid
                Guid CompanyID = Guid.Empty;
                if (!Guid.TryParse(assumeResult, out CompanyID))
                {
                    return Utils.WrapError("The ID of the Company that you are trying to view is in the incorrect format");
                }

                #endregion

                Guid LoggedInUser = (Guid)Membership.GetUser(username).ProviderUserKey;

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {

                    /*var curCompany = (from c in entity.Companies
                                      join cu in entity.CompanyUsers
                                      on c.ID equals cu.CompanyID
                                      where cu.UserID == LoggedInUser
                                      select c).FirstOrDefault();

                    if (curCompany == null)
                    {
                        return Utils.WrapError("The user is not assigned to a company");
                    }*/

                    //get the payments
                    /* var curPayments = (from p in entity.PaymentHistories
                                        where p.InvoiceID == curInvoices.ID && p.PaymentStatus == "Payment Successful"
                                        select p).ToList();

                     //if there are payments change the status
                     if (curPayments != null || curPayments.Count() > 0)
                     {
                         paymentStatus = "Partial Payments made";
                     }*/

                    //get the paid packages for the company
                    var curPaidPackages = entity.GetPaidPackagesForCompany(CompanyID).ToList();

                    //get all the non paid packages
                    var curNonPaidPackages = entity.GetNonPaidPackagesForCompany(CompanyID).ToList();

                    dynamic returnItem = new JObject();
                    returnItem.PaidPackages = Helper.SerializeToJavascriptOject(curPaidPackages);
                    returnItem.NonPaidPackages = Helper.SerializeToJavascriptOject(curNonPaidPackages);
                    return returnItem.ToString();
                }

            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                if (ex.InnerException != null)
                {
                    Helper.LogError("Inner Exception ", ex.InnerException.ToString());
                }
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                if (ee.InnerException != null)
                {
                    Helper.LogError("Inner Exception ", ee.InnerException.ToString());
                }
                return Utils.WrapError(ee.Message);
            }
        }

        //features = JArray(id)
        //check the selected features to ensure that they are valid for the selected package
        private PackageFeaturesResult CheckPackageFeatures(string features, string packageID)
        {
            PackageFeaturesResult pfResult = new PackageFeaturesResult();

            try
            {
                features = TrimIfNotNull(features);
                packageID = TrimIfNotNull(packageID);

                Guid PackageID;
                if (!Guid.TryParse(packageID, out PackageID))
                {
                    pfResult.IsError = true;
                    pfResult.ErrorMessage = "Package ID is not in the correct format";
                    return pfResult;
                }

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {

                    //validate the package
                    var curPackage = (from p in entity.Packages
                                      where p.ID == PackageID
                                      select p).FirstOrDefault();

                    if (curPackage == null)
                    {

                        pfResult.IsError = true;
                        pfResult.ErrorMessage = "The package you are trying to select does not exist";
                        return pfResult;
                    }

                    if (!curPackage.IsActive.HasValue || (curPackage.IsActive.HasValue && !curPackage.IsActive.Value))
                    {
                        pfResult.IsError = true;
                        pfResult.ErrorMessage = "You cannot signup for this package as it is no longer available";
                        return pfResult;
                    }

                    //store the optional features 
                    ArrayList OptionalFeaturesToAdd = new ArrayList();

                    //store the mandatory features 
                    ArrayList MandatoryFeaturesToAdd = new ArrayList();

                    decimal OptionalFeaturesPrice = 0;

                    //check if there are additional features that the user selected
                    JArray SelectedFeatures = JArray.Parse(features);
                    if (SelectedFeatures != null && SelectedFeatures.Count() > 0)
                    {
                        //get all the features for the package selected
                        var allFeatures = (from f in entity.Features
                                           join pf in entity.PackageFeatures
                                           on f.ID equals pf.FeatureID
                                           where pf.PackageID == PackageID
                                           select new
                                           {
                                               f.ID,
                                               f.Name,
                                               f.FriendlyName,
                                               pf.OptionalPrice,
                                               pf.OptionalFeature
                                           }).ToList();

                        //store the feature id's that are allowed
                        Guid[] AllowedFeatureIDs = new Guid[allFeatures.Count];
                        for (int i = 0; i < allFeatures.Count(); i++)
                        {
                            var curFeature = allFeatures[i];
                            AllowedFeatureIDs[i] = curFeature.ID;
                        }

                        //if there are no features that are allowed for the package
                        if (allFeatures == null && allFeatures.Count <= 0)
                        {
                            //if the user has selected features
                            if (SelectedFeatures.Count > 0)
                            {

                                pfResult.IsError = true;
                                pfResult.ErrorMessage = "You cannot select any optional features for this package";
                                return pfResult;
                            }
                        }

                        ArrayList SelectedFeaturesList = new ArrayList();
                        //cycle through all the features that the user selected
                        foreach (JObject curFeature in SelectedFeatures)
                        {
                            Guid SelectedFeatureID;
                            if (!Guid.TryParse(curFeature.GetValue("id").ToString(), out SelectedFeatureID))
                            {
                                pfResult.IsError = true;
                                pfResult.ErrorMessage = "Feature ID is not in the correct format";
                                return pfResult;
                            }

                            //if the feature that the user selected is not an allowed feature
                            if (!AllowedFeatureIDs.Contains(SelectedFeatureID))
                            {
                                pfResult.IsError = true;
                                pfResult.ErrorMessage = "You cannot select this feature as it is not part of this package";
                                return pfResult;
                            }

                            SelectedFeaturesList.Add(SelectedFeatureID);
                        }

                        //if there are optional features for the package
                        if (allFeatures != null && allFeatures.Count > 0)
                        {

                            //cycle through the features that are allowed to be selected
                            foreach (var curFeature in allFeatures)
                            {
                                //if the user selected a feature that is allowed
                                if (SelectedFeaturesList.Contains(curFeature.ID))
                                {
                                    //if the feature is an optional feature
                                    if (curFeature.OptionalFeature)
                                    {
                                        //if the optional feature is not already saved
                                        if (!OptionalFeaturesToAdd.Contains(curFeature.ID))
                                        {
                                            //add the feature price to the total price
                                            OptionalFeaturesPrice += curFeature.OptionalPrice.Value;
                                            //add the feature
                                            OptionalFeaturesToAdd.Add(curFeature.ID);
                                        }
                                    }
                                    else
                                    {
                                        MandatoryFeaturesToAdd.Add(curFeature.ID);
                                    }
                                }
                            }
                        }
                    }

                    pfResult.IsError = false;
                    pfResult.OptionalFeatures = OptionalFeaturesToAdd;
                    pfResult.MandatoryFeatures = MandatoryFeaturesToAdd;
                    pfResult.OptionalFeaturesPrice = OptionalFeaturesPrice;
                    return pfResult;

                }
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                pfResult.IsError = true;
                pfResult.ErrorMessage = errors;
                return pfResult;
            }
            catch (Exception ee)
            {
                if (ee.InnerException != null)
                {
                    Helper.LogError("Inner exception", ee.InnerException.ToString());
                }
                Helper.LogError(ee.Message, ee.StackTrace);
                pfResult.IsError = true;
                pfResult.ErrorMessage = ee.Message;
                return pfResult;
            }

        }

        //check if the number of months selected qualifies for discount
        public string GetDiscounts(string numberOfMonths)
        {
            try
            {
                Int32 NumberOfMonths;
                if (!Int32.TryParse(numberOfMonths, out NumberOfMonths))
                {
                    return Utils.WrapError("Number of months is not in the correct format");
                }

                //variables to store discount values
                bool HasDiscount = false;
                decimal DiscountPerc = 0;
                string DiscountDescription = "";

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    //check if qualify for 12 months discount
                    if (NumberOfMonths == 12)
                    {
                        //get the setting
                        var curDiscSetting = (from s in entity.GlobalSettings
                                              where s.SettingName == "Discount12MonthsSignup"
                                              select s).FirstOrDefault();

                        if (curDiscSetting != null)
                        {
                            //specify that there is a discount
                            HasDiscount = true;
                            DiscountDescription = "12 Months Discount";

                            //if you cannot parse the discount setting, save it as 0
                            if (!Decimal.TryParse(curDiscSetting.SettingValue, out DiscountPerc))
                            {
                                DiscountPerc = 0;
                                HasDiscount = false;
                            }
                        }
                    }
                    //if qualify for 6 months discount
                    else if (NumberOfMonths == 6)
                    {
                        //get the setting
                        var curDiscSetting = (from s in entity.GlobalSettings
                                              where s.SettingName == "Discount6MonthsSignup"
                                              select s).FirstOrDefault();

                        if (curDiscSetting != null)
                        {
                            //specify that there is a discount
                            HasDiscount = true;
                            DiscountDescription = "6 Months Discount";

                            //if you cannot parse the discount setting, save it as 0
                            if (!Decimal.TryParse(curDiscSetting.SettingValue, out DiscountPerc))
                            {
                                DiscountPerc = 0;
                                HasDiscount = false;
                            }
                        }
                    }

                    dynamic returnItem = new JObject();
                    returnItem.HasDiscount = HasDiscount;
                    returnItem.DiscountPerc = DiscountPerc;
                    returnItem.DiscountDescription = DiscountDescription;
                    returnItem.NumberOfMonths = NumberOfMonths;
                    return returnItem.ToString();
                }
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                if (ee.InnerException != null)
                {
                    Helper.LogError("Inner exception", ee.InnerException.ToString());
                }
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }

        }

        #endregion

        #region Package Signups

        //features = JArray(id)
        //a new user and company signups for a new package
        public string NewUserSignup(
            //user details 
            string firstname, string lastname, string contactNumber, string emailAddress, string password, string physicalAddress, string postalCode, string city, string country,
            //company details
            string companyName, string registrationNumber, string isVatRegistered, string vatNumber, string companyPhysicalAddress, string companyPostalCode, string companyCity, string companyCountry, string billEmail, string alternateBillEmail,
            //package details
            string packageID, string features, string numOfMonths, string purchaseOrderNumber)
        {
            try
            {
                //remove any extra whitespaces
                firstname = TrimIfNotNull(firstname);
                lastname = TrimIfNotNull(lastname);
                contactNumber = TrimIfNotNull(contactNumber);
                emailAddress = TrimIfNotNull(emailAddress);
                password = TrimIfNotNull(password);
                physicalAddress = TrimIfNotNull(physicalAddress);
                country = TrimIfNotNull(country);
                companyName = TrimIfNotNull(companyName);
                registrationNumber = TrimIfNotNull(registrationNumber);
                isVatRegistered = TrimIfNotNull(isVatRegistered);
                vatNumber = TrimIfNotNull(vatNumber);
                companyPhysicalAddress = TrimIfNotNull(companyPhysicalAddress);
                companyPostalCode = TrimIfNotNull(companyPostalCode);
                companyCity = TrimIfNotNull(companyCity);
                companyCountry = TrimIfNotNull(companyCountry);
                alternateBillEmail = TrimIfNotNull(alternateBillEmail);
                billEmail = TrimIfNotNull(billEmail);
                postalCode = TrimIfNotNull(postalCode);
                city = TrimIfNotNull(city);
                packageID = TrimIfNotNull(packageID);
                features = TrimIfNotNull(features);
                numOfMonths = TrimIfNotNull(numOfMonths);
                purchaseOrderNumber = TrimIfNotNull(purchaseOrderNumber);

                Guid PackageID;
                if (!Guid.TryParse(packageID, out PackageID))
                {
                    return Utils.WrapError("Package ID was not in the correct format");
                }

                Int32 NumberOfMonths = 1;
                if (!Int32.TryParse(numOfMonths, out NumberOfMonths))
                {
                    return Utils.WrapError("Number of months is not in the correct format");

                }

                //validate the user
                var validUser = ValidateUserSignUp(firstname, lastname, contactNumber, emailAddress, password, physicalAddress, postalCode, city, country);
                if (Utils.IsError(validUser))
                {
                    return validUser;
                }

                //validate the company
                var validCompany = ValidateCompanySignUp(companyName, registrationNumber, isVatRegistered, vatNumber, billEmail, alternateBillEmail, companyPhysicalAddress, companyPostalCode, companyCity, companyCountry, purchaseOrderNumber);
                if (Utils.IsError(validCompany))
                {
                    return validCompany;
                }

                //check the received features list and split into mandatory and optional features
                PackageFeaturesResult featuresResult = CheckPackageFeatures(features, packageID);
                if (featuresResult.IsError)
                {
                    return Utils.WrapError(featuresResult.ErrorMessage);
                }

                //check if there are any discounts available
                DiscountResult discountsResult = CheckForDiscounts(numOfMonths);
                if (discountsResult.IsError)
                {
                    return Utils.WrapError(discountsResult.ErrorMessage);
                }

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    //validate the package
                    var curPackage = (from p in entity.Packages
                                      where p.ID == PackageID
                                      select p).FirstOrDefault();
                    if (curPackage == null)
                    {
                        return Utils.WrapError("The package you are trying to select does not exist");
                    }
                    if (!curPackage.IsActive.HasValue || (curPackage.IsActive.HasValue && !curPackage.IsActive.Value))
                    {
                        return Utils.WrapError("You cannot signup for this package as it is no longer available");
                    }

                    //create a new user
                    MembershipUser newMembershipUser = Membership.CreateUser(emailAddress, password, emailAddress);

                    //get the user's id
                    Guid TheUserID = (Guid)newMembershipUser.ProviderUserKey;

                    DateTime CurDate = DateTime.Now;
                    DateTime StartDate = DateTime.Today;

                    dynamic returnItem = new JObject();

                    //update the users details
                    var curUser = (from m in entity.aspnet_Membership
                                   where m.UserId == TheUserID
                                   select m).FirstOrDefault();

                    if (curUser != null)
                    {
                        curUser.Firstnames = firstname;
                        curUser.Lastname = lastname;
                        curUser.ContactNumber = contactNumber;
                        curUser.Email = emailAddress;
                        curUser.LoweredEmail = emailAddress.ToLower();
                        curUser.PhysicalAddress = physicalAddress;
                        curUser.Country = country;
                        curUser.IsApproved = true;
                        curUser.IsLockedOut = false;
                        curUser.city = city;
                        curUser.postalCode = postalCode;
                        curUser.IsActive = true;
                        curUser.DateActivated = CurDate;
                        entity.Entry(curUser).State = EntityState.Modified;
                        entity.SaveChanges();
                        returnItem.Status = "Success";
                    }
                    else
                    {

                        returnItem.Status = "User was registered, but the profile details were not saved.";
                    }

                    //create a new company
                    Guid CompanyID = Guid.NewGuid();
                    var newCompany = new Company();
                    newCompany.ID = CompanyID;
                    newCompany.CompanyName = companyName;
                    newCompany.RegistrationNumber = registrationNumber;
                    newCompany.VatNumber = vatNumber;
                    newCompany.PhysicalAddress = companyPhysicalAddress;
                    newCompany.IsActive = true;
                    newCompany.DateCreated = CurDate;
                    newCompany.CreatedBy = TheUserID;
                    newCompany.postalCode = companyPostalCode;
                    newCompany.city = companyCity;
                    newCompany.country = companyCountry;
                    newCompany.billEmail = billEmail;
                    newCompany.alternateBillEmail = alternateBillEmail;
                    entity.Companies.Add(newCompany);

                    //assign the user to the company
                    var newCompanyUser = new CompanyUser();
                    newCompanyUser.ID = Guid.NewGuid();
                    newCompanyUser.CompanyID = CompanyID;
                    newCompanyUser.UserID = TheUserID;
                    newCompanyUser.RoleID = CompanyOwnerRoleID;
                    entity.CompanyUsers.Add(newCompanyUser);

                    entity.SaveChanges();

                    //add the package to the newly signed up user and company
                    SignupPackageResult signupResult = AddSignupPackage(packageID, NumberOfMonths + "", StartDate + "", CompanyID + "", featuresResult, discountsResult, purchaseOrderNumber);
                    if (signupResult.IsError)
                    {
                        return Utils.WrapError(signupResult.ErrorMessage);
                    }

                    //add a new request for the email to be verified
                    var newVerifyRequest = new VerifyEmailRequest();
                    Guid RequestID = Guid.NewGuid();
                    newVerifyRequest.ID = RequestID;
                    newVerifyRequest.DateRequested = DateTime.Now;
                    newVerifyRequest.UserID = TheUserID;
                    newVerifyRequest.IsDeleted = false;
                    entity.VerifyEmailRequests.Add(newVerifyRequest);

                    entity.SaveChanges();

                    //generate a secret key for the new user
                    string secretKey = GenerateSecretKey(emailAddress, password);

                    //send a email to the user
                    SendEmail(EmailPurpose.NewUserSignUp, emailAddress, CompanyID + "", "", "", password, "", CompanyOwnerRoleID + "", "Company Owner", RequestID + "");

                    //send a email to surveya
                    string surveyaEmail = ConfigurationManager.AppSettings["SurveyaSignupEmailAddress"] == null ? "" : ConfigurationManager.AppSettings["SurveyaSignupEmailAddress"] + "";
                    if (!string.IsNullOrWhiteSpace(surveyaEmail))
                    {
                        string user = string.IsNullOrWhiteSpace(curUser.Firstnames) ? "" : curUser.Firstnames;
                        user += string.IsNullOrWhiteSpace(curUser.Lastname) ? "" : " " + curUser.Lastname;
                        user += string.IsNullOrWhiteSpace(curUser.Email) ? "" : " (" + curUser.Email + ")";

                        SendEmail(EmailPurpose.NewUserSignUpSurveya, surveyaEmail, CompanyID + "", "", user, "", "", "", "", "");
                    }

                    //if it is a free package, generate an invoice and activate the package
                    if (signupResult.FinalPrice <= 0)
                    {
                        //string secretKey = GenerateSecretKey(emailAddress, password);

                        string invResult = GenerateInvoice(secretKey, signupResult.CompanyPackageID + "", NumberOfMonths + "");
                        if (Utils.IsError(invResult))
                        {
                            return invResult;
                        }

                        string purResult = CompletePurchase(secretKey, signupResult.CompanyPackageID + "", CurDate + "", "CC");
                        if (Utils.IsError(purResult))
                        {
                            return purResult;
                        }
                    }

                    #region Document Manager

                    //path on where to save the documents
                    string DocumentManagerPath = ConfigurationManager.AppSettings["DocumentManagerPath"].ToString();
                    string CompanyPath = DocumentManagerPath + "\\" + CompanyID;

                    //create the directory 
                    if (CreateDirectory(CompanyPath))
                    {
                        //path on where to save the documents
                        string UsersPath = CompanyPath + "\\Users";

                        //create the directory 
                        CreateDirectory(UsersPath);

                        //path on where to save the documents
                        string UsersOwnPath = CompanyPath + "\\Users\\" + TheUserID;

                        //create the directory 
                        CreateDirectory(UsersOwnPath);

                        string ProjectsPath = CompanyPath + "\\Projects";

                        //create the directory 
                        CreateDirectory(ProjectsPath);
                    }

                    #endregion

                    CreateDefaultProject(secretKey, TheUserID, CompanyID);

                    returnItem.IsCompleted = signupResult.IsComplete;
                    return returnItem.ToString();
                }
            }
            catch (DbEntityValidationException ex)
            {
                Helper.LogError("ex to string ", ex.ToString());
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        //validate the user that signing up 
        public string ValidateUserSignUp(string firstname, string lastname, string contactNumber, string emailAddress, string password, string physicalAddress, string postalCode, string city, string country)
        {
            try
            {
                //remove any extra whitespaces
                firstname = TrimIfNotNull(firstname);
                lastname = TrimIfNotNull(lastname);
                contactNumber = TrimIfNotNull(contactNumber);
                emailAddress = TrimIfNotNull(emailAddress);
                password = TrimIfNotNull(password);
                physicalAddress = TrimIfNotNull(physicalAddress);
                postalCode = TrimIfNotNull(postalCode);
                city = TrimIfNotNull(city);
                country = TrimIfNotNull(country);

                if (string.IsNullOrWhiteSpace(firstname))
                {
                    return Utils.WrapError("Please ensure that you enter your firstname");
                }
                if (string.IsNullOrWhiteSpace(lastname))
                {
                    return Utils.WrapError("Please ensure that you enter your lastname");
                }
                if (string.IsNullOrWhiteSpace(emailAddress))
                {
                    return Utils.WrapError("Please ensure that you enter your email address");
                }
                if (string.IsNullOrWhiteSpace(password))
                {
                    return Utils.WrapError("Please ensure that you enter your password");
                }

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {

                    var checkEmail = (from m in entity.aspnet_Membership
                                      where m.LoweredEmail == emailAddress.ToLower()
                                      select m).FirstOrDefault();

                    if (checkEmail != null)
                    {
                        return Utils.WrapError("The specified email address is already registered. Please ensure that you enter your email address");
                    }

                    dynamic returnItem = new JObject();
                    returnItem.Status = "Success";
                    return returnItem.ToString();

                }
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        //validate the company that is signing up
        public string ValidateCompanySignUp(string companyName, string registrationNumber, string isVatRegistered, string vatNumber, string billEmail,
            string alternateBillEmail, string companyAddress, string companyPostal, string companyCity, string companyCountry, string purchaseOrderNumber)
        {
            try
            {
                //remove any extra whitespaces
                companyName = TrimIfNotNull(companyName);
                registrationNumber = TrimIfNotNull(registrationNumber);
                isVatRegistered = TrimIfNotNull(isVatRegistered);
                vatNumber = TrimIfNotNull(vatNumber);
                billEmail = TrimIfNotNull(billEmail);
                alternateBillEmail = TrimIfNotNull(alternateBillEmail);
                companyAddress = TrimIfNotNull(companyAddress);
                companyPostal = TrimIfNotNull(companyPostal);
                companyCity = TrimIfNotNull(companyCity);
                companyCountry = TrimIfNotNull(companyCountry);
                purchaseOrderNumber = TrimIfNotNull(purchaseOrderNumber);

                if (string.IsNullOrWhiteSpace(companyName))
                {
                    return Utils.WrapError("Please ensure that you enter your Company Name");
                }

                /*if (string.IsNullOrWhiteSpace(registrationNumber))
                {
                    return Utils.WrapError("Please ensure that you enter your Company Registration Number / ID Number / Passport Number");
                }

                Boolean IsVatRegistered;
                if (!Boolean.TryParse(isVatRegistered, out IsVatRegistered))
                {
                    return Utils.WrapError("Please ensure that you select whether you are vat registered");
                }

                //if the company is vat registered, require the vat number
                if (IsVatRegistered)
                {
                    if (string.IsNullOrWhiteSpace(vatNumber))
                    {
                        return Utils.WrapError("Please ensure that you enter your vat number");
                    }
                }

                if (string.IsNullOrWhiteSpace(physicalAddress))
                {
                    return Utils.WrapError("Please ensure that you enter your Company Physical Address");
                }*/

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    var checkCompanyName = (from c in entity.Companies
                                            where c.CompanyName == companyName
                                            select c).FirstOrDefault();

                    if (checkCompanyName != null)
                    {
                        return Utils.WrapError("The specified company is already registered. Please ensure that you enter your companies name");
                    }

                    if (!string.IsNullOrWhiteSpace(registrationNumber))
                    {
                        var checkCompanyRegistration = (from c in entity.Companies
                                                        where c.RegistrationNumber == registrationNumber
                                                        select c).FirstOrDefault();

                        if (checkCompanyRegistration != null)
                        {
                            return Utils.WrapError("The specified registration number is already registered with another company. Please ensure that you enter your Companies Registration Number or your ID Number or Passport Number");
                        }

                    }

                    dynamic returnItem = new JObject();
                    returnItem.Status = "Success";
                    return returnItem.ToString();

                }
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        //features = JArray(id)
        //validate the package that was selected
        public string ValidatePackageSignup(string packageID, string features)
        {
            try
            {

                //remove any extra whitespaces
                packageID = TrimIfNotNull(packageID);
                features = TrimIfNotNull(features);

                Guid PackageID;
                if (!Guid.TryParse(packageID, out PackageID))
                {
                    return Utils.WrapError("Package ID was not in the correct format");
                }

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    //validate the package
                    var curPackage = (from p in entity.Packages
                                      where p.ID == PackageID
                                      select p).FirstOrDefault();

                    if (curPackage == null)
                    {
                        return Utils.WrapError("The package you are trying to select does not exist");
                    }

                    //set the starting price of the package
                    decimal StartingPrice = curPackage.Price == null ? 0 : curPackage.Price.Value;

                    //check the received features list and split into mandatory and optional features
                    PackageFeaturesResult featuresResult = CheckPackageFeatures(features, packageID);
                    if (featuresResult.IsError)
                    {
                        return Utils.WrapError(featuresResult.ErrorMessage);
                    }

                    decimal OptionalFeaturesPrice = featuresResult.OptionalFeaturesPrice;

                    //calculate the final price of the package for one month
                    decimal Price = (StartingPrice + OptionalFeaturesPrice);

                    decimal DiscountPerc12Months = 0;
                    decimal DiscountPerc6Months = 0;

                    //get the setting for 12 months discount
                    var curDisc12Setting = (from s in entity.GlobalSettings
                                            where s.SettingName == "Discount12MonthsSignup"
                                            select s).FirstOrDefault();

                    if (curDisc12Setting != null)
                    {
                        //if you cannot parse the discount setting, save it as 0
                        if (!Decimal.TryParse(curDisc12Setting.SettingValue, out DiscountPerc12Months))
                        {
                            DiscountPerc12Months = 0;
                        }
                    }

                    //get the setting for 6 months discount
                    var curDisc6Setting = (from s in entity.GlobalSettings
                                           where s.SettingName == "Discount6MonthsSignup"
                                           select s).FirstOrDefault();

                    if (curDisc6Setting != null)
                    {

                        //if you cannot parse the discount setting, save it as 0
                        if (!Decimal.TryParse(curDisc6Setting.SettingValue, out DiscountPerc6Months))
                        {
                            DiscountPerc6Months = 0;
                        }
                    }


                    dynamic returnItem = new JObject();
                    returnItem.Price = Price;
                    returnItem.DiscountPerc12Months = DiscountPerc12Months;
                    returnItem.DiscountPerc6Months = DiscountPerc6Months;
                    return returnItem.ToString();
                }
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        //features = JArray(id)
        //signup for a new package
        public string NewPackageSignup(string secretKey, string packageID, string features, string purchaseOrderNumber)
        {
            try
            {
                secretKey = TrimIfNotNull(secretKey);
                packageID = TrimIfNotNull(packageID);
                features = TrimIfNotNull(features);
                purchaseOrderNumber = TrimIfNotNull(purchaseOrderNumber);

                int numOfMonths = 1;
                DateTime CurDate = DateTime.Now;

                string result = SignupForPackage(secretKey, packageID, features, numOfMonths + "", CurDate + "", purchaseOrderNumber);
                return result;

            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                if (ee.InnerException != null)
                {
                    Helper.LogError("Inner exception", ee.InnerException.ToString());
                }
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        //features = JArray(id)
        //an existing company signs up for a new package  - this package is added to the cart
        public string SignupForPackage(
            string secretKey,
            //package details
            string packageID, string features, string numOfMonths, string startDate, string purchaseOrderNumber)
        {
            try
            {

                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                startDate = TrimIfNotNull(startDate);
                packageID = TrimIfNotNull(packageID);
                features = TrimIfNotNull(features);
                numOfMonths = TrimIfNotNull(numOfMonths);
                purchaseOrderNumber = TrimIfNotNull(purchaseOrderNumber);

                var username = CheckUserHasRight(secretKey, "NewPackageSignup");
                if (Utils.IsError(username))
                {
                    return username;
                }

                Guid PackageID;
                if (!Guid.TryParse(packageID, out PackageID))
                {
                    return Utils.WrapError("Package ID was not in the correct format");
                }

                Int32 NumberOfMonths = 1;
                if (!Int32.TryParse(numOfMonths, out NumberOfMonths))
                {
                    return Utils.WrapError("Number of months is not in the correct format");

                }

                DateTime StartDate;
                if (!DateTime.TryParse(startDate, out StartDate))
                {
                    return Utils.WrapError("Start Date is not in the correct format");
                }

                /*string companyID = GetUserCompanyID(secretKey);
                Guid CompanyID;
                if (!Guid.TryParse(companyID, out CompanyID))
                {
                    return Utils.WrapError("Company ID is not in the correct format");
                }*/

                #region Check if the logged in user is assuming a company

                //check if the user is assuming a company
                var assumeResult = CheckAssumeCompany(secretKey);
                if (Utils.IsError(assumeResult))
                {
                    return assumeResult;
                }

                //parse the company ID to a Guid
                Guid CompanyID = Guid.Empty;
                if (!Guid.TryParse(assumeResult, out CompanyID))
                {
                    return Utils.WrapError("The ID of the Company that you are trying to view is in the incorrect format");
                }

                #endregion

                Guid LoggedInUser = (Guid)Membership.GetUser(username).ProviderUserKey;

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {

                    //validate the package
                    var curPackage = (from p in entity.Packages
                                      where p.ID == PackageID
                                      select p).FirstOrDefault();

                    if (curPackage == null)
                    {
                        return Utils.WrapError("The package you are trying to select does not exist");
                    }

                    if (!curPackage.IsActive.HasValue || (curPackage.IsActive.HasValue && !curPackage.IsActive.Value))
                    {
                        return Utils.WrapError("You cannot signup for this package as it is no longer available");
                    }

                    //check if the company has a package in its cart that has not been completed
                    var curCompanyPackage = (from cp in entity.CompanyPackages

                                             where cp.CompanyID == CompanyID && cp.IsCompleted == false
                                             && !cp.DateActivated.HasValue && !cp.DateDeactivated.HasValue

                                             select cp).FirstOrDefault();

                    if (curCompanyPackage != null)
                    {
                        return Utils.WrapError("You already have a package in your cart. Please clear your cart before adding a new package");
                    }

                    //check if the company has any packages that it is already signed up for in this range
                    string curSignedUpPackages = CheckCompanyForSignedUpPackages(CompanyID + "", startDate);
                    if (Utils.IsError(curSignedUpPackages))
                    {
                        return curSignedUpPackages;
                    }

                    //check the received features list and split into mandatory and optional features
                    PackageFeaturesResult featuresResult = CheckPackageFeatures(features, packageID);
                    if (featuresResult.IsError)
                    {
                        return Utils.WrapError(featuresResult.ErrorMessage);
                    }

                    //check if there are any discounts available
                    DiscountResult discountsResult = CheckForDiscounts(numOfMonths + "");
                    if (discountsResult.IsError)
                    {
                        return Utils.WrapError(discountsResult.ErrorMessage);
                    }

                    DateTime CurDate = DateTime.Now;

                    //add the package to the newly signed up user and company
                    SignupPackageResult signupResult = AddSignupPackage(packageID, numOfMonths + "", StartDate + "", CompanyID + "", featuresResult, discountsResult, purchaseOrderNumber);
                    if (signupResult.IsError)
                    {
                        return Utils.WrapError(signupResult.ErrorMessage);
                    }

                    entity.SaveChanges();

                    //if it is a free package, generate an invoice and activate the package
                    if (signupResult.FinalPrice <= 0)
                    {
                        string invResult = GenerateInvoice(secretKey, signupResult.CompanyPackageID + "", NumberOfMonths + "");
                        if (Utils.IsError(invResult))
                        {
                            return invResult;
                        }

                        string purResult = CompletePurchase(secretKey, signupResult.CompanyPackageID + "", CurDate + "", "CC");
                        if (Utils.IsError(purResult))
                        {
                            return purResult;
                        }

                    }

                    dynamic returnItem = new JObject();
                    returnItem.Status = "Success";
                    //return the price and discount details
                    returnItem.Price = signupResult.Price;
                    returnItem.FinalPrice = signupResult.FinalPrice;
                    returnItem.HasDiscount = signupResult.HasDiscount;
                    returnItem.DiscountValue = signupResult.DiscountValue;
                    returnItem.DiscountPercentage = signupResult.DiscountPercentage;
                    returnItem.DiscountDescription = signupResult.DiscountDescription;
                    returnItem.IsCompleted = signupResult.IsComplete;
                    returnItem.StartDate = StartDate;
                    return returnItem.ToString();
                }
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                if (ee.InnerException != null)
                {
                    Helper.LogError("Inner exception", ee.InnerException.ToString());
                }
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        //check if the number of months selected qualifies for discount
        private DiscountResult CheckForDiscounts(string numberOfMonths)
        {
            DiscountResult dResult = new DiscountResult();
            try
            {
                Int32 NumberOfMonths;
                if (!Int32.TryParse(numberOfMonths, out NumberOfMonths))
                {
                    dResult.IsError = true;
                    dResult.ErrorMessage = "Number of months is not in the correct format";
                    return dResult;
                }

                //variables to store discount values
                bool HasDiscount = false;
                decimal DiscountPerc = 0;
                string DiscountDescription = "";

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    //check if qualify for 12 months discount
                    if (NumberOfMonths == 12)
                    {
                        //get the setting
                        var curDiscSetting = (from s in entity.GlobalSettings
                                              where s.SettingName == "Discount12MonthsSignup"
                                              select s).FirstOrDefault();

                        if (curDiscSetting != null)
                        {
                            //specify that there is a discount
                            HasDiscount = true;
                            DiscountDescription = "12 Months Discount";

                            //if you cannot parse the discount setting, save it as 0
                            if (!Decimal.TryParse(curDiscSetting.SettingValue, out DiscountPerc))
                            {
                                DiscountPerc = 0;
                                HasDiscount = false;
                            }
                        }
                    }
                    //if qualify for 6 months discount
                    else if (NumberOfMonths == 6)
                    {
                        //get the setting
                        var curDiscSetting = (from s in entity.GlobalSettings
                                              where s.SettingName == "Discount6MonthsSignup"
                                              select s).FirstOrDefault();

                        if (curDiscSetting != null)
                        {
                            //specify that there is a discount
                            HasDiscount = true;
                            DiscountDescription = "6 Months Discount";

                            //if you cannot parse the discount setting, save it as 0
                            if (!Decimal.TryParse(curDiscSetting.SettingValue, out DiscountPerc))
                            {
                                DiscountPerc = 0;
                                HasDiscount = false;
                            }
                        }
                    }

                    dResult.IsError = false;
                    dResult.HasDiscount = HasDiscount;
                    dResult.DiscountPerc = DiscountPerc;
                    dResult.DiscountDescription = DiscountDescription;
                    return dResult;
                }
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                dResult.IsError = true;
                dResult.ErrorMessage = errors;
                return dResult;
            }
            catch (Exception ee)
            {
                if (ee.InnerException != null)
                {
                    Helper.LogError("Inner exception", ee.InnerException.ToString());
                }
                Helper.LogError(ee.Message, ee.StackTrace);
                dResult.IsError = true;
                dResult.ErrorMessage = ee.Message;
                return dResult;
            }

        }

        //features = JArray(id)
        //add the new package details to the company
        private SignupPackageResult AddSignupPackage(string packageID, string numOfMonths, string startDate, string companyID, PackageFeaturesResult featuresResult, DiscountResult discountsResult, string purchaseOrderNumber = "")
        {
            SignupPackageResult spResult = new SignupPackageResult();

            try
            {

                //remove any extra whitespaces
                packageID = TrimIfNotNull(packageID);
                numOfMonths = TrimIfNotNull(numOfMonths);
                startDate = TrimIfNotNull(startDate);
                companyID = TrimIfNotNull(companyID);
                purchaseOrderNumber = TrimIfNotNull(purchaseOrderNumber);

                Guid PackageID;
                if (!Guid.TryParse(packageID, out PackageID))
                {
                    spResult.IsError = true;
                    spResult.ErrorMessage = "Package ID was not in the correct format";
                    return spResult;
                }

                Int32 NumberOfMonths = 1;
                if (!Int32.TryParse(numOfMonths, out NumberOfMonths))
                {
                    spResult.IsError = true;
                    spResult.ErrorMessage = "Number of months is not in the correct format";
                    return spResult;

                }

                DateTime StartDate;
                if (!DateTime.TryParse(startDate, out StartDate))
                {
                    spResult.IsError = true;
                    spResult.ErrorMessage = "Start Date is not in the correct format";
                    return spResult;
                }

                Guid CompanyID;
                if (!Guid.TryParse(companyID, out CompanyID))
                {
                    spResult.IsError = true;
                    spResult.ErrorMessage = "Company ID is not in the correct format";
                    return spResult;
                }

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    //validate the package
                    var curPackage = (from p in entity.Packages
                                      where p.ID == PackageID
                                      select p).FirstOrDefault();

                    if (curPackage == null)
                    {
                        spResult.IsError = true;
                        spResult.ErrorMessage = "The package you are trying to select does not exist";
                        return spResult;
                    }

                    //set the starting prices of the package
                    decimal StartingPrice = curPackage.Price == null ? 0 : curPackage.Price.Value;

                    //store the optional features that must be added to the cart
                    ArrayList OptionalFeaturesToAdd = new ArrayList();

                    //cost for the selected optional features
                    decimal OptionalFeaturesPrice = 0;

                    //get the features from the list
                    OptionalFeaturesPrice = featuresResult.OptionalFeaturesPrice;
                    OptionalFeaturesToAdd = featuresResult.OptionalFeatures;

                    //get the discounts details returned
                    bool HasDiscount = discountsResult.HasDiscount;
                    decimal DiscountPerc = discountsResult.DiscountPerc;
                    string DiscountDescription = discountsResult.DiscountDescription;
                    decimal DiscountValue = 0;

                    //get the current date
                    DateTime CurDate = DateTime.Now;

                    //calculate the expiry date of the package
                    DateTime ExpiryDate = StartDate.AddMonths(NumberOfMonths);
                    ExpiryDate = ExpiryDate.AddDays(-1);

                    //calculate the package price 
                    decimal PackagePrice = (StartingPrice + OptionalFeaturesPrice) * NumberOfMonths;

                    //calculate the discount value of the package
                    DiscountValue = PackagePrice * (DiscountPerc / 100);

                    //calculate the final price
                    decimal FinalPrice = PackagePrice - DiscountValue;

                    //store whether the package signup has been completed
                    Boolean IsComplete = false;
                    Boolean IsActive = false;
                    Boolean PaymentPending = true;
                    String PaymentStatus = "Pending Payment";

                    //if it is a free package, generate an invoice and activate the package
                    if (FinalPrice <= 0)
                    {
                        IsComplete = true;
                        IsActive = true;
                        PaymentStatus = "Payment Successful";
                        PaymentPending = false;
                    }

                    spResult.IsError = false;
                    spResult.Price = PackagePrice;
                    spResult.FinalPrice = FinalPrice;
                    spResult.HasDiscount = HasDiscount;
                    spResult.DiscountValue = DiscountValue;
                    spResult.DiscountDescription = DiscountDescription;
                    spResult.DiscountPercentage = DiscountPerc;
                    spResult.IsComplete = IsComplete;
                    spResult.IsActive = IsActive;
                    spResult.PaymentStatus = PaymentStatus;
                    spResult.PendingPayment = PaymentPending;
                    spResult.PurchaseOrderNumber = purchaseOrderNumber;

                    //save only the basic info for the company package
                    var newCompanyPackage = new CompanyPackage();
                    Guid CompanyPackageID = Guid.NewGuid();
                    newCompanyPackage.ID = CompanyPackageID;
                    newCompanyPackage.CompanyID = CompanyID;
                    newCompanyPackage.NumberMonthsSignedUpFor = NumberOfMonths;
                    newCompanyPackage.DateSignedUp = CurDate;
                    newCompanyPackage.DateStart = StartDate;
                    newCompanyPackage.DateExpires = ExpiryDate;
                    newCompanyPackage.PackageID = PackageID;
                    newCompanyPackage.PackageName = curPackage.PackageName;
                    newCompanyPackage.IsActive = IsActive;
                    newCompanyPackage.IsCompleted = IsComplete;
                    newCompanyPackage.PaymentStatus = PaymentStatus;
                    newCompanyPackage.PaymentErrorStatus = PaymentStatus;
                    newCompanyPackage.PaymentPending = PaymentPending;
                    newCompanyPackage.HasDiscount = HasDiscount;
                    newCompanyPackage.DiscountValue = DiscountValue;
                    newCompanyPackage.DiscountPercentage = DiscountPerc;
                    newCompanyPackage.DiscountDescription = DiscountDescription;
                    newCompanyPackage.Price = PackagePrice;
                    newCompanyPackage.PackageStartingPrice = StartingPrice;
                    newCompanyPackage.OptionalFeaturesPrice = OptionalFeaturesPrice;
                    newCompanyPackage.PurchaseOrderNumber = purchaseOrderNumber;

                    entity.CompanyPackages.Add(newCompanyPackage);

                    //if there are optional features to add
                    if (OptionalFeaturesToAdd != null && OptionalFeaturesToAdd.Count > 0)
                    {
                        //cycle through the features and add them to the cart
                        foreach (Guid curFeatureID in OptionalFeaturesToAdd)
                        {
                            var newCart = new CompanyCart();
                            newCart.ID = Guid.NewGuid();
                            newCart.CompanyPackageID = CompanyPackageID;
                            newCart.FeatureID = curFeatureID;
                            entity.CompanyCarts.Add(newCart);
                        }
                    }

                    entity.SaveChanges();

                    spResult.CompanyPackageID = CompanyPackageID;
                    return spResult;
                }
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                spResult.IsError = true;
                spResult.ErrorMessage = errors;
                return spResult;
            }
            catch (Exception ee)
            {
                if (ee.InnerException != null)
                {
                    Helper.LogError("Inner exception", ee.InnerException.ToString());
                }
                Helper.LogError(ee.Message, ee.StackTrace);
                spResult.IsError = true;
                spResult.ErrorMessage = ee.Message;
                return spResult;
            }
        }

        //check if the company has any packages during the current period
        private String CheckCompanyForSignedUpPackages(string companyID, string startDate)
        {
            try
            {

                //remove any extra whitespaces
                companyID = TrimIfNotNull(companyID);
                startDate = TrimIfNotNull(startDate);

                Guid CompanyID;
                if (!Guid.TryParse(companyID, out CompanyID))
                {
                    return Utils.WrapError("Company ID is not in the correct format");
                }

                DateTime StartDate;
                if (!DateTime.TryParse(startDate, out StartDate))
                {
                    return Utils.WrapError("Start Date is not in the correct format");
                }


                if (StartDate < DateTime.Today)
                {
                    return Utils.WrapError("Please ensure that you select a date in the future");
                }

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    //check the company
                    var curCompany = (from c in entity.Companies
                                      where c.ID == CompanyID
                                      select c).FirstOrDefault();

                    if (curCompany == null)
                    {
                        return Utils.WrapError("This user is not linked to a company");
                    }

                    /* DateTime ExpiryDate = StartDate.AddDays(1);

                     //get any packages that have a date range that the StartDate falls into
                     var checkCurPackage = (from cp in entity.CompanyPackages
                                            where cp.CompanyID == CompanyID &&
                                       cp.DateStart <= StartDate && cp.DateExpires > ExpiryDate// && cp.IsActive == true
                                            orderby cp.DateExpires ascending
                                            select cp).FirstOrDefault();*/

                    var checkCurPackage = entity.GetCompanyCurrentPackage(CompanyID, StartDate).FirstOrDefault();
                    //if there is a current package
                    if (checkCurPackage != null)
                    {
                        return Utils.WrapError("<b>Your company is already signed up for a package during your selected period:</b><br/>" + StartDate.ToString("dd MMMM yyyy")
                                + "<br/><br/><b>" + checkCurPackage.PackageName + " Package: </b> " + checkCurPackage.DateStart.Value.ToString("dd MMMM yyyy") + " - " + checkCurPackage.DateExpires.Value.ToString("dd MMMM yyyy") + "</b>"
                                 + "<br/><br/>Please select a date after this package expires");
                    }

                    //if there are packages for the company for that date range
                    if (checkCurPackage != null)
                    {
                        //get any packages that have a date range that the StartDate falls into
                        /*var checkFuturePackage = (from cp in entity.CompanyPackages
                                                  where cp.CompanyID == CompanyID &&
                                                    cp.DateStart > StartDate
                                                      //packages that have been completed
                                                    && cp.IsCompleted == true
                                                      //that are not the current package
                                                    && cp.PackageID != checkCurPackage.ID
                                                  orderby cp.DateExpires ascending
                                                  select cp).ToList();*/

                        var checkFuturePackage = entity.GetCompanyFuturePackages(CompanyID, StartDate, checkCurPackage.ID);

                        //if there are packages for the company for that date range
                        if (checkFuturePackage != null && checkFuturePackage.Count() > 0)
                        {

                            string futurePackages = "<br/><br/><b>You have signed up for the following packages that have not yet started:</b>";
                            foreach (var c in checkFuturePackage)
                            {
                                Helper.LogMessage("Signup " + c.DateSignedUp + " start " + c.DateStart + " expires " + c.DateExpires);

                                futurePackages += "<br/><b>" + c.PackageName + " Package:</b> " + c.DateStart.Value.ToString("dd MMMM yyyy") + " - " + c.DateExpires.Value.ToString("dd MMMM yyyy") + "";
                            }

                            return Utils.WrapError("<b>Your company is already signed up for a package during the selected period:</b><br/>" + StartDate.ToString("dd MMMM yyyy")
                                + "<br/><br/><b>" + checkCurPackage.PackageName + " Package: </b> " + StartDate.ToString("dd MMMM yyyy") + " - " + checkCurPackage.DateExpires.Value.ToString("dd MMMM yyyy") + "</b>"
                                + futurePackages
                                + "<br/><br/>Please select a date that does not fall into any of the above date ranges");
                        }
                        else
                        {
                            return Utils.WrapError("<b>Your company is already signed up for a package during your selected period:</b><br/>" + StartDate.ToString("dd MMMM yyyy")
                                + "<br/><br/><b>" + checkCurPackage.PackageName + " Package: </b> " + checkCurPackage.DateStart.Value.ToString("dd MMMM yyyy") + " - " + checkCurPackage.DateExpires.Value.ToString("dd MMMM yyyy") + "</b>"
                                 + "<br/><br/>Please select a date after this package expires");
                        }
                    }

                    return "true";
                }
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                if (ee.InnerException != null)
                {
                    Helper.LogError("Inner exception", ee.InnerException.ToString());
                }
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        #endregion

        #region Company

        //this method is to add a company if the new user signup fails, but the membership user was created
        public string AddCompany(string secretKey, string companyName, string registrationNumber, string isVatRegistered,
            string vatNumber, string companyPhysicalAddress, string companyPostalCode, string companyCity, string companyCountry,
            string billEmail, string alternateBillEmail)
        {
            //return Utils.WrapError("This functionality has been moved to User Signup");
            try
            {

                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                companyName = TrimIfNotNull(companyName);
                registrationNumber = TrimIfNotNull(registrationNumber);
                vatNumber = TrimIfNotNull(vatNumber);
                isVatRegistered = TrimIfNotNull(isVatRegistered);
                companyPhysicalAddress = TrimIfNotNull(companyPhysicalAddress);
                companyPostalCode = TrimIfNotNull(companyPostalCode);
                companyCity = TrimIfNotNull(companyCity);
                companyCountry = TrimIfNotNull(companyCountry);
                alternateBillEmail = TrimIfNotNull(alternateBillEmail);
                billEmail = TrimIfNotNull(billEmail);

                var username = CheckUserHasRight(secretKey, "AddCompany");
                if (Utils.IsError(username))
                {
                    return username;
                }

                //get the ID for the logged in user
                Guid LoggedInUserID = (Guid)Membership.GetUser(username).ProviderUserKey;

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {

                    //check if the user has a company
                    var curCompany = (from cu in entity.CompanyUsers
                                      where cu.UserID == LoggedInUserID
                                      select cu).FirstOrDefault();

                    if (curCompany != null)
                    {
                        return Utils.WrapError("You cannot add another company to this account.");
                    }

                    //validate the company
                    var validCompany = ValidateCompanySignUp(companyName, registrationNumber, isVatRegistered, vatNumber, billEmail, alternateBillEmail, companyPhysicalAddress, companyPostalCode, companyCity, companyCountry, "");
                    if (Utils.IsError(validCompany))
                    {
                        return validCompany;
                    }

                    //create a new company
                    Guid CompanyID = Guid.NewGuid();
                    var newCompany = new Company();
                    newCompany.ID = CompanyID;
                    newCompany.CompanyName = companyName;
                    newCompany.RegistrationNumber = registrationNumber;
                    newCompany.VatNumber = vatNumber;
                    newCompany.PhysicalAddress = companyPhysicalAddress;
                    newCompany.IsActive = true;
                    newCompany.DateCreated = DateTime.Now;
                    newCompany.CreatedBy = LoggedInUserID;
                    newCompany.postalCode = companyPostalCode;
                    newCompany.city = companyCity;
                    newCompany.country = companyCountry;
                    newCompany.billEmail = billEmail;
                    newCompany.alternateBillEmail = alternateBillEmail;
                    entity.Companies.Add(newCompany);

                    //assign the user to the company
                    var newCompanyUser = new CompanyUser();
                    newCompanyUser.ID = Guid.NewGuid();
                    newCompanyUser.CompanyID = CompanyID;
                    newCompanyUser.UserID = LoggedInUserID;
                    newCompanyUser.RoleID = CompanyOwnerRoleID;
                    entity.CompanyUsers.Add(newCompanyUser);

                    entity.SaveChanges();


                    #region Document Manager

                    //path on where to save the documents
                    string DocumentManagerPath = ConfigurationManager.AppSettings["DocumentManagerPath"].ToString();
                    string CompanyPath = DocumentManagerPath + "\\" + CompanyID;

                    //create the directory 
                    if (CreateDirectory(CompanyPath))
                    {
                        //path on where to save the documents
                        string UsersPath = CompanyPath + "\\Users";

                        //create the directory 
                        CreateDirectory(UsersPath);

                        string ProjectsPath = CompanyPath + "\\Projects";

                        //create the directory 
                        CreateDirectory(ProjectsPath);
                    }

                    #endregion

                    dynamic returnItem = new JObject();
                    returnItem.Status = "Success";
                    returnItem.CompanyID = CompanyID;
                    return returnItem.ToString();
                }

            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        // edit a company details
        public string EditCompany(string secretKey, string companyName, string registrationNumber, string vatNumber, string logo, string physicalAddress)
        {
            try
            {
                //remove any extra whiespaces
                secretKey = TrimIfNotNull(secretKey);
                companyName = TrimIfNotNull(companyName);
                registrationNumber = TrimIfNotNull(registrationNumber);
                vatNumber = TrimIfNotNull(vatNumber);
                logo = TrimIfNotNull(logo);
                physicalAddress = TrimIfNotNull(physicalAddress);

                var username = CheckUserHasRight(secretKey, "EditCompany");

                if (Utils.IsError(username))
                {
                    return username;
                }

                //check if the user is an administrator
                /*var IsAdmin = CheckUserHasAnyAdminRole(secretKey);

                //if the user is not an admin 
                if (Utils.IsError(IsAdmin))
                {
                    return IsAdmin;
                }*/
                //validation
                if (string.IsNullOrWhiteSpace(companyName))
                {
                    return Utils.WrapError("Please ensure that you enter a company name");
                }

                /*Guid CompanyID;
                if (!Guid.TryParse(companyID, out CompanyID))
                {
                    return Utils.WrapError("Company ID is in the incorrect format");
                }*/

                #region Check if the logged in user is assuming a company

                //check if the user is assuming a company
                var assumeResult = CheckAssumeCompany(secretKey);
                if (Utils.IsError(assumeResult))
                {
                    return assumeResult;
                }

                //parse the company ID to a Guid
                Guid CompanyID = Guid.Empty;
                if (!Guid.TryParse(assumeResult, out CompanyID))
                {
                    return Utils.WrapError("The ID of the Company that you are trying to view is in the incorrect format");
                }

                #endregion

                //get the ID for the logged in user
                Guid LoggedInUserID = (Guid)Membership.GetUser(username).ProviderUserKey;

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    //check if the company you are trying to edit exists
                    var curCompany = (from c in entity.Companies
                                      where c.ID == CompanyID
                                      select c).FirstOrDefault();

                    if (curCompany == null)
                    {
                        return Utils.WrapError("The company you are trying to edit does not exist");
                    }


                    //check if the company name you are trying to use already exists
                    var curCompanyName = (from c in entity.Companies
                                          where c.ID != CompanyID && c.CompanyName == companyName
                                          select c).FirstOrDefault();

                    if (curCompanyName != null)
                    {
                        return Utils.WrapError("A company with that name already exists");
                    }

                    curCompany.CompanyName = companyName;
                    curCompany.RegistrationNumber = registrationNumber;
                    curCompany.VatNumber = vatNumber;
                    curCompany.DateUpdated = DateTime.Now;
                    curCompany.UpdatedBy = LoggedInUserID;
                    curCompany.PhysicalAddress = physicalAddress;

                    //if there is a logo
                    if (logo != null)
                    {
                        Image img = Helper.Base64ToImage(logo);
                        if (img == null)
                        {

                            return Utils.WrapError("Image is not in the correct format");
                        }
                        curCompany.Logo = Helper.Base64ToBytes(logo);
                    }

                    //add the new company
                    entity.Entry(curCompany).State = EntityState.Modified;

                    entity.SaveChanges();

                    dynamic returnItem = new JObject();
                    returnItem.Status = "Success";
                    returnItem.CompanyID = curCompany.ID;
                    returnItem.CompanyName = companyName;
                    returnItem.CompanyRegistrationNumber = registrationNumber;
                    returnItem.CompanyVatNumber = vatNumber;

                    if (curCompany.Logo != null)
                    {
                        returnItem.CompanyLogo = Helper.ImageBytesToBase64(curCompany.Logo);
                    }
                    else
                    {
                        returnItem.CompanyLogo = null;
                    }

                    returnItem.CompanyPhysicalAddress = curCompany.PhysicalAddress;

                    return returnItem.ToString();
                }

            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        //Get my company details
        public string GetMyCompanyDetails(string secretKey)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);

                /*string loggedInUserCompanyID = GetUserCompanyID(secretKey);

                //get the question id
                Guid LoggedInUserCompanyID;
                if (!Guid.TryParse(loggedInUserCompanyID, out LoggedInUserCompanyID))
                {
                    return Utils.WrapError("Company ID is not in the correct format");
                }*/

                #region Check if the logged in user is assuming a company

                //check if the user is assuming a company
                var assumeResult = CheckAssumeCompany(secretKey);
                if (Utils.IsError(assumeResult))
                {
                    return assumeResult;
                }

                //parse the company ID to a Guid
                Guid CompanyID = Guid.Empty;
                if (!Guid.TryParse(assumeResult, out CompanyID))
                {
                    return Utils.WrapError("The ID of the Company that you are trying to view is in the incorrect format");
                }

                #endregion

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {

                    var company = (
                        from x in
                            (
                               from c in entity.Companies
                               join cp in entity.CompanyPackages
                               on c.ID equals cp.CompanyID
                               where c.ID == CompanyID
                               orderby c.CompanyName

                               select new
                               {
                                   CompanyID = c.ID,
                                   c.CompanyName,
                                   CompanyRegistrationNumber = c.RegistrationNumber,
                                   CompanyVatNumber = c.VatNumber,
                                   CompanyLogo = c.Logo,
                                   CompanyLogoSM = c.LogoSM,
                                   SelectedSkin = c.SelectedSkin,
                                   CompanyPackageID = cp.ID,
                                   CompanyPackageName = cp.PackageName,
                                   CompanyPackagePrice = cp.Price,
                                   CompanyPackageExpiryDate = cp.DateExpires,
                                   c.IsActive,
                                   c.PhysicalAddress,
                                   c.city,
                                   c.postalCode,
                                   c.country
                               }).ToList()
                        select new
                        {
                            x.CompanyID,
                            x.CompanyName,
                            x.CompanyRegistrationNumber,
                            x.CompanyVatNumber,
                            CompanyLogo = x.CompanyLogo != null ? Helper.ImageBytesToBase64(x.CompanyLogo) : null,
                            CompanyLogoSM = x.CompanyLogoSM != null ? Helper.ImageBytesToBase64(x.CompanyLogoSM) : null,
                            x.SelectedSkin,
                            x.CompanyPackageID,
                            x.CompanyPackageName,
                            x.CompanyPackagePrice,
                            x.CompanyPackageExpiryDate,
                            x.PhysicalAddress,
                            x.city,
                            x.postalCode,
                            x.country,
                            x.IsActive
                        }
                    ).FirstOrDefault();


                    if (company == null)
                    {
                        return "[]";
                    }

                    return Helper.SerializeToJavascriptOject(company);
                }
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        //list details about a specific company
        public string GetSpecificCompany(string secretKey)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);

                var username = CheckUserHasRight(secretKey, "GetSpecificCompany");
                if (Utils.IsError(username))
                {
                    return username;
                }

                //check if the user is an administrator
                /*var IsAdmin = CheckUserHasAnyAdminRole(secretKey);

                //if the user is not an admin 
                if (Utils.IsError(IsAdmin))
                {

                    var userCompany = CheckUserCompany(secretKey, companyID);
                    if (Utils.IsError(userCompany))
                    {
                        return userCompany;
                    }
                }

                //convert the company id received
                Guid CompanyID;
                if (!Guid.TryParse(companyID, out CompanyID))
                {
                    return Utils.WrapError("Company ID is not in the correct format");
                }*/

                #region Check if the logged in user is assuming a company

                //check if the user is assuming a company
                var assumeResult = CheckAssumeCompany(secretKey);
                if (Utils.IsError(assumeResult))
                {
                    return assumeResult;
                }

                //parse the company ID to a Guid
                Guid CompanyID = Guid.Empty;
                if (!Guid.TryParse(assumeResult, out CompanyID))
                {
                    return Utils.WrapError("The ID of the Company that you are trying to view is in the incorrect format");
                }

                #endregion

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {

                    var company = (from c in entity.Companies
                                   join cp in entity.CompanyPackages
                                   on c.ID equals cp.CompanyID
                                   where c.ID == CompanyID
                                   select new
                                   {
                                       CompanyID = c.ID,
                                       c.CompanyName,
                                       RegistrationNumber = c.RegistrationNumber,
                                       VatNumber = c.VatNumber,
                                       DateCreated = c.DateCreated,
                                       Logo = c.Logo,
                                       PackageID = cp.ID,
                                       PackageName = cp.PackageName,
                                       PackagePrice = cp.Price,
                                       PackageExpiryDate = cp.DateExpires,
                                       c.IsActive,
                                       c.PhysicalAddress,
                                       c.postalCode,
                                       c.city,
                                       c.country,
                                       c.LogoSM,
                                       c.SelectedSkin,
                                   }).FirstOrDefault();

                    if (company == null)
                    {
                        return Utils.WrapError("The company you are searching for cannot be found");
                    }

                    string logo = null;
                    if (company.Logo != null && company.Logo.Length > 0)
                    {
                        logo = Helper.ImageBytesToBase64(company.Logo);
                    }
                    string logoSM = null;
                    if (company.LogoSM != null && company.LogoSM.Length > 0)
                    {
                        logoSM = Helper.ImageBytesToBase64(company.LogoSM);
                    }

                    dynamic returnItem = new JObject();
                    returnItem.Status = "Success";
                    returnItem.CompanyID = CompanyID;
                    returnItem.CompanyName = company.CompanyName;
                    returnItem.CompanyRegistrationNumber = company.RegistrationNumber;
                    returnItem.CompanyVatNumber = company.VatNumber;
                    returnItem.CompanyLogo = logo;
                    returnItem.CompanyLogoSM = logoSM;
                    returnItem.CompanyPackageID = company.PackageID;
                    returnItem.CompanyPackageName = company.PackageName;
                    returnItem.CompanyPackagePrice = company.PackagePrice;
                    returnItem.CompanyPackageExpiryDate = company.PackageExpiryDate;
                    returnItem.IsActive = company.IsActive;
                    returnItem.DateCreated = company.DateCreated;
                    returnItem.CompanyAddress = company.PhysicalAddress;
                    returnItem.CompanyPostalCode = company.postalCode;
                    returnItem.CompanyCity = company.city;
                    returnItem.CompanyCountry = company.country;
                    return returnItem.ToString();
                }
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        //all the users for a specific company
        public string GetCompanyUsers(string secretKey, string getAll)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                getAll = TrimIfNotNull(getAll);
                var username = CheckUserHasRight(secretKey, "GetCompanyUsers");
                if (Utils.IsError(username))
                {
                    return username;
                }

                //check if the user is an administrator
                /*var IsAdmin = CheckUserHasAnyAdminRole(secretKey);

                //if the user is not an admin 
                if (Utils.IsError(IsAdmin))
                {
                    var userCompany = CheckUserCompany(secretKey, companyID);
                    if (Utils.IsError(userCompany))
                    {
                        return userCompany;
                    }
                }

                //convert the company id received
                Guid CompanyID;
                if (!Guid.TryParse(companyID, out CompanyID))
                {
                    return Utils.WrapError("Company ID is not in the correct format");
                }*/

                #region Check if the logged in user is assuming a company

                //check if the user is assuming a company
                var assumeResult = CheckAssumeCompany(secretKey);
                if (Utils.IsError(assumeResult))
                {
                    return assumeResult;
                }

                //parse the company ID to a Guid
                Guid CompanyID = Guid.Empty;
                if (!Guid.TryParse(assumeResult, out CompanyID))
                {
                    return Utils.WrapError("The ID of the Company that you are trying to view is in the incorrect format");
                }

                #endregion

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    //get roles
                    //string [] roles = Roles.GetRolesForUser(username);
                    //use the roleid to get the rights


                    //if false or null then get only the active users
                    if (getAll != null && getAll.ToLower().Equals("false"))
                    {

                        var users = (from u in entity.aspnet_Membership
                                     join c in entity.CompanyUsers
                                     on u.UserId equals c.UserID
                                     join r in entity.Roles
                                     on c.RoleID equals r.RoleId
                                     where c.CompanyID == CompanyID && u.IsActive == true
                                     select new
                                     {
                                         u.UserId,
                                         Firstnames = u.Firstnames != null ? u.Firstnames : "",
                                         Lastname = u.Lastname != null ? u.Lastname : "",
                                         u.Email,
                                         ContactNumber = u.ContactNumber != null ? u.ContactNumber : "",
                                         Country = u.Country != null ? u.Country : "",
                                         c.CompanyID,
                                         c.RoleID,
                                         r.RoleName,
                                         IsActive = u.IsActive

                                     }).ToList();


                        if (users == null || users.Count <= 0)
                        {
                            return "[]";
                        }

                        return Helper.SerializeToJavascriptOject(users);
                    }
                    //if true then get all the users
                    else
                    {


                        var users = (from u in entity.aspnet_Membership
                                     join c in entity.CompanyUsers
                                     on u.UserId equals c.UserID
                                     join r in entity.Roles
                                     on c.RoleID equals r.RoleId
                                     where c.CompanyID == CompanyID
                                     select new
                                     {
                                         u.UserId,
                                         Firstnames = u.Firstnames != null ? u.Firstnames : "",
                                         Lastname = u.Lastname != null ? u.Lastname : "",
                                         u.Email,
                                         ContactNumber = u.ContactNumber != null ? u.ContactNumber : "",
                                         Country = u.Country != null ? u.Country : "",
                                         c.CompanyID,
                                         c.RoleID,
                                         r.RoleName,
                                         IsActive = u.IsActive

                                     }).ToList();


                        if (users == null || users.Count <= 0)
                        {
                            return "[]";
                        }

                        return Helper.SerializeToJavascriptOject(users);
                    }
                }
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        //all the active company users that are not in the specified project
        public string GetActiveCompanyUsersNotInProject(string secretKey, string projectID)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                projectID = TrimIfNotNull(projectID);

                var username = CheckUserHasRight(secretKey, "GetCompanyUsers");
                if (Utils.IsError(username))
                {
                    return username;
                }

                //check if the user is an administrator
                /*var IsAdmin = CheckUserHasAnyAdminRole(secretKey);

                //if the user is not an admin 
                if (Utils.IsError(IsAdmin))
                {
                    var userCompany = CheckUserCompany(secretKey, companyID);
                    if (Utils.IsError(userCompany))
                    {
                        return userCompany;
                    }
                }

                //convert the company id received
                Guid CompanyID;
                if (!Guid.TryParse(companyID, out CompanyID))
                {
                    return Utils.WrapError("Company ID is not in the correct format");
                }*/

                Guid ProjectID;
                if (!Guid.TryParse(projectID, out ProjectID))
                {
                    return Utils.WrapError("Project ID is not in the correct format");
                }

                #region Check if the logged in user is assuming a company

                //check if the user is assuming a company
                var assumeResult = CheckAssumeCompany(secretKey);
                if (Utils.IsError(assumeResult))
                {
                    return assumeResult;
                }

                //parse the company ID to a Guid
                Guid CompanyID = Guid.Empty;
                if (!Guid.TryParse(assumeResult, out CompanyID))
                {
                    return Utils.WrapError("The ID of the Company that you are trying to view is in the incorrect format");
                }

                #endregion

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    var company = (from c in entity.Companies
                                   where c.ID == CompanyID
                                   select c).FirstOrDefault();

                    if (company == null)
                    {
                        return Utils.WrapError("Company not found");
                    }

                    var project = (from p in entity.Projects
                                   where p.ID == ProjectID && p.ProjectCompany == CompanyID
                                   select p).FirstOrDefault();

                    if (project == null)
                    {
                        return Utils.WrapError("Project not found");
                    }

                    var users = entity.GetActiveCompanyUsersNotInProject(CompanyID, ProjectID).ToList();

                    if (users == null)
                    {
                        return "[]";
                    }
                    return Helper.SerializeToJavascriptOject(users);
                }
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        //all the active project users that are not in the specified survey
        public string GetActiveProjectUsersNotInSurvey(string secretKey, string projectID, string surveyID)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                surveyID = TrimIfNotNull(surveyID);
                projectID = TrimIfNotNull(projectID);

                var username = CheckUserHasRight(secretKey, "GetCompanyUsers");
                if (Utils.IsError(username))
                {
                    return username;
                }

                //check if the user is an administrator
                /*var IsAdmin = CheckUserHasAnyAdminRole(secretKey);

                //if the user is not an admin 
                if (Utils.IsError(IsAdmin))
                {
                    var userCompany = CheckUserCompany(secretKey, companyID);
                    if (Utils.IsError(userCompany))
                    {
                        return userCompany;
                    }
                }

                //convert the company id received
                Guid CompanyID;
                if (!Guid.TryParse(companyID, out CompanyID))
                {
                    return Utils.WrapError("Company ID is not in the correct format");
                }*/

                Guid SurveyID;
                if (!Guid.TryParse(surveyID, out SurveyID))
                {
                    return Utils.WrapError("Survey ID is not in the correct format");
                }

                Guid ProjectID;
                if (!Guid.TryParse(projectID, out ProjectID))
                {
                    return Utils.WrapError("Project ID is not in the correct format");
                }

                #region Check if the logged in user is assuming a company

                //check if the user is assuming a company
                var assumeResult = CheckAssumeCompany(secretKey);
                if (Utils.IsError(assumeResult))
                {
                    return assumeResult;
                }

                //parse the company ID to a Guid
                Guid CompanyID = Guid.Empty;
                if (!Guid.TryParse(assumeResult, out CompanyID))
                {
                    return Utils.WrapError("The ID of the Company that you are trying to view is in the incorrect format");
                }

                #endregion

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    var company = (from c in entity.Companies
                                   where c.ID == CompanyID
                                   select c).FirstOrDefault();

                    if (company == null)
                    {
                        return Utils.WrapError("Company not found");
                    }

                    var survey = (from s in entity.Surveys
                                  join p in entity.Projects
                                  on s.ProjectID equals p.ID
                                  where s.ID == SurveyID && p.ProjectCompany == CompanyID
                                  select p).FirstOrDefault();

                    if (survey == null)
                    {
                        return Utils.WrapError("Survey not found");
                    }

                    var users = entity.GetActiveProjectUsersNotInSurvey(CompanyID, ProjectID, SurveyID).ToList();

                    if (users == null)
                    {
                        return "[]";
                    }
                    return Helper.SerializeToJavascriptOject(users);
                }
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        //save whitelabelling information for the company
        public string SaveWhiteLabelling(string secretKey, string logoLG, string logoSM, string selectedSkin, string selectedTheme)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                logoLG = TrimIfNotNull(logoLG);
                logoSM = TrimIfNotNull(logoSM);
                selectedSkin = TrimIfNotNull(selectedSkin);
                selectedTheme = TrimIfNotNull(selectedTheme);

                var username = CheckUserHasRight(secretKey, "SaveWhiteLabelling");
                if (Utils.IsError(username))
                {
                    return username;
                }

                //convert the company id received
                /*Guid CompanyID;
                if (!Guid.TryParse(companyID, out CompanyID))
                {
                    return Utils.WrapError("Company ID is not in the correct format");
                }*/

                if (string.IsNullOrWhiteSpace(logoLG))
                {
                    return Utils.WrapError("Please ensure that you provide a full sized logo");
                }

                if (string.IsNullOrWhiteSpace(selectedSkin))
                {
                    return Utils.WrapError("Please ensure that you select a colour theme");
                }

                #region Check if the logged in user is assuming a company

                //check if the user is assuming a company
                var assumeResult = CheckAssumeCompany(secretKey);
                if (Utils.IsError(assumeResult))
                {
                    return assumeResult;
                }

                //parse the company ID to a Guid
                Guid CompanyID = Guid.Empty;
                if (!Guid.TryParse(assumeResult, out CompanyID))
                {
                    return Utils.WrapError("The ID of the Company that you are trying to view is in the incorrect format");
                }

                #endregion

                //check if the company is allowed to use white labelling
                var packageResult = CheckCompanyPackageWhiteLabelling(CompanyID + "");
                if (Utils.IsError(packageResult))
                {
                    return packageResult;
                }

                //get the ID for the logged in user
                Guid LoggedInUserID = (Guid)Membership.GetUser(username).ProviderUserKey;

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    var curCompany = (from c in entity.Companies
                                      where c.ID == CompanyID
                                      select c).FirstOrDefault();

                    if (curCompany == null)
                    {
                        return Utils.WrapError("The company you are trying to add branding to could not be found");
                    }

                    curCompany.SelectedSkin = selectedSkin;
                    curCompany.MobileAppThemeName = selectedTheme;

                    //if there is a logoLG
                    if (logoLG != null)
                    {
                        Image img = Helper.Base64ToImage(logoLG);
                        if (img == null)
                        {

                            return Utils.WrapError("Large Logo is not in the correct format");
                        }
                        curCompany.Logo = Helper.Base64ToBytes(logoLG);
                    }

                    //if there is a logoSM
                    if (logoSM != null)
                    {
                        Image img = Helper.Base64ToImage(logoSM);
                        if (img == null)
                        {

                            return Utils.WrapError("Small Logo is not in the correct format");
                        }
                        curCompany.LogoSM = Helper.Base64ToBytes(logoSM);
                    }

                    //add the new company
                    entity.Companies.Add(curCompany);
                    entity.Entry(curCompany).State = EntityState.Modified;
                    entity.SaveChanges();

                }

                dynamic returnItem = new JObject();
                returnItem.Status = "Success";
                return returnItem.ToString();
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        //get the settings for the company package. These specify what features the company is allowed to access
        public string GetCompanyPackageDetails(string secretKey)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);

                /*string companyID = GetUserCompanyID(secretKey);
                Guid CompanyID;
                if (!Guid.TryParse(companyID, out CompanyID))
                {
                    return Utils.WrapError("Company ID is not in the correct format");
                }*/

                #region Check if the logged in user is assuming a company

                //check if the user is assuming a company
                var assumeResult = CheckAssumeCompany(secretKey);
                if (Utils.IsError(assumeResult))
                {
                    return assumeResult;
                }

                //parse the company ID to a Guid
                Guid CompanyID = Guid.Empty;
                if (!Guid.TryParse(assumeResult, out CompanyID))
                {
                    return Utils.WrapError("The ID of the Company that you are trying to view is in the incorrect format");
                }

                #endregion

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    /*DateTime StartDate = DateTime.Today;
                    DateTime ExpiryDate = DateTime.Today.AddDays(1);

                    //get any packages that have a date range that today falls into
                    var curPackage = (from cp in entity.CompanyPackages
                                      where cp.CompanyID == CompanyID &&
                                      cp.DateStart <= StartDate && cp.DateExpires > ExpiryDate && cp.IsActive == true
                                      orderby cp.DateExpires ascending
                                      select cp).FirstOrDefault();*/

                    DateTime StartDate = DateTime.Today;

                    var curPackage = entity.GetCompanyCurrentPackage(CompanyID, StartDate).FirstOrDefault();

                    //if there are no packages for the company
                    if (curPackage == null)
                    {
                        return Utils.WrapError("Your company does not have any active packages. Please purchase a package before continuing.");
                    }

                    dynamic returnItem = new JObject();
                    returnItem.Status = "Success";
                    returnItem.CompanyPackageID = curPackage.ID;
                    returnItem.PackageName = curPackage.PackageName;
                    returnItem.Description = curPackage.Description;
                    returnItem.DateStart = curPackage.DateStart;
                    returnItem.DateExpires = curPackage.DateExpires;
                    returnItem.NumberMonthsSignedUpFor = curPackage.NumberMonthsSignedUpFor;
                    returnItem.Price = curPackage.Price;
                    returnItem.PaymentType = curPackage.PaymentType;
                    returnItem.NumberOfSurveys = curPackage.NumberOfSurveys;
                    returnItem.NumberOfQuestions = curPackage.NumberOfQuestions;
                    returnItem.NumberOfUsers = curPackage.NumberOfUsers;
                    returnItem.NumberOfResponses = curPackage.NumberOfResponses;
                    returnItem.NumberOfProjects = curPackage.NumberOfProjects;
                    returnItem.BasicReporting = curPackage.BasicReporting;
                    returnItem.AdvancedReporting = curPackage.AdvancedReporting;
                    returnItem.Excel = curPackage.Excel;
                    returnItem.PDF = curPackage.PDF;
                    returnItem.CSV = curPackage.CSV;
                    returnItem.Piping = curPackage.Piping;
                    returnItem.Summing = curPackage.Summing;
                    returnItem.WhiteLabelling = curPackage.WhiteLabelling;
                    returnItem.PhotoCamera = curPackage.PhotoCamera;
                    returnItem.GeoServices = curPackage.GeoServices;
                    returnItem.Signatures = curPackage.Signatures;
                    returnItem.UniqueID = curPackage.UniqueID;
                    return returnItem.ToString();
                }
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        //get the settings for the company package. These specify what features the company is allowed to access
        private string GetCompanyPackageDetailsByCompanyID(string companyID)
        {
            try
            {
                //remove any extra whitespaces
                companyID = TrimIfNotNull(companyID);

                Guid CompanyID;
                if (!Guid.TryParse(companyID, out CompanyID))
                {
                    return Utils.WrapError("Company ID is not in the correct format");
                }

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    DateTime StartDate = DateTime.Today;

                    var curPackage = entity.GetCompanyCurrentPackage(CompanyID, StartDate).FirstOrDefault();

                    //if there are no packages for the company
                    if (curPackage == null)
                    {
                        return Utils.WrapError("Your company does not have any active packages. Please purchase a package before continuing.");
                    }

                    dynamic returnItem = new JObject();
                    returnItem.Status = "Success";
                    returnItem.CompanyPackageID = curPackage.ID;
                    returnItem.PackageName = curPackage.PackageName;
                    returnItem.Description = curPackage.Description;
                    returnItem.DateStart = curPackage.DateStart;
                    returnItem.DateExpires = curPackage.DateExpires;
                    returnItem.NumberMonthsSignedUpFor = curPackage.NumberMonthsSignedUpFor;
                    returnItem.Price = curPackage.Price;
                    returnItem.PaymentType = curPackage.PaymentType;
                    returnItem.NumberOfSurveys = curPackage.NumberOfSurveys;
                    returnItem.NumberOfQuestions = curPackage.NumberOfQuestions;
                    returnItem.NumberOfUsers = curPackage.NumberOfUsers;
                    returnItem.NumberOfResponses = curPackage.NumberOfResponses;
                    returnItem.NumberOfProjects = curPackage.NumberOfProjects;
                    returnItem.BasicReporting = curPackage.BasicReporting;
                    returnItem.AdvancedReporting = curPackage.AdvancedReporting;
                    returnItem.Excel = curPackage.Excel;
                    returnItem.PDF = curPackage.PDF;
                    returnItem.CSV = curPackage.CSV;
                    returnItem.Piping = curPackage.Piping;
                    returnItem.Summing = curPackage.Summing;
                    returnItem.WhiteLabelling = curPackage.WhiteLabelling;
                    returnItem.PhotoCamera = curPackage.PhotoCamera;
                    returnItem.GeoServices = curPackage.GeoServices;
                    returnItem.Signatures = curPackage.Signatures;
                    returnItem.UniqueID = curPackage.UniqueID;
                    return returnItem.ToString();
                }
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        #endregion

        #region Users

        public string ResendAddUserInvite(string secretKey, string userID)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                userID = TrimIfNotNull(userID);

                var username = CheckUserHasRight(secretKey, "UpdateUser");
                if (Utils.IsError(username))
                {
                    return username;
                }

                //check if the user is an administrator
                /*var IsAdmin = CheckUserHasAnyAdminRole(secretKey);

                //if the user is not an admin 
                if (Utils.IsError(IsAdmin))
                {
                    var userCompany = CheckUserCompany(secretKey, companyID);
                    if (Utils.IsError(userCompany))
                    {
                        return userCompany;
                    }
                }

                //convert the company id received
                Guid CompanyID;
                if (!Guid.TryParse(companyID, out CompanyID))
                {
                    return Utils.WrapError("Company ID is not in the correct format");
                }*/

                Guid UserID;
                if (!Guid.TryParse(userID, out UserID))
                {
                    return Utils.WrapError("User ID is not in the correct format");
                }

                #region Check if the logged in user is assuming a company

                //check if the user is assuming a company
                var assumeResult = CheckAssumeCompany(secretKey);
                if (Utils.IsError(assumeResult))
                {
                    return assumeResult;
                }

                //parse the company ID to a Guid
                Guid CompanyID = Guid.Empty;
                if (!Guid.TryParse(assumeResult, out CompanyID))
                {
                    return Utils.WrapError("The ID of the Company that you are trying to view is in the incorrect format");
                }

                #endregion

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    //get the user you are trying to add
                    var user = (from u in entity.aspnet_Membership
                                where u.UserId == UserID
                                select u).FirstOrDefault();


                    //if there is no user 
                    if (user == null)
                    {
                        return Utils.WrapError("The user was not found");
                    }

                    var company = (from u in entity.CompanyUsers
                                   join c in entity.Companies
                                   on u.CompanyID equals c.ID
                                   join r in entity.Roles
                                   on u.RoleID equals r.RoleId
                                   where u.UserID == user.UserId && u.CompanyID == CompanyID
                                   select new
                                   {
                                       c.ID,
                                       r.RoleId,
                                       r.RoleName
                                   }).FirstOrDefault();

                    if (company == null)
                    {
                        return Utils.WrapError("The user you are trying to re-invite cannot be found within your company");
                    }

                    //send a email to the new team member
                    //return SendEmailAddUser(UserID.ToString(), user.Email, user.Email, user.Password, company.CompanyName);
                    return SendEmail(EmailPurpose.AddUser, user.Email, company.ID + "", "", "", "", "", company.RoleId + "", company.RoleName, "");
                }
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        //add a new user
        public string AddUser(string secretKey, string firstnames, string lastname, string contactNumber,
            string emailAddress, string password, string country, string physicalAddress, string role/*,
            string emergencyContact1Fullname, string emergencyContact1ContactNumber, string emergencyContact1Relationship,
            string emergencyContact2Fullname, string emergencyContact2ContactNumber, string emergencyContact2Relationship*/)
        {
            try
            {

                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                firstnames = TrimIfNotNull(firstnames);
                lastname = TrimIfNotNull(lastname);
                contactNumber = TrimIfNotNull(contactNumber);
                emailAddress = TrimIfNotNull(emailAddress);
                password = TrimIfNotNull(password);
                country = TrimIfNotNull(country);
                physicalAddress = TrimIfNotNull(physicalAddress);
                role = TrimIfNotNull(role);
                /*emergencyContact1Fullname = TrimIfNotNull(emergencyContact1Fullname);
                emergencyContact1ContactNumber = TrimIfNotNull(emergencyContact1ContactNumber);
                emergencyContact1Relationship = TrimIfNotNull(emergencyContact1Relationship);
                emergencyContact2Fullname = TrimIfNotNull(emergencyContact2Fullname);
                emergencyContact2ContactNumber = TrimIfNotNull(emergencyContact2ContactNumber);
                emergencyContact2Relationship = TrimIfNotNull(emergencyContact2Relationship);*/

                var username = CheckUserHasRight(secretKey, "AddUser");
                if (Utils.IsError(username))
                {
                    return username;
                }

                //check if the user is an administrator
                /*var IsAdmin = CheckUserHasAnyAdminRole(secretKey);

                //if the user is not an admin 
                if (Utils.IsError(IsAdmin))
                {
                    var userCompany = CheckUserCompany(secretKey, companyID);
                    if (Utils.IsError(userCompany))
                    {
                        return userCompany;
                    }
                }

                //convert the company id received
                Guid CompanyID;
                if (!Guid.TryParse(companyID, out CompanyID))
                {
                    return Utils.WrapError("Company ID is not in the correct format");
                }*/

                Guid RoleID;
                if (!Guid.TryParse(role, out RoleID))
                {
                    return Utils.WrapError("Role ID is not in the correct format");
                }

                //validation
                if (string.IsNullOrWhiteSpace(firstnames))
                {
                    return Utils.WrapError("Please ensure that you enter a firstname");
                }

                if (string.IsNullOrWhiteSpace(lastname))
                {
                    return Utils.WrapError("Please ensure that you enter a lastname");
                }

                if (string.IsNullOrWhiteSpace(emailAddress))
                {
                    return Utils.WrapError("Please ensure that you enter a email address");
                }

                if (string.IsNullOrWhiteSpace(password))
                {
                    return Utils.WrapError("Please ensure that you enter a password");
                }

                #region Check if the logged in user is assuming a company

                //check if the user is assuming a company
                var assumeResult = CheckAssumeCompany(secretKey);
                if (Utils.IsError(assumeResult))
                {
                    return assumeResult;
                }

                //parse the company ID to a Guid
                Guid CompanyID = Guid.Empty;
                if (!Guid.TryParse(assumeResult, out CompanyID))
                {
                    return Utils.WrapError("The ID of the Company that you are trying to view is in the incorrect format");
                }

                #endregion

                //check if the company is allowed to add more users
                var packageResult = CheckCompanyPackageNoUsers(CompanyID + "");
                if (Utils.IsError(packageResult))
                {
                    return packageResult;
                }

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {

                    //get the company
                    var companyInfo = (from c in entity.Companies
                                       where c.ID == CompanyID
                                       select c).FirstOrDefault();

                    if (companyInfo == null)
                    {
                        return Utils.WrapError("Could not find the company you are trying to add the user to");
                    }

                    string userEmail = Membership.GetUserNameByEmail(emailAddress);

                    if (userEmail != null)
                    {
                        return Utils.WrapError("Username already exists");
                    }

                    var theRole = (from r in entity.Roles
                                   where (r.RoleId == RoleID && r.CompanyID == CompanyID) ||
                                   (r.RoleId == RoleID && r.IsSysRole == true)
                                   select r
                                    ).FirstOrDefault();

                    if (theRole == null)
                    {
                        return Utils.WrapError("The role you are trying to assign this user to does not exist for the specified company");
                    }

                    //create a new user
                    MembershipUser newMembershipUser = Membership.CreateUser(emailAddress, password, emailAddress);

                    //get the user's id
                    Guid TheUserID = (Guid)newMembershipUser.ProviderUserKey;

                    //add the role to the user
                    //Roles.AddUserToRole(emailAddress, theRole.RoleName);

                    //user info
                    var newUser = (from u in entity.aspnet_Membership
                                   where u.UserId == TheUserID
                                   select u).FirstOrDefault();

                    if (newUser == null)
                    {
                        return Utils.WrapError("The registration unexpectedly failed");
                    }

                    newUser.Firstnames = firstnames;
                    newUser.Lastname = lastname;
                    newUser.Email = emailAddress;
                    newUser.ContactNumber = contactNumber;
                    newUser.Country = country;
                    newUser.PhysicalAddress = physicalAddress;
                    newUser.IsLockedOut = false;
                    newUser.IsActive = true;
                    newUser.DateActivated = DateTime.Now;
                    newUser.IsApproved = true;
                    /*newUser.EmergencyContact1Fullname = emergencyContact1Fullname;
                    newUser.EmergencyContact1ContactNumber = emergencyContact1ContactNumber;
                    newUser.EmergencyContact1Relationship = emergencyContact1Relationship;
                    newUser.EmergencyContact2Fullname = emergencyContact2Fullname;
                    newUser.EmergencyContact2ContactNumber = emergencyContact2ContactNumber;
                    newUser.EmergencyContact2Relationship = emergencyContact2Relationship;*/

                    entity.Entry(newUser).State = EntityState.Modified;

                    //company user info
                    var newCompanyUser = new CompanyUser();
                    newCompanyUser.ID = Guid.NewGuid();
                    newCompanyUser.CompanyID = companyInfo.ID;
                    newCompanyUser.UserID = TheUserID;
                    newCompanyUser.RoleID = theRole.RoleId;
                    entity.CompanyUsers.Add(newCompanyUser);

                    //add a new request for the email to be verified
                    var newVerifyRequest = new VerifyEmailRequest();
                    Guid RequestID = Guid.NewGuid();
                    newVerifyRequest.ID = RequestID;
                    newVerifyRequest.DateRequested = DateTime.Now;
                    newVerifyRequest.UserID = TheUserID;
                    newVerifyRequest.IsDeleted = false;
                    entity.VerifyEmailRequests.Add(newVerifyRequest);

                    entity.SaveChanges();

                    #region Document Manager

                    //path on where to save the documents
                    string DocumentManagerPath = ConfigurationManager.AppSettings["DocumentManagerPath"].ToString();
                    string UsersPath = DocumentManagerPath + "\\" + CompanyID + "\\Users\\" + TheUserID;

                    //create the directory 
                    CreateDirectory(UsersPath);

                    #endregion

                    //string result = SendEmailAddUser(TheUserID.ToString(), emailAddress, emailAddress, password, companyInfo.CompanyName);
                    string result = SendEmail(EmailPurpose.AddUser, emailAddress, companyInfo.ID + "", "", "", password, "", theRole.RoleId + "", theRole.RoleName, RequestID + "");
                    if (Utils.IsError(result))
                    {
                        return result;
                    }


                    dynamic returnItem = new JObject();
                    returnItem.Status = "Success";
                    return returnItem.ToString();
                }


            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        //update a user
        public string UpdateUser(string secretKey, string userID, string firstnames, string lastname,
            string contactNumber, string photo, string country, string physicalAddress, string roleID/*,
            string emergencyContact1Fullname, string emergencyContact1ContactNumber, string emergencyContact1Relationship,
            string emergencyContact2Fullname, string emergencyContact2ContactNumber, string emergencyContact2Relationship*/)
        {

            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                firstnames = TrimIfNotNull(firstnames);
                lastname = TrimIfNotNull(lastname);
                contactNumber = TrimIfNotNull(contactNumber);
                photo = TrimIfNotNull(photo);
                country = TrimIfNotNull(country);
                physicalAddress = TrimIfNotNull(physicalAddress);
                roleID = TrimIfNotNull(roleID);
                /*emergencyContact1Fullname = TrimIfNotNull(emergencyContact1Fullname);
                emergencyContact1ContactNumber = TrimIfNotNull(emergencyContact1ContactNumber);
                emergencyContact1Relationship = TrimIfNotNull(emergencyContact1Relationship);
                emergencyContact2Fullname = TrimIfNotNull(emergencyContact2Fullname);
                emergencyContact2ContactNumber = TrimIfNotNull(emergencyContact2ContactNumber);
                emergencyContact2Relationship = TrimIfNotNull(emergencyContact2Relationship);*/

                string username = CheckUserHasRight(secretKey, "UpdateUser");

                if (Utils.IsError(username))
                {
                    return username;
                }

                //check if the user is an administrator
                /*var IsAdmin = CheckUserHasAnyAdminRole(secretKey);

                //if the user is not an admin 
                if (Utils.IsError(IsAdmin))
                {
                    var userCompany = CheckUserCompany(secretKey, companyID);
                    if (Utils.IsError(userCompany))
                    {
                        return userCompany;
                    }
                }

                //convert the company id received
                Guid CompanyID;
                if (!Guid.TryParse(companyID, out CompanyID))
                {
                    return Utils.WrapError("Company ID is not in the correct format");
                }*/

                //parse the user to update's id to a guid
                Guid UserID;
                if (!Guid.TryParse(userID, out UserID))
                {
                    return Utils.WrapError("User ID was not provided in the correct format");
                }

                Guid RoleID;
                if (!Guid.TryParse(roleID, out RoleID))
                {
                    return Utils.WrapError("Role ID was not provided in the correct format");
                }

                //validation
                if (string.IsNullOrWhiteSpace(firstnames))
                {
                    return Utils.WrapError("Please ensure that you enter a firstname");
                }

                if (string.IsNullOrWhiteSpace(lastname))
                {
                    return Utils.WrapError("Please ensure that you enter a lastname");
                }

                if (string.IsNullOrWhiteSpace(contactNumber))
                {
                    return Utils.WrapError("Please ensure that you enter a contact number");
                }

                if (string.IsNullOrWhiteSpace(country))
                {
                    return Utils.WrapError("Please ensure that you enter a country");
                }

                if (string.IsNullOrWhiteSpace(physicalAddress))
                {
                    return Utils.WrapError("Please ensure that you enter a physical address");
                }

                #region Check if the logged in user is assuming a company

                //check if the user is assuming a company
                var assumeResult = CheckAssumeCompany(secretKey);
                if (Utils.IsError(assumeResult))
                {
                    return assumeResult;
                }

                //parse the company ID to a Guid
                Guid CompanyID = Guid.Empty;
                if (!Guid.TryParse(assumeResult, out CompanyID))
                {
                    return Utils.WrapError("The ID of the Company that you are trying to view is in the incorrect format");
                }

                #endregion

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    var role = (from r in entity.Roles
                                where r.RoleId == RoleID
                                select r).FirstOrDefault();

                    if (role == null)
                    {
                        return Utils.WrapError("The role you are trying to assign this user to does not exist");
                    }

                    var curUser = (from u in entity.aspnet_Membership
                                   where u.UserId == UserID
                                   select u).FirstOrDefault();

                    if (curUser == null)
                    {
                        return Utils.WrapError("The user you are trying to update does not exist");
                    }

                    //if there is a photo
                    if (photo != null && !photo.Equals(""))
                    {
                        curUser.Photo = Helper.Base64ToBytes(photo);
                    }

                    curUser.Firstnames = firstnames;
                    curUser.Lastname = lastname;
                    curUser.ContactNumber = contactNumber;
                    curUser.Country = country;
                    curUser.PhysicalAddress = physicalAddress;
                    /*curUser.EmergencyContact1Fullname = emergencyContact1Fullname;
                    curUser.EmergencyContact1ContactNumber = emergencyContact1ContactNumber;
                    curUser.EmergencyContact1Relationship = emergencyContact1Relationship;
                    curUser.EmergencyContact2Fullname = emergencyContact2Fullname;
                    curUser.EmergencyContact2ContactNumber = emergencyContact2ContactNumber;
                    curUser.EmergencyContact2Relationship = emergencyContact2Relationship;*/

                    entity.Entry(curUser).State = EntityState.Modified;

                    var compUser = (from c in entity.CompanyUsers
                                    where c.UserID == UserID
                                    select c).FirstOrDefault();

                    if (compUser == null)
                    {
                        return Utils.WrapError("The company this user is associated with cannot be found");
                    }

                    compUser.RoleID = RoleID;
                    entity.Entry(compUser).State = EntityState.Modified;


                    /* TODO 
                     * REMOVE THIS - IT MUST ONLY OCCUR WHEN ALL REQUIRED DOCUMENTS HAVE BEEN UPLOADED AND INFORMATION HAS BEEN ENTERED AS PER PROJECT REQUIREMENTS
                     */
                    //ONLY IF A USER IS ON A PROJECT
                    var projectUser = (from p in entity.ProjectTeams
                                       where p.UserID == UserID
                                       select p).FirstOrDefault();

                    if (projectUser != null)
                    {
                        projectUser.CompletedRegistration = true;
                        entity.Entry(projectUser).State = EntityState.Modified;
                    }

                    /* END TODO */

                    entity.SaveChanges();

                    string result = SendEmail(EmailPurpose.UpdateUser, curUser.Email, CompanyID + "", "", "", "", "", role.RoleId + "", role.RoleName, "");
                    if (Utils.IsError(result))
                    {
                        return result;
                    }


                    dynamic returnItem = new JObject();
                    returnItem.Status = "Success";
                    return returnItem.ToString();
                }


            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        //vaccinations: JArray (name, expiryDate)
        public string UpdateMyDetails(string secretKey, string firstnames, string lastname,
            string contactNumber, string photo, string country, string physicalAddress,
            string passportNumber, string passportExpiryDate, string medicalAidName, string medicalAidNumber, string medicalAidContactNumber,
            string bloodType, string hasAllergy, string allergyDescription, string safetyBootsSize, string highVisibilityVestSize,
            string vaccinations, string emergencyContact1Fullname, string emergencyContact1ContactNumber, string emergencyContact1Relationship,
            string emergencyContact2Fullname, string emergencyContact2ContactNumber, string emergencyContact2Relationship)
        {

            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                firstnames = TrimIfNotNull(firstnames);
                lastname = TrimIfNotNull(lastname);
                contactNumber = TrimIfNotNull(contactNumber);
                photo = TrimIfNotNull(photo);
                country = TrimIfNotNull(country);
                physicalAddress = TrimIfNotNull(physicalAddress);
                passportNumber = TrimIfNotNull(passportNumber);
                passportExpiryDate = TrimIfNotNull(passportExpiryDate);
                medicalAidName = TrimIfNotNull(medicalAidName);
                medicalAidNumber = TrimIfNotNull(medicalAidNumber);
                medicalAidContactNumber = TrimIfNotNull(medicalAidContactNumber);
                bloodType = TrimIfNotNull(bloodType);
                hasAllergy = TrimIfNotNull(hasAllergy);
                allergyDescription = TrimIfNotNull(allergyDescription);
                safetyBootsSize = TrimIfNotNull(safetyBootsSize);
                highVisibilityVestSize = TrimIfNotNull(highVisibilityVestSize);
                vaccinations = TrimIfNotNull(vaccinations);

                //get the ID for the logged in user
                string loggedInUserID = GetUserID(secretKey);
                if (Utils.IsError(loggedInUserID))
                {
                    return loggedInUserID;
                }
                Guid LoggedInUserID;
                if (!Guid.TryParse(loggedInUserID, out LoggedInUserID))
                {
                    return Utils.WrapError("User ID is not in the correct format");
                }

                //validation
                if (string.IsNullOrWhiteSpace(firstnames))
                {
                    return Utils.WrapError("Please ensure that you enter a firstname");
                }

                if (string.IsNullOrWhiteSpace(lastname))
                {
                    return Utils.WrapError("Please ensure that you enter a lastname");
                }

                if (string.IsNullOrWhiteSpace(contactNumber))
                {
                    return Utils.WrapError("Please ensure that you enter a contact number");
                }

                if (string.IsNullOrWhiteSpace(country))
                {
                    return Utils.WrapError("Please ensure that you enter a country");
                }

                if (string.IsNullOrWhiteSpace(physicalAddress))
                {
                    return Utils.WrapError("Please ensure that you enter a physical address");
                }

                if (string.IsNullOrWhiteSpace(emergencyContact1Fullname))
                {
                    return Utils.WrapError("Please ensure that you enter an emergency contact: full name");
                }

                if (string.IsNullOrWhiteSpace(emergencyContact1ContactNumber))
                {
                    return Utils.WrapError("Please ensure that you enter an emergency contact: contact number");
                }

                if (string.IsNullOrWhiteSpace(emergencyContact1Relationship))
                {
                    return Utils.WrapError("Please ensure that you enter an emergency contact: relationship");
                }

                JArray vaccinationsList = null;
                if (!string.IsNullOrWhiteSpace(vaccinations))
                {
                    //parse all values to a json array
                    vaccinationsList = JArray.Parse(vaccinations);
                }

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    var curUser = (from u in entity.aspnet_Membership
                                   where u.UserId == LoggedInUserID
                                   select u).FirstOrDefault();

                    if (curUser == null)
                    {
                        return Utils.WrapError("The user you are trying to update does not exist");
                    }

                    //if there is a photo
                    if (!string.IsNullOrWhiteSpace(photo))
                    {
                        curUser.Photo = Helper.Base64ToBytes(photo);
                    }

                    DateTime PassportExpiryDate;
                    if (!string.IsNullOrWhiteSpace(passportExpiryDate))
                    {
                        if (!DateTime.TryParse(passportExpiryDate, out PassportExpiryDate))
                        {
                            return Utils.WrapError("Please ensure that you enter a passport expiry date in the correct format");
                        }
                        curUser.PassportExpiryDate = PassportExpiryDate;
                    }

                    curUser.Firstnames = firstnames;
                    curUser.Lastname = lastname;
                    curUser.ContactNumber = contactNumber;
                    curUser.Country = country;
                    curUser.PhysicalAddress = physicalAddress;
                    curUser.PassportNumber = passportNumber;
                    curUser.MedicalAidName = medicalAidNumber;
                    curUser.MedicalAidContactNumber = medicalAidContactNumber;
                    curUser.BloodType = bloodType;
                    curUser.EmergencyContact1Fullname = emergencyContact1Fullname;
                    curUser.EmergencyContact1ContactNumber = emergencyContact1ContactNumber;
                    curUser.EmergencyContact1Relationship = emergencyContact1Relationship;
                    curUser.EmergencyContact2Fullname = emergencyContact2Fullname;
                    curUser.EmergencyContact2ContactNumber = emergencyContact2ContactNumber;
                    curUser.EmergencyContact2Relationship = emergencyContact2Relationship;

                    if (!string.IsNullOrWhiteSpace(hasAllergy))
                    {
                        Boolean HasAllergy;
                        if (!Boolean.TryParse(hasAllergy, out HasAllergy))
                        {
                            return Utils.WrapError("Has Allergy is not in the correct format");
                        }
                        curUser.HasAllergy = HasAllergy;

                    }

                    curUser.AllergyDescription = allergyDescription;
                    curUser.SafetyBootsSize = safetyBootsSize;
                    curUser.HighVisibilityVestSize = highVisibilityVestSize;

                    entity.Entry(curUser).State = EntityState.Modified;

                    //retrieve all the values in the list and store in a 2D array
                    //(JArray: name, expiryDate)
                    //cycle through all values
                    if (vaccinationsList != null && vaccinationsList.Count > 0)
                    {

                        var oldVac = (from v in entity.Vaccinations
                                      where v.UserID == LoggedInUserID
                                      select v).ToList();

                        if (oldVac != null)
                        {
                            entity.Vaccinations.RemoveRange(oldVac);
                        }

                        foreach (JObject i in vaccinationsList)
                        {
                            DateTime ExpiryDate;
                            if (!DateTime.TryParse(i.GetValue("expiryDate").ToString(), out ExpiryDate))
                            {
                                return Utils.WrapError("Expiry Date is not in the correct format");
                            }

                            string Name = i.GetValue("name").ToString();

                            var newVac = new Vaccination();
                            newVac.ID = Guid.NewGuid();
                            newVac.VaccinationName = Name;
                            newVac.VaccinationExpiryDate = ExpiryDate;
                            newVac.UserID = LoggedInUserID;
                            entity.Vaccinations.Add(newVac);

                        }

                    }


                    /* TODO 
                    * REMOVE THIS - IT MUST ONLY OCCUR WHEN ALL REQUIRED DOCUMENTS HAVE BEEN UPLOADED AND INFORMATION HAS BEEN ENTERED AS PER PROJECT REQUIREMENTS
                    */

                    //ONLY IF A USER IS ON A PROJECT
                    var projectTeam = (from pt in entity.ProjectTeams
                                       where pt.UserID == LoggedInUserID
                                       select pt).ToList();

                    var projectUser = projectTeam.FirstOrDefault();

                    if (projectUser != null)
                    {
                        var userVaccinations = (from uv in entity.Vaccinations
                                                where uv.UserID == LoggedInUserID
                                                select uv).ToList();

                        var userDocuments = (from ud in entity.Documents
                                             where ud.UserID == LoggedInUserID
                                             select ud).ToList();


                        Guid[] projectList = projectTeam.Select(pt => pt.ProjectID).ToArray();

                        var projects = (from p in entity.Projects
                                        where projectList.Contains(p.ID)
                                        select p).ToList();

                        Project thisProj;
                        bool CompletedRegistration = true;
                        for (int i = 0; i < projects.Count; i++)
                        {
                            thisProj = projects[i];
                            projectUser = projectTeam.FirstOrDefault(pu => pu.ProjectID == thisProj.ID);
                            if (projectUser != null)
                            {
                                #region Emergency contact & Passport
                                if (thisProj.IsEmergencyContactOneRequired.HasValue && thisProj.IsEmergencyContactOneRequired.Value == true)
                                {
                                    if (String.IsNullOrWhiteSpace(curUser.EmergencyContact1ContactNumber))
                                    { CompletedRegistration = false; }
                                }
                                if (thisProj.IsEmergencyContactTwoRequired.HasValue && thisProj.IsEmergencyContactTwoRequired.Value == true)
                                {
                                    if (String.IsNullOrWhiteSpace(curUser.EmergencyContact2ContactNumber))
                                    { CompletedRegistration = false; }
                                }

                                if (thisProj.IsPassportNumberRequired == true)
                                {
                                    if (String.IsNullOrWhiteSpace(curUser.PassportNumber))
                                    { CompletedRegistration = false; }
                                }

                                #endregion

                                #region Medical

                                if (thisProj.IsMedicalAidNameRequired == true)
                                {
                                    if (String.IsNullOrWhiteSpace(curUser.MedicalAidName))
                                    { CompletedRegistration = false; }
                                }

                                if (thisProj.IsMedicalAidNumberRequired == true)
                                {
                                    if (String.IsNullOrWhiteSpace(curUser.MedicalAidNumber))
                                    { CompletedRegistration = false; }
                                }

                                if (thisProj.IsMedicalAidContactNumberRequired == true)
                                {
                                    if (String.IsNullOrWhiteSpace(curUser.MedicalAidContactNumber))
                                    { CompletedRegistration = false; }
                                }

                                if (thisProj.IsBloodTypeRequired == true)
                                {
                                    if (String.IsNullOrWhiteSpace(curUser.BloodType))
                                    { CompletedRegistration = false; }
                                }

                                if (thisProj.IsAllergiesDescriptionRequired == true)
                                {
                                    if (String.IsNullOrWhiteSpace(curUser.AllergyDescription))
                                    { CompletedRegistration = false; }
                                }

                                #endregion

                                #region Protective clothing

                                if (thisProj.IsSafetyBootsRequired == true)
                                {
                                    if (String.IsNullOrWhiteSpace(curUser.SafetyBootsSize))
                                    { CompletedRegistration = false; }
                                }

                                if (thisProj.IsVestRequired == true)
                                {
                                    if (String.IsNullOrWhiteSpace(curUser.HighVisibilityVestSize))
                                    { CompletedRegistration = false; }
                                }
                                #endregion

                                #region Required Documents
                                if (thisProj.IsAccommodationDocRequired.HasValue && thisProj.IsAccommodationDocRequired.Value == true)
                                {
                                    if (userDocuments == null || !userDocuments.Exists(d => d.TypeNumber == (int)docType.AccommodationConfirmation))
                                    { CompletedRegistration = false; }
                                }

                                if (thisProj.IsCustomsClearanceDocRequired.HasValue && thisProj.IsCustomsClearanceDocRequired.Value == true)
                                {
                                    if (userDocuments == null || !userDocuments.Exists(d => d.TypeNumber == (int)docType.CustomsClearanceCertificates))
                                    { CompletedRegistration = false; }
                                }

                                if (thisProj.IsDriversLicenseDocRequired.HasValue && thisProj.IsDriversLicenseDocRequired.Value == true)
                                {
                                    if (userDocuments == null || !userDocuments.Exists(d => d.TypeNumber == (int)docType.DriversLicense))
                                    { CompletedRegistration = false; }
                                }

                                if (thisProj.IsETicketDocRequired.HasValue && thisProj.IsETicketDocRequired.Value == true)
                                {
                                    if (userDocuments == null || !userDocuments.Exists(d => d.TypeNumber == (int)docType.ETickets))
                                    { CompletedRegistration = false; }
                                }

                                if (thisProj.IsPassportDocRequired.HasValue && thisProj.IsPassportDocRequired.Value == true)
                                {
                                    if (userDocuments == null || !userDocuments.Exists(d => d.TypeNumber == (int)docType.Passport))
                                    { CompletedRegistration = false; }
                                }

                                if (thisProj.IsVaccinationDocRequired.HasValue && thisProj.IsVaccinationDocRequired.Value == true)
                                {
                                    if (userDocuments == null || !userDocuments.Exists(d => d.TypeNumber == (int)docType.VaccinationCertificates))
                                    { CompletedRegistration = false; }
                                }

                                if (thisProj.IsVisaDocRequired.HasValue && thisProj.IsVisaDocRequired.Value == true)
                                {
                                    if (userDocuments == null || !userDocuments.Exists(d => d.TypeNumber == (int)docType.VaccinationCertificates))
                                    { CompletedRegistration = false; }
                                }
                                #endregion

                                projectUser.CompletedRegistration = CompletedRegistration;
                                entity.Entry(projectUser).State = EntityState.Modified;
                            }
                        }
                    }

                    /* END TODO */

                    entity.SaveChanges();

                    var curCompany = (from c in entity.CompanyUsers
                                      where c.UserID == LoggedInUserID
                                      select c).FirstOrDefault();

                    string companyID = "";
                    if (curCompany != null)
                    {
                        companyID = curCompany.CompanyID + "";
                    }

                    string result = SendEmail(EmailPurpose.UpdateUser, curUser.Email, companyID, "", "", "", "", "", "", "");
                    if (Utils.IsError(result))
                    {
                        return result;
                    }

                    dynamic returnItem = new JObject();
                    returnItem.Status = "Success";
                    return returnItem.ToString();
                }
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        //user login
        public string Login(string username, string password)
        {
            try
            {
                //remove any extra whitespaces
                username = TrimIfNotNull(username);
                password = TrimIfNotNull(password);

                //validation
                if (string.IsNullOrWhiteSpace(username))
                {
                    return Utils.WrapError("Please ensure that you enter your username");
                }

                if (string.IsNullOrWhiteSpace(password))
                {
                    return Utils.WrapError("Please ensure that you enter your password");
                }

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {

                    //check if the user is valid
                    bool isValidUser = Membership.ValidateUser(username, password);

                    //if user is not  valid
                    if (!isValidUser)
                    {
                        return Utils.WrapError("Please ensure that you enter the correct login credentials");
                    }

                    //get the users id from the secret key
                    Guid UserID = (Guid)Membership.GetUser(username).ProviderUserKey;

                    //check if the user is active and is allowed to use the system
                    var UserIsActive = CheckUserIsActive(UserID + "");
                    if (Utils.IsError(UserIsActive))
                    {
                        return UserIsActive;
                    }

                    //generate a new secret key for the user
                    string secretKey = GenerateSecretKey(username, password);


                    //search for the user
                    var user = (from u in entity.aspnet_Membership
                                where u.UserId == UserID
                                select new
                                {
                                    u.Firstnames,
                                    u.Lastname,
                                    u.Email
                                }).FirstOrDefault();


                    //get the roles for the user
                    var roles = entity.GetRolesForUser(UserID).ToList();

                    if (roles == null)
                    {
                        return Utils.WrapError("No roles assigned to this user");
                    }


                    Guid[] roleIDs = new Guid[roles.Count()];
                    int count = 0;
                    foreach (var r in roles)
                    {
                        roleIDs[count] = r.RoleId;
                        count++;
                    }

                    var userRights = (from rn in entity.ApplicationRightsInRoles
                                      join r in entity.Application_Rights
                                      on rn.ApplicationRightID equals r.ID
                                      where roleIDs.Contains(rn.RoleID.Value)
                                      select new
                                      {
                                          RightID = r.ID,
                                          RightName = r.Name
                                      }).ToList();

                    //start with no company details
                    string curCompany = null;
                    string curCompanyLogoLG = "";
                    string curCompanyLogoSM = "";
                    string curCompanySkin = "";

                    //get the company user
                    var companyUser = (from cu in entity.CompanyUsers
                                       where cu.UserID == UserID
                                       select cu).FirstOrDefault();

                    //if there is a company user
                    if (companyUser != null)
                    {
                        //check if the company user is linked to a company
                        if (companyUser.CompanyID != null)
                        {

                            //get the company
                            var company = (from c in entity.Companies
                                           where c.ID == companyUser.CompanyID
                                           select new
                                           {
                                               compID = c.ID,
                                               compName = c.CompanyName,
                                               selectedSkin = c.SelectedSkin,
                                               c.LogoSM,
                                               LogoLG = c.Logo
                                           }).FirstOrDefault();

                            curCompany = Helper.SerializeToJavascriptOject(company);
                            curCompanyLogoLG = Helper.ImageBytesToBase64(company.LogoLG);
                            curCompanyLogoSM = Helper.ImageBytesToBase64(company.LogoSM);
                            curCompanySkin = company.selectedSkin;
                        }
                    }

                    //check if the user is an admin / rrz admin
                    var IsAdminCheck = CheckUserHasAnyAdminRole(secretKey);
                    bool IsAdmin = false;
                    if (!Utils.IsError(IsAdminCheck))
                    {
                        IsAdmin = true;
                    }

                    //get the most recent verify email request
                    var curVerifyRequest = (from v in entity.VerifyEmailRequests
                                            where v.UserID == UserID
                                            orderby v.DateRequested descending
                                            select v).FirstOrDefault();

                    //start with not verified
                    bool IsEmailVerified = false;
                    //if there is a result
                    if (curVerifyRequest != null)
                    {
                        //if the result has been deleted, the email is verified
                        if (curVerifyRequest.IsDeleted == true)
                        {
                            IsEmailVerified = true;
                        }
                    }

                    //start with no options allowed
                    Boolean Piping = false;
                    Boolean Summing = false;
                    Boolean WhiteLabelling = false;
                    Boolean PhotoCamera = false;
                    Boolean GeoServices = false;
                    Boolean Signatures = false;
                    DateTime PackageExpiryDate;
                    Boolean UniqueID = false;

                    //store the notification message
                    string NotificationMessage = "";

                    //get the current package for the logged in users company
                    var curCompanyPackage = GetCompanyPackageDetails(secretKey);

                    //if the user has a current package, get the details for the package
                    if (!Utils.IsError(curCompanyPackage))
                    {
                        //get the package details out of the returns
                        var curCompanyPackageDetails = JObject.Parse(curCompanyPackage);

                        //parse all the received values
                        if (!Boolean.TryParse(curCompanyPackageDetails.GetValue("Piping").ToString(), out Piping)) { Piping = false; }
                        if (!Boolean.TryParse(curCompanyPackageDetails.GetValue("Summing").ToString(), out Summing)) { Summing = false; }
                        if (!Boolean.TryParse(curCompanyPackageDetails.GetValue("WhiteLabelling").ToString(), out WhiteLabelling)) { WhiteLabelling = false; }
                        if (!Boolean.TryParse(curCompanyPackageDetails.GetValue("PhotoCamera").ToString(), out PhotoCamera)) { PhotoCamera = false; }
                        if (!Boolean.TryParse(curCompanyPackageDetails.GetValue("GeoServices").ToString(), out GeoServices)) { GeoServices = false; }
                        if (!Boolean.TryParse(curCompanyPackageDetails.GetValue("Signatures").ToString(), out Signatures)) { Signatures = false; }
                        if (!Boolean.TryParse(curCompanyPackageDetails.GetValue("UniqueID").ToString(), out UniqueID)) { UniqueID = false; }
                        if (!DateTime.TryParse(curCompanyPackageDetails.GetValue("DateExpires").ToString(), out PackageExpiryDate))
                        {
                            return Utils.WrapError("Your package expiry date could not be determined");
                        }

                        //check if the user has the correct rights to see this message
                        var checkNotificationRights = (from r in userRights
                                                       where r.RightName.Equals("NewPackageSignup") || r.RightName.Equals("GetMyCart") || r.RightName.Equals("Payment")
                                                       select r).ToList();

                        if (checkNotificationRights != null && checkNotificationRights.Count() > 0)
                        {
                            DateTime CurDate = DateTime.Today;

                            //check the package expiry date vs the current date and return an appropriate notification message
                            double DaysLeftOnPackage = (PackageExpiryDate - CurDate).TotalDays;
                            if (DaysLeftOnPackage < 7)
                            {
                                NotificationMessage = "Your current package expires on " + PackageExpiryDate + ". Please renew your package if you would like to continue using Surveya.";
                            }
                        }
                    }

                    //check if the logged in user can mark responses as complete
                    Boolean CanMarkAsComplete = false;
                    var markResponsesAsComplete = (from r in userRights
                                                   where r.RightName.Equals("MarkResponsesAsComplete")
                                                   select r).FirstOrDefault();

                    if (markResponsesAsComplete != null)
                    {
                        CanMarkAsComplete = true;
                    }

                    //check if the logged in user can upload responses
                    Boolean CanUploadResponses = false;
                    var uploadResponses = (from r in userRights
                                           where r.RightName.Equals("UploadResponses")
                                           select r).FirstOrDefault();
                    if (uploadResponses != null)
                    {
                        CanUploadResponses = true;
                    }

                    //get the number of responses that were synced
                    var NumberResponsesSynced = GetSurveyNumberResponsesSynced(UserID + "");

                    //if found
                    dynamic returnUser = new JObject();
                    returnUser.Status = "Success";
                    returnUser.Firstnames = user.Firstnames;
                    returnUser.Lastname = user.Lastname;
                    returnUser.Email = user.Email;
                    returnUser.SecretKey = secretKey;
                    returnUser.Rights = Helper.SerializeToJavascriptOject(userRights);
                    returnUser.Company = curCompany;
                    returnUser.IsAdmin = IsAdmin;
                    returnUser.LogoLG = curCompanyLogoLG;
                    returnUser.LogoSM = curCompanyLogoSM;
                    returnUser.SelectedSkin = curCompanySkin;
                    returnUser.IsEmailVerified = IsEmailVerified;
                    returnUser.Piping = Piping;
                    returnUser.Summing = Summing;
                    returnUser.WhiteLabelling = WhiteLabelling;
                    returnUser.PhotoCamera = PhotoCamera;
                    returnUser.GeoServices = GeoServices;
                    returnUser.Signatures = Signatures;
                    returnUser.UniqueID = UniqueID;
                    returnUser.CanMarkAsComplete = CanMarkAsComplete;
                    returnUser.CanUploadResponses = CanUploadResponses;
                    returnUser.NumberResponsesSynced = NumberResponsesSynced;
                    returnUser.NotificationMessage = NotificationMessage;


                    string skipAuthorizeLogin = (ConfigurationManager.AppSettings["SkipAuthorizeLogin"] == null ? "" : ConfigurationManager.AppSettings["SkipAuthorizeLogin"]);

                    
                    if (string.IsNullOrWhiteSpace(skipAuthorizeLogin) || skipAuthorizeLogin.ToLower() != "true")
                    {
                        var address = GetRequestIPAdress();

                        var authLog = (from auth in entity.AuthorizeLogins
                                       where auth.UserID == UserID && auth.IsDeleted != true
                                       select auth)
                                       .OrderByDescending(au => au.DateRequested)
                                       .FirstOrDefault();

                        var aDayAgo = DateTime.Now.AddDays(-7);
                        if (authLog == null || authLog.IsAuthorized != true || authLog.IPAdress != address || authLog.DateRequested < aDayAgo)
                        {
                            returnUser.MustVerifyLogin = true;
                            RequestAuthorizedLoginEmail(secretKey);
                        }
                        else
                        {
                            returnUser.MustVerifyLogin = false;
                        }
                    }
                    else
                    {
                        returnUser.MustVerifyLogin = false;
                    }

                    return returnUser.ToString();
                }
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        //reauthenticate the logged in user
        public string ReauthenticateUser(string secretKey)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);

                //validation
                if (string.IsNullOrWhiteSpace(secretKey))
                {
                    return Utils.WrapError("Please ensure that you enter your secret key");
                }

                string username = ValidateUser(secretKey);
                if (Utils.IsError(username))
                {
                    return username;
                }

                //get the user that is logged in - based on the secretKey
                Guid loggedInUserID = (Guid)Membership.GetUser(username).ProviderUserKey;

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    //get the users id from the secret key
                    Guid UserID = (Guid)Membership.GetUser(username).ProviderUserKey;

                    //search for the user
                    var user = (from u in entity.aspnet_Membership

                                where u.UserId == UserID
                                select new
                                {
                                    u.Firstnames,
                                    u.Lastname,
                                    u.Email
                                }).FirstOrDefault();

                    //get the users rights
                    //string[] roles = Roles.GetRolesForUser(username);
                    var roles = entity.GetRolesForUser(UserID);

                    if (roles == null)
                    {
                        return Utils.WrapError("No roles assigned to this user");
                    }

                    Guid[] roleIDs = new Guid[roles.Count()];
                    int count = 0;
                    foreach (var r in roles)
                    {
                        roleIDs[count] = r.RoleId;
                        count++;
                    }

                    var userRights = (from u in entity.ApplicationRightsInRoles
                                      join r in entity.Roles
                                      on u.RoleID equals r.RoleId
                                      join rn in entity.Application_Rights
                                      on u.ApplicationRightID equals rn.ID
                                      where roleIDs.Contains(r.RoleId)
                                      select new
                                      {
                                          RightID = rn.ID,
                                          RightName = rn.Name
                                      }).ToList();

                    if (userRights == null || userRights.Count <= 0)
                    {
                        return "[]";
                    }

                    //if found
                    dynamic returnUser = new JObject();
                    returnUser.Status = "Success";
                    returnUser.Firstnames = user.Firstnames;
                    returnUser.Lastname = user.Lastname;
                    returnUser.Email = user.Email;
                    returnUser.SecretKey = secretKey;
                    returnUser.Rights = Helper.SerializeToJavascriptOject(userRights);
                    return returnUser.ToString();
                }
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        //a user changed his own password
        public string ChangeMyPassword(string secretKey, string oldPassword, string newPassword)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                oldPassword = TrimIfNotNull(oldPassword);
                newPassword = TrimIfNotNull(newPassword);

                //get the ID for the logged in user
                string loggedInUserID = GetUserID(secretKey);
                if (Utils.IsError(loggedInUserID))
                {
                    return loggedInUserID;
                }
                Guid LoggedInUserID;
                if (!Guid.TryParse(loggedInUserID, out LoggedInUserID))
                {
                    return Utils.WrapError("User ID is not in the correct format");
                }

                if (string.IsNullOrWhiteSpace(oldPassword))
                {
                    return Utils.WrapError("Please ensure that you enter your old password");
                }

                if (string.IsNullOrWhiteSpace(newPassword))
                {
                    return Utils.WrapError("Please ensure that you enter your new password");
                }
                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {

                    string validationResult = ValidateUser(secretKey);
                    if (Utils.IsError(validationResult))
                    {
                        return validationResult;
                    }
                    string username = validationResult;

                    if (!Membership.ValidateUser(username, oldPassword))
                    {
                        return Utils.WrapError("The old password that was provided is invalid");
                    }

                    //get the user thats logged in
                    MembershipUser theUserToUpdate = Membership.GetUser(username);

                    var userInfo = (from u in entity.aspnet_Membership
                                    where u.UserId == LoggedInUserID
                                    select u).FirstOrDefault();

                    if (userInfo == null)
                    {
                        return Utils.WrapError("The user you are trying to update the password for cannot be found");
                    }

                    theUserToUpdate.UnlockUser();

                    //update the password in the membership table
                    var success = theUserToUpdate.ChangePassword(oldPassword, newPassword);
                    if (!success)
                    {
                        return Utils.WrapError("Your password could not be changed. Please try again later");
                    }

                    //generate a new secret key for the user
                    //string newSecretKey = GenerateSecretKey(username, newPassword);
                    string newSecretKey = GenerateSecretKey(userInfo.Email, newPassword);

                    dynamic returnItem = new JObject();
                    returnItem.Status = "Success";
                    returnItem.SecretKey = newSecretKey;
                    return returnItem.ToString();
                }
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        //a reset a users password within his own company
        public string ResetPassword(string secretKey, string emailAddress)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                emailAddress = TrimIfNotNull(emailAddress);

                //check if you have the right to change the users password
                string username = CheckUserHasRight(secretKey, "ResetPassword");
                if (Utils.IsError(username))
                {
                    return username;
                }

                //check if the user is an administrator
                /*var IsAdmin = CheckUserHasAnyAdminRole(secretKey);

                //if the user is not an admin 
                if (Utils.IsError(IsAdmin))
                {
                    using (Surveya_DevEntities entity = new Surveya_DevEntities())
                    {
                        var userToChange = (from u in entity.aspnet_Membership
                                            join cu in entity.CompanyUsers
                                            on u.UserId equals cu.UserID
                                            where u.Email == emailAddress
                                            select cu).FirstOrDefault();

                        if (userToChange == null)
                        {
                            return Utils.WrapError("User not found");
                        }

                        var userCompany = CheckUserCompany(secretKey, userToChange.CompanyID + "");
                        if (Utils.IsError(userCompany))
                        {
                            return userCompany;
                        }
                    }
                }*/

                #region Check if the logged in user is assuming a company

                //check if the user is assuming a company
                var assumeResult = CheckAssumeCompany(secretKey);
                if (Utils.IsError(assumeResult))
                {
                    return assumeResult;
                }

                //parse the company ID to a Guid
                Guid CompanyID = Guid.Empty;
                if (!Guid.TryParse(assumeResult, out CompanyID))
                {
                    return Utils.WrapError("The ID of the Company that you are trying to view is in the incorrect format");
                }

                #endregion

                //get the ID for the logged in user
                Guid LoggedInUserID = (Guid)Membership.GetUser(username).ProviderUserKey;

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    var LoggedInUserInfo = (from u in entity.aspnet_Membership
                                            where u.UserId == LoggedInUserID
                                            select u).FirstOrDefault();

                    if (LoggedInUserInfo == null)
                    {
                        return Utils.WrapError("User requesting the password reset was not found");
                    }

                    string TheUserRequestingTheReset = LoggedInUserInfo.Firstnames + " " + LoggedInUserInfo.Lastname + " has";

                    var userToChange = (from u in entity.aspnet_Membership
                                        join cu in entity.CompanyUsers
                                        on u.UserId equals cu.UserID
                                        where u.Email == emailAddress && cu.CompanyID == CompanyID
                                        select cu).FirstOrDefault();

                    if (userToChange == null)
                    {
                        return Utils.WrapError("User you are trying to reset the password for was not found in your company");
                    }

                    MembershipUser TheUserToUpdate = Membership.GetUser(emailAddress);
                    /*var TheUserToUpdateInfo = (from u in entity.aspnet_Membership
                                               where u.Email == emailAddress
                                               select u).FirstOrDefault();

                    if (TheUserToUpdateInfo == null)
                    {
                        return Utils.WrapError("User not found");
                    }*/


                    //create a new password
                    string newPassword = Helper.CreatePassword(7, 1, 1, false);

                    string oldPassword = TheUserToUpdate.ResetPassword();

                    //update the password in the membership table
                    bool success = TheUserToUpdate.ChangePassword(oldPassword, newPassword);
                    if (!success)
                    {
                        return Utils.WrapError("The password could not be reset. Please try again later");
                    }
                    TheUserToUpdate.UnlockUser();

                    /*var curCompany = (from c in entity.CompanyUsers
                                      where c.UserID == LoggedInUserInfo.UserId
                                      select c).FirstOrDefault();

                    string companyID = "";
                    if (curCompany != null)
                    {
                        companyID = curCompany.CompanyID + "";
                    }*/

                    entity.SaveChanges();



                    string result = SendEmail(EmailPurpose.PasswordReset, emailAddress, CompanyID + "", "", TheUserRequestingTheReset, newPassword, "", "", "", "");
                    if (Utils.IsError(result))
                    {
                        return result;
                    }

                    dynamic returnItem = new JObject();
                    returnItem.Status = "Success";
                    return returnItem.ToString();

                }
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        //A user can click forgot my password
        public string ForgotMyPassword(string emailAddress)
        {
            try
            {
                //remove any extra whitespaces
                emailAddress = TrimIfNotNull(emailAddress);

                if (string.IsNullOrWhiteSpace(emailAddress))
                {
                    return Utils.WrapError("Please ensure that you enter your email address");
                }

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    MembershipUser TheUserToUpdate = Membership.GetUser(emailAddress);
                    var TheUserToUpdateInfo = (from u in entity.aspnet_Membership
                                               where u.Email == emailAddress
                                               select u).FirstOrDefault();

                    if (TheUserToUpdateInfo == null)
                    {
                        return Utils.WrapError("User not found");
                    }

                    var curCompany = (from m in entity.aspnet_Membership
                                      join c in entity.CompanyUsers
                                      on m.UserId equals c.UserID
                                      where m.Email == emailAddress
                                      select c).FirstOrDefault();

                    string companyID = "";
                    if (curCompany != null)
                    {
                        companyID = curCompany.CompanyID + "";
                    }

                    //delete the old reset if there are any
                    var oldResets = (from r in entity.ResetPasswordRequests
                                     where r.UserID == TheUserToUpdateInfo.UserId
                                     select r).ToList();

                    if (oldResets != null && oldResets.Count() > 0)
                    {
                        foreach (var r in oldResets)
                        {
                            r.IsDeleted = true;
                            entity.Entry(r).State = EntityState.Modified;
                        }
                        entity.SaveChanges();
                    }

                    var newReset = new ResetPasswordRequest();
                    Guid newResetID = Guid.NewGuid();
                    newReset.ID = newResetID;
                    newReset.UserID = TheUserToUpdateInfo.UserId;
                    newReset.DateRequested = DateTime.Now;
                    newReset.IsDeleted = false;
                    entity.ResetPasswordRequests.Add(newReset);
                    entity.SaveChanges();

                    string result = SendEmail(EmailPurpose.ForgotMyPassword, TheUserToUpdateInfo.Email, companyID, "", "You have", "", "", "", "", newResetID + "");
                    if (Utils.IsError(result))
                    {
                        return result;
                    }

                    dynamic returnItem = new JObject();
                    returnItem.Status = "Success";
                    return returnItem.ToString();

                }
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        //A user can reset his own password
        public string ResetMyPassword(string resetID, string newPassword)
        {
            try
            {
                //remove any extra whitespaces
                resetID = TrimIfNotNull(resetID);
                newPassword = TrimIfNotNull(newPassword);

                if (string.IsNullOrWhiteSpace(newPassword))
                {
                    return Utils.WrapError("Please ensure that you enter your new password");
                }

                Guid ResetID;
                if (!Guid.TryParse(resetID, out ResetID))
                {
                    return Utils.WrapError("Reset ID is not in the correct format");
                }

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    var curResetLink = (from r in entity.ResetPasswordRequests
                                        where r.ID == ResetID
                                        select r).FirstOrDefault();

                    if (curResetLink == null)
                    {
                        return Utils.WrapError("Please ensure that you are using a valid link to reset your password");
                    }
                    if (curResetLink.IsDeleted)
                    {
                        return Utils.WrapError("You have already used this link to reset your password. Please request a new link");
                    }
                    if (curResetLink.DateRequested.AddHours(24) < DateTime.Now)
                    {
                        return Utils.WrapError("Your link has expired. Please request a new link");
                    }

                    var TheUserToUpdateInfo = (from u in entity.aspnet_Membership
                                               where u.UserId == curResetLink.UserID
                                               select u).FirstOrDefault();

                    if (TheUserToUpdateInfo == null)
                    {
                        return Utils.WrapError("The user you are trying to reset the password for does not exist");
                    }


                    MembershipUser TheUserToUpdate = Membership.GetUser(TheUserToUpdateInfo.Email);
                    TheUserToUpdate.UnlockUser();

                    //reset to a temp password
                    string tempPassword = TheUserToUpdate.ResetPassword();

                    //update the password in the membership table
                    bool updated = TheUserToUpdate.ChangePassword(tempPassword, newPassword);

                    if (!updated)
                    {
                        return Utils.WrapError("The users password could not be updated. Please try again later");
                    }

                    curResetLink.IsDeleted = true;
                    entity.Entry(curResetLink).State = EntityState.Modified;
                    entity.SaveChanges();

                    var curCompany = (from m in entity.aspnet_Membership
                                      join c in entity.CompanyUsers
                                      on m.UserId equals c.UserID
                                      where m.Email == TheUserToUpdateInfo.Email
                                      select c).FirstOrDefault();

                    string companyID = "";
                    if (curCompany != null)
                    {
                        companyID = curCompany.CompanyID + "";
                    }

                    string result = SendEmail(EmailPurpose.ResetMyPassword, TheUserToUpdateInfo.Email, companyID, "", "You have", newPassword, "", "", "", "");
                    if (Utils.IsError(result))
                    {
                        return result;
                    }

                    dynamic returnItem = new JObject();
                    returnItem.Status = "Success";
                    return returnItem.ToString();

                }
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        //deactivate a user
        public string DeactivateUser(string secretKey, string userID)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                userID = TrimIfNotNull(userID);

                string username = CheckUserHasRight(secretKey, "DeactivateUser");
                if (Utils.IsError(username))
                {
                    return username;
                }

                Guid UserID;
                if (!Guid.TryParse(userID, out UserID))
                {
                    return Utils.WrapError("User ID is not in the correct format");
                }

                //convert the company id received
                /*Guid CompanyID;
                if (!Guid.TryParse(companyID, out CompanyID))
                {
                    return Utils.WrapError("Company ID is not in the correct format");
                }
                //check if the user is an administrator
                var IsAdmin = CheckUserHasAnyAdminRole(secretKey);

                //if the user is not an admin 
                if (Utils.IsError(IsAdmin))
                {
                    var userCompany = CheckUserCompany(secretKey, companyID);
                    if (Utils.IsError(userCompany))
                    {
                        return userCompany;
                    }
                }*/

                #region Check if the logged in user is assuming a company

                //check if the user is assuming a company
                var assumeResult = CheckAssumeCompany(secretKey);
                if (Utils.IsError(assumeResult))
                {
                    return assumeResult;
                }

                //parse the company ID to a Guid
                Guid CompanyID = Guid.Empty;
                if (!Guid.TryParse(assumeResult, out CompanyID))
                {
                    return Utils.WrapError("The ID of the Company that you are trying to view is in the incorrect format");
                }

                #endregion

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    //get the user
                    var theUser = (from u in entity.aspnet_Membership
                                   where u.UserId == UserID
                                   select u).FirstOrDefault();

                    if (theUser == null)
                    {
                        return Utils.WrapError("The User you are trying to delete does not exist");
                    }


                    //get the ID for the logged in user
                    Guid LoggedInUserID = (Guid)Membership.GetUser(username).ProviderUserKey;

                    if (LoggedInUserID == theUser.UserId)
                    {
                        return Utils.WrapError("You cannot deactivate yourself");
                    }

                    theUser.IsActive = false;
                    entity.Entry(theUser).State = EntityState.Modified;
                    entity.SaveChanges();

                }

                dynamic returnItem = new JObject();
                returnItem.Status = "Success";
                return returnItem.ToString();
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        //reactivate a user
        public string ReactivateUser(string secretKey, string userID)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                userID = TrimIfNotNull(userID);

                string username = CheckUserHasRight(secretKey, "ReactivateUser");
                if (Utils.IsError(username))
                {
                    return username;
                }

                Guid UserID;
                if (!Guid.TryParse(userID, out UserID))
                {
                    return Utils.WrapError("User ID is not in the correct format");
                }

                //convert the company id received
                /*Guid CompanyID;
                if (!Guid.TryParse(companyID, out CompanyID))
                {
                    return Utils.WrapError("Company ID is not in the correct format");
                }


                //check if the user is an administrator
                var IsAdmin = CheckUserHasAnyAdminRole(secretKey);

                //if the user is not an admin 
                if (Utils.IsError(IsAdmin))
                {
                    var userCompany = CheckUserCompany(secretKey, companyID);
                    if (Utils.IsError(userCompany))
                    {
                        return userCompany;
                    }
                }*/

                #region Check if the logged in user is assuming a company

                //check if the user is assuming a company
                var assumeResult = CheckAssumeCompany(secretKey);
                if (Utils.IsError(assumeResult))
                {
                    return assumeResult;
                }

                //parse the company ID to a Guid
                Guid CompanyID = Guid.Empty;
                if (!Guid.TryParse(assumeResult, out CompanyID))
                {
                    return Utils.WrapError("The ID of the Company that you are trying to view is in the incorrect format");
                }

                #endregion

                //check if the company is allowed to add more users
                var packageResult = CheckCompanyPackageNoUsers(CompanyID + "");
                if (Utils.IsError(packageResult))
                {
                    return packageResult;
                }

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    //get the user
                    var theUser = (from u in entity.aspnet_Membership
                                   where u.UserId == UserID
                                   select u).FirstOrDefault();

                    if (theUser == null)
                    {
                        return Utils.WrapError("The User you are trying to reactivate does not exist");
                    }

                    theUser.IsActive = true;
                    theUser.DateActivated = DateTime.Now;
                    entity.Entry(theUser).State = EntityState.Modified;
                    entity.SaveChanges();
                }

                dynamic returnItem = new JObject();
                returnItem.Status = "Success";
                return returnItem.ToString();
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        //retrieve a specific user
        public string GetUserDetails(string secretKey, string theUserID)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                theUserID = TrimIfNotNull(theUserID);

                var username = CheckUserHasRight(secretKey, "GetUserDetails");
                if (Utils.IsError(username))
                {
                    return username;
                }


                //check if the user is an administrator
                /*var IsAdmin = CheckUserHasAnyAdminRole(secretKey);

                //if the user is not an admin 
                if (Utils.IsError(IsAdmin))
                {
                    var userCompany = CheckUserCompany(secretKey, companyID);
                    if (Utils.IsError(userCompany))
                    {
                        return userCompany;
                    }
                }

                //convert the company id received
                Guid CompanyID;
                if (!Guid.TryParse(companyID, out CompanyID))
                {
                    return Utils.WrapError("Company ID is not in the correct format");
                }*/

                Guid TheUserID;
                if (!Guid.TryParse(theUserID, out TheUserID))
                {
                    return Utils.WrapError("User ID is in the incorrect format");
                }

                #region Check if the logged in user is assuming a company

                //check if the user is assuming a company
                var assumeResult = CheckAssumeCompany(secretKey);
                if (Utils.IsError(assumeResult))
                {
                    return assumeResult;
                }

                //parse the company ID to a Guid
                Guid CompanyID = Guid.Empty;
                if (!Guid.TryParse(assumeResult, out CompanyID))
                {
                    return Utils.WrapError("The ID of the Company that you are trying to view is in the incorrect format");
                }

                #endregion

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {

                    var user = (from u in entity.aspnet_Membership
                                join cu in entity.CompanyUsers
                                on u.UserId equals cu.UserID
                                where u.UserId == TheUserID && cu.CompanyID == CompanyID
                                select new
                                {
                                    u.Firstnames,
                                    u.Lastname,
                                    u.ContactNumber,
                                    u.Email,
                                    u.Photo,
                                    u.Country,
                                    u.PhysicalAddress,
                                    u.city,
                                    u.postalCode,
                                    u.PassportNumber,
                                    u.PassportExpiryDate,
                                    u.MedicalAidName,
                                    u.MedicalAidNumber,
                                    u.MedicalAidContactNumber,
                                    u.BloodType,
                                    u.HasAllergy,
                                    u.AllergyDescription,
                                    u.SafetyBootsSize,
                                    u.HighVisibilityVestSize,
                                    cu.CompanyID,
                                    cu.RoleID,
                                    u.EmergencyContact1Fullname,
                                    u.EmergencyContact1ContactNumber,
                                    u.EmergencyContact1Relationship,
                                    u.EmergencyContact2Fullname,
                                    u.EmergencyContact2ContactNumber,
                                    u.EmergencyContact2Relationship,
                                    IsActive = u.IsActive
                                }).FirstOrDefault();

                    if (user == null)
                    {
                        return Utils.WrapError("No user found");
                    }

                    return Helper.SerializeToJavascriptOject(user);
                }

            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        //retrieve my details
        public string GetMyDetails(string secretKey)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);

                //get the ID for the logged in user
                string loggedInUserID = GetUserID(secretKey);
                if (Utils.IsError(loggedInUserID))
                {
                    return loggedInUserID;
                }
                Guid LoggedInUserID;
                if (!Guid.TryParse(loggedInUserID, out LoggedInUserID))
                {
                    return Utils.WrapError("User ID is not in the correct format");
                }

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {

                    var user = (from u in entity.aspnet_Membership
                                where u.UserId == LoggedInUserID
                                select new
                                {
                                    u.Firstnames,
                                    u.Lastname,
                                    u.ContactNumber,
                                    u.Email,
                                    u.Photo,
                                    u.Country,
                                    u.PhysicalAddress,
                                    u.city,
                                    u.postalCode,
                                    u.PassportNumber,
                                    u.PassportExpiryDate,
                                    u.MedicalAidName,
                                    u.MedicalAidNumber,
                                    u.MedicalAidContactNumber,
                                    u.BloodType,
                                    u.HasAllergy,
                                    u.AllergyDescription,
                                    u.SafetyBootsSize,
                                    u.HighVisibilityVestSize,
                                    u.EmergencyContact1Fullname,
                                    u.EmergencyContact1ContactNumber,
                                    u.EmergencyContact1Relationship,
                                    u.EmergencyContact2Fullname,
                                    u.EmergencyContact2ContactNumber,
                                    u.EmergencyContact2Relationship
                                }).FirstOrDefault();

                    if (user == null)
                    {
                        return Utils.WrapError("No user found");
                    }

                    var vaccinations = (from u in entity.Vaccinations
                                        where u.UserID == LoggedInUserID
                                        select new
                                        {
                                            u.ID,
                                            u.VaccinationName,
                                            u.VaccinationExpiryDate
                                        }).ToList();


                    dynamic returnItem = new JObject();
                    returnItem.Status = "Success";
                    returnItem.User = Helper.SerializeToJavascriptOject(user);
                    returnItem.Vaccinations = Helper.SerializeToJavascriptOject(vaccinations);
                    return returnItem.ToString();
                }

            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        public string VerifyEmailAddress(string verifyID)
        {
            Guid VerifyID;
            if (!Guid.TryParse(verifyID, out VerifyID))
            {
                return Utils.WrapError("Verify ID is not in the correct format");
            }

            using (Surveya_DevEntities entity = new Surveya_DevEntities())
            {
                var curVerifyRequest = (from v in entity.VerifyEmailRequests
                                        where v.ID == VerifyID
                                        select v).FirstOrDefault();

                if (curVerifyRequest == null)
                {
                    return Utils.WrapError("Please ensure that you are using a valid link to verify your email address");
                }

                //if the link has expired
                if (curVerifyRequest.DateRequested.AddDays(7) < DateTime.Now)
                {
                    return Utils.WrapError("Your link has expired. Please request a new link from your company");
                }

                if (curVerifyRequest.IsDeleted)
                {
                    return Utils.WrapError("You have already used this link to verify your email address");
                }

                var curUser = (from u in entity.aspnet_Membership
                               join cu in entity.CompanyUsers
                               on u.UserId equals cu.UserID
                               where u.UserId == curVerifyRequest.UserID
                               select new
                               {
                                   u.Email,
                                   CompanyID = cu.CompanyID
                               }).FirstOrDefault();

                if (curUser == null)
                {
                    return Utils.WrapError("The user you are trying to verify the email address for could not be found");
                }

                curVerifyRequest.IsDeleted = true;
                entity.VerifyEmailRequests.Add(curVerifyRequest);
                entity.Entry(curVerifyRequest).State = EntityState.Modified;
                entity.SaveChanges();
                SendEmail(EmailPurpose.VerifiedEmailAddress, curUser.Email, curUser.CompanyID + "", "", "", "", "", "", "", "");

            }

            dynamic returnItem = new JObject();
            returnItem.Status = "Success";
            return returnItem.ToString();
        }

        public string AuthorizeLoginAttempt(string secretKey, string code)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);

                //get the ID for the logged in user
                string loggedInUserID = GetUserID(secretKey);
                if (Utils.IsError(loggedInUserID))
                {
                    return loggedInUserID;
                }
                Guid LoggedInUserID;
                if (!Guid.TryParse(loggedInUserID, out LoggedInUserID))
                {
                    return Utils.WrapError("User ID is not in the correct format");
                }

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    var user = (from u in entity.aspnet_Membership
                                join cu in entity.CompanyUsers
                                on u.UserId equals cu.UserID
                                where u.UserId == LoggedInUserID
                                select new
                                {
                                    u.Email,
                                    cu.CompanyID
                                }).FirstOrDefault();

                    if (user == null)
                    {
                        return Utils.WrapError("The user you are trying to authorize could not be found");
                    }

                    var authLog = (from auth in entity.AuthorizeLogins
                                   where auth.UserID == LoggedInUserID && auth.IsDeleted != true
                                   select auth)
                                   .FirstOrDefault();

                    var aDayAgo = DateTime.Now.AddDays(-1);
                    if (authLog == null || authLog.IsDeleted == true || authLog.DateRequested < aDayAgo)
                    {
                        return Utils.WrapError("This authorization request has expired");
                    }

                    if (authLog.Code != code.Trim())
                    {
                        return Utils.WrapError("The code you entered is not valid. Please re-enter your code");
                    }

                    authLog.IsDeleted = true;
                    entity.Entry(authLog).State = EntityState.Modified;
                    entity.SaveChanges();
                }

                dynamic returnItem = new JObject();
                returnItem.Status = "Success";
                return returnItem.ToString();
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        public string RequestAuthorizedLoginEmail(string secretKey)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);

                //get the ID for the logged in user
                string loggedInUserID = GetUserID(secretKey);
                if (Utils.IsError(loggedInUserID))
                {
                    return loggedInUserID;
                }
                Guid LoggedInUserID;
                if (!Guid.TryParse(loggedInUserID, out LoggedInUserID))
                {
                    return Utils.WrapError("User ID is not in the correct format");
                }

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    var user = (from u in entity.aspnet_Membership
                                join cu in entity.CompanyUsers
                                on u.UserId equals cu.UserID
                                where u.UserId == LoggedInUserID
                                select new
                                {
                                    u.Email,
                                    cu.CompanyID,
                                    u.ContactNumber
                                }).FirstOrDefault();

                    if (user == null)
                    {
                        return Utils.WrapError("The user you are trying to verify could not be found");
                    }

                    var authLog = (from auth in entity.AuthorizeLogins
                                   where auth.UserID == LoggedInUserID && auth.IsDeleted != true
                                   select auth)
                                   .FirstOrDefault();

                    var aDayAgo = DateTime.Now.AddDays(-1);
                    if (authLog != null)
                    {
                        authLog.IsDeleted = true;
                        entity.Entry(authLog).State = EntityState.Modified;
                        entity.SaveChanges();
                    }

                    string address = GetRequestIPAdress();
                    var r = new Random();
                    string AuthorizeLoginCode = r.Next(100000, 999999).ToString();

                    //add a new request for the email to be verified
                    var newAuthLoginReq = new AuthorizeLogin();
                    Guid RequestID = Guid.NewGuid();
                    newAuthLoginReq.ID = RequestID;
                    newAuthLoginReq.DateRequested = DateTime.Now;
                    newAuthLoginReq.UserID = LoggedInUserID;
                    newAuthLoginReq.IPAdress = address;
                    newAuthLoginReq.Code = AuthorizeLoginCode;
                    newAuthLoginReq.IsAuthorized = false;
                    newAuthLoginReq.IsDeleted = false;
                    entity.AuthorizeLogins.Add(newAuthLoginReq);

                    entity.SaveChanges();

                    string emailResponse = "";
                    string smsResponse = "";

                    if (!string.IsNullOrEmpty(user.Email))
                    {
                        //send a email to the new team member
                        emailResponse = SendEmail(EmailPurpose.AuthorizeLogin, user.Email, user.CompanyID + "", "", "", AuthorizeLoginCode, "", "", "", address);
                        if (Utils.IsError(emailResponse))
                        {
                            return emailResponse;
                        }
                    }
                    /*
                    else if (string.IsNullOrEmpty(user.ContactNumber) || Utils.IsError(emailResponse))
                    {
                        smsResponse = SendSMS(user.ContactNumber, AuthorizeLoginCode, RequestID + "", "Authorize", LoggedInUserID + "");
                        if (Utils.IsError(smsResponse))
                        {
                            return smsResponse;
                        }
                    }
                    */
                }

                dynamic returnItem = new JObject();
                returnItem.Status = "Success";
                return returnItem.ToString();
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        private string SendSMS(string cellNumber, string message, string relatedID, string type, string userid)
        {
            var section = ConfigurationManager.GetSection("system.net/mailSettings/smtp") as SmtpSection;


            string smsApiBaseUrl = ConfigurationManager.AppSettings["APIBaseUrl"] != null ? ConfigurationManager.AppSettings["APIBaseUrl"].ToString() : ""; ;
            string smsApiSecret = ConfigurationManager.AppSettings["APISecret"] != null ? ConfigurationManager.AppSettings["APISecret"].ToString() : ""; ;
            string smsClientID = ConfigurationManager.AppSettings["ClientID"] != null ? ConfigurationManager.AppSettings["ClientID"].ToString() : ""; ;
            string smsCreditsEmail = ConfigurationManager.AppSettings["SMSCreditsEmail"] != null ? ConfigurationManager.AppSettings["SMSCreditsEmail"].ToString() : ""; ;
            string smsFooterText = ConfigurationManager.AppSettings["SMSFooterText"] != null ? ConfigurationManager.AppSettings["SMSFooterText"].ToString() : ""; ;


            bool includeSMSFooterAlways = false;
            if (!Boolean.TryParse(ConfigurationManager.AppSettings["IncludeSMSFooterAlways"] != null ? ConfigurationManager.AppSettings["IncludeSMSFooterAlways"].ToString() : "", out includeSMSFooterAlways))
            { }


            bool includeSMSFooterIfSpace = false;
            if (!Boolean.TryParse(ConfigurationManager.AppSettings["IncludeSMSFooterIfSpace"] != null ? ConfigurationManager.AppSettings["IncludeSMSFooterIfSpace"].ToString() : "", out includeSMSFooterAlways))
            { }


            bool smsTestMode = false;
            if (!Boolean.TryParse(ConfigurationManager.AppSettings["TestMode"] != null ? ConfigurationManager.AppSettings["TestMode"].ToString() : "", out smsTestMode))
            { }


            string logFilePath = ConfigurationManager.AppSettings["LogFilePath"];
            string emailTemplateBasePath = ConfigurationManager.AppSettings["EmailTemplateBasePath"].ToString();
            string overrideEmailAddress = ConfigurationManager.AppSettings["OverrideEmailAddress"] != null ? ConfigurationManager.AppSettings["OverrideEmailAddress"].ToString() : "";
            string emailSenderName = !string.IsNullOrWhiteSpace(section.From) ? section.From : (ConfigurationManager.AppSettings["AppName"] != null ? ConfigurationManager.AppSettings["AppName"].ToString() : "");
            string emailMailServer = section.Network.Host;
            int emailPort = section.Network.Port;
            string emailSender = section.Network.UserName;
            string emailPassword = section.Network.Password;
            string bCCEmailAddress = "";// ConfigurationManager.AppSettings["SurveyaSignupEmailAddress"] != null ? ConfigurationManager.AppSettings["SurveyaSignupEmailAddress"].ToString() : "";
            string companyLogoURL = ConfigurationManager.AppSettings["defaultLogoPath"] != null ? ConfigurationManager.AppSettings["defaultLogoPath"].ToString() : "";
            string appName = ConfigurationManager.AppSettings["AppName"] != null ? ConfigurationManager.AppSettings["AppName"].ToString() : "";

            string smsText = ConfigurationManager.AppSettings["SMS_AuthorizeLogin"] != null ? ConfigurationManager.AppSettings["SMS_AuthorizeLogin"].ToString() : "";
            smsText = smsText.Replace("[Code]", message);


            // Helper.LogMessage(null, null, null, "to : " + curOrder.UserCellNumber + " smsText " + smsText);

            RRZ_SMS SMS = new RRZ_SMS(

                /* SMS Settings */
                smsApiBaseUrl, smsApiSecret, smsClientID, smsCreditsEmail,
                smsFooterText, includeSMSFooterAlways, includeSMSFooterIfSpace, smsTestMode,

                /* Email Settings*/
                logFilePath, emailTemplateBasePath, overrideEmailAddress, emailSenderName, emailMailServer, emailPort,
                emailSender, emailPassword, bCCEmailAddress,

                /* App Settings*/
                companyLogoURL, appName);



            //var smsResponse = SMS.SendSMS(cellNumber, smsText, relatedID, type, userid);
            var smsResponse = SMS.SendSMS(cellNumber, smsText, relatedID, type, userid);
            Helper.LogMessage("SMS " + smsResponse);

            return smsResponse;
        }

        private static string GetRequestIPAdress()
        {
            /*OperationContext context = OperationContext.Current;
            MessageProperties properties = context.IncomingMessageProperties;
            RemoteEndpointMessageProperty endpoint = properties[RemoteEndpointMessageProperty.Name] as RemoteEndpointMessageProperty;
            string address = string.Empty;
            //http://www.simosh.com/article/ddbggghj-get-client-ip-address-using-wcf-4-5-remoteendpointmessageproperty-in-load-balanc.html
            if (properties.Keys.Contains(HttpRequestMessageProperty.Name))
            {
                HttpRequestMessageProperty endpointLoadBalancer = properties[HttpRequestMessageProperty.Name] as HttpRequestMessageProperty;
                if (endpointLoadBalancer != null && endpointLoadBalancer.Headers["X-Forwarded-For"] != null)
                    address = endpointLoadBalancer.Headers["X-Forwarded-For"];
            }
            if (string.IsNullOrEmpty(address))
            {
                address = endpoint.Address;
            }

            return address;
            */

            // creating object of service when request comes   
            OperationContext context = OperationContext.Current;
            //Getting Incoming Message details   
            MessageProperties prop = context.IncomingMessageProperties;
            //Getting client endpoint details from message header   
            RemoteEndpointMessageProperty endpoint = prop[RemoteEndpointMessageProperty.Name] as RemoteEndpointMessageProperty;
            return endpoint.Address;
        }

        public string RequestVerifyEmailAddress(string secretKey)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);

                //get the ID for the logged in user
                string loggedInUserID = GetUserID(secretKey);
                if (Utils.IsError(loggedInUserID))
                {
                    return loggedInUserID;
                }
                Guid LoggedInUserID;
                if (!Guid.TryParse(loggedInUserID, out LoggedInUserID))
                {
                    return Utils.WrapError("User ID is not in the correct format");
                }

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    var user = (from u in entity.aspnet_Membership
                                join cu in entity.CompanyUsers
                                on u.UserId equals cu.UserID
                                where u.UserId == LoggedInUserID
                                select new
                                {
                                    u.Email,
                                    cu.CompanyID
                                }).FirstOrDefault();

                    if (user == null)
                    {
                        return Utils.WrapError("The user you are trying to verify could not be found");
                    }

                    //add a new request for the email to be verified
                    var newVerifyRequest = new VerifyEmailRequest();
                    Guid RequestID = Guid.NewGuid();
                    newVerifyRequest.ID = RequestID;
                    newVerifyRequest.DateRequested = DateTime.Now;
                    newVerifyRequest.UserID = LoggedInUserID;
                    newVerifyRequest.IsDeleted = false;
                    entity.VerifyEmailRequests.Add(newVerifyRequest);

                    entity.SaveChanges();

                    //send a email to the new team member
                    var result = SendEmail(EmailPurpose.VerifyEmailRequest, user.Email, user.CompanyID + "", "", "", "", "", "", "", RequestID + "");
                    if (Utils.IsError(result))
                    {
                        return result;
                    }
                }

                dynamic returnItem = new JObject();
                returnItem.Status = "Success";
                return returnItem.ToString();
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        //get the username for the provided secret key
        public string GetUser(string secretKey)
        {
            string username = "undefined";
            try
            {
                //decrypt the string to get the username and password.
                string decryptedInformation = Utils.Decrypt(secretKey);
                string[] userInformation = decryptedInformation.Split(new string[] { "</>" }, StringSplitOptions.None);
                if (userInformation.Length == 3)
                {
                    if (!string.IsNullOrWhiteSpace(userInformation[1]))
                    {
                        username = userInformation[1];
                    }

                    if (Membership.ValidateUser(userInformation[1], userInformation[2]))
                    {
                        //return userInformation[1];
                        return Membership.GetUser(userInformation[1]).ProviderUserKey.ToString();
                    }
                    else
                    {
                        return Utils.WrapError("Authentication Failed.");
                    }
                }
                else
                {
                    return Utils.WrapError("Authentication failed, invalid secret key.");
                }

            }
            catch (Exception ee)
            {
                Helper.LogError(username + "-" + ee.Message, ee.StackTrace);
                return Utils.WrapError("Authentication failed:" + ee.Message);
            }
        }

        #endregion

        #region Rights and Roles

        //add a new role
        //add the specified rights of a specified role 
        //rights (JArray: id) 
        public string AddRole(string secretKey, string roleName, string roleDescription, string rights)
        {
            try
            {

                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                roleName = TrimIfNotNull(roleName);
                rights = TrimIfNotNull(rights);
                roleDescription = TrimIfNotNull(roleDescription);

                var username = CheckUserHasRight(secretKey, "AddRole");
                if (Utils.IsError(username))
                {
                    return username;
                }

                if (string.IsNullOrWhiteSpace(roleName))
                {
                    return Utils.WrapError("Please ensure that you enter a role name");
                }

                //convert the company id received
                /*Guid CompanyID;
                if (!Guid.TryParse(companyID, out CompanyID))
                {
                    return Utils.WrapError("Company ID is not in the correct format");
                }
                //check if the user is an administrator
                var IsAdmin = CheckUserHasAnyAdminRole(secretKey);

                //if the user is not an admin 
                if (Utils.IsError(IsAdmin))
                {
                    var userCompany = CheckUserCompany(secretKey, companyID);
                    if (Utils.IsError(userCompany))
                    {
                        return userCompany;
                    }
                }*/
                //check if the new role already exists
                /* if (Roles.RoleExists(roleName))
                 {
                     return Utils.WrapError("The role you are trying to add already exists");
                 }*/

                //parse all rights to a json array
                JArray rightsList = null;
                if (!string.IsNullOrWhiteSpace(rights))
                {
                    rightsList = JArray.Parse(rights);
                }
                if (rightsList == null || rightsList.Count <= 0)
                {
                    return Utils.WrapError("No rights found for adding");
                }

                //retrieve all the id's in the list
                Guid[] rightIDs = new Guid[rightsList.Count];
                int count = 0;
                foreach (JObject i in rightsList)
                {
                    if (!Guid.TryParse(i.GetValue("id").ToString(), out rightIDs[count]))
                    {
                        return Utils.WrapError("There are rights that are not in the correct format");
                    }
                    count++;
                }

                #region Check if the logged in user is assuming a company

                //check if the user is assuming a company
                var assumeResult = CheckAssumeCompany(secretKey);
                if (Utils.IsError(assumeResult))
                {
                    return assumeResult;
                }

                //parse the company ID to a Guid
                Guid CompanyID = Guid.Empty;
                if (!Guid.TryParse(assumeResult, out CompanyID))
                {
                    return Utils.WrapError("The ID of the Company that you are trying to view is in the incorrect format");
                }

                #endregion

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {

                    //check if the role name they are trying to add is one of the system roles
                    var curSysRoles = (from r in entity.Roles
                                       where r.CompanyID == null && r.IsSysRole == true
                                       && r.LoweredRoleName == roleName.ToLower()
                                       select r).FirstOrDefault();

                    if (curSysRoles != null)
                    {
                        return Utils.WrapError("You cannot use the specified role name as it is reserved for a System Role");
                    }

                    var roleExists = (from r in entity.Roles
                                      where r.LoweredRoleName == roleName.ToLower() && r.CompanyID == CompanyID
                                      select r).FirstOrDefault();

                    if (roleExists != null)
                    {
                        return Utils.WrapError("This role name already exists within your company");
                    }

                    Guid RoleID = Guid.NewGuid();

                    var param = new ObjectParameter("result", typeof(string));

                    entity.CreateRole(RoleID, roleName, roleDescription, CompanyID, false, true, param);

                    if (param.Value.ToString() != "1")
                    {
                        return Utils.WrapError(param.Value.ToString());
                    }

                    //check if the rights exist
                    var curRights = (from r in entity.Application_Rights
                                     where rightIDs.Contains(r.ID)
                                     select r).ToList();


                    if (curRights == null && curRights.Count <= 0)
                    {
                        return "[]";
                    }

                    //check if there are currently rights assigned
                    var curRightsInRoles = (from r in entity.ApplicationRightsInRoles
                                            where r.RoleID == RoleID
                                            select r).ToList();

                    //if there are - remove them
                    if (curRightsInRoles != null || curRightsInRoles.Count <= 0)
                    {
                        //remove all the items that match
                        curRightsInRoles.RemoveRange(0, curRightsInRoles.Count);
                    }

                    //get the ID for the logged in user
                    Guid LoggedInUserID = (Guid)Membership.GetUser(username).ProviderUserKey;

                    //cycle through all the rights to add
                    foreach (Guid rightID in rightIDs)
                    {
                        //create a new right
                        var newRightInRole = new ApplicationRightsInRole();
                        newRightInRole.ID = Guid.NewGuid();
                        newRightInRole.RoleID = RoleID;
                        newRightInRole.ApplicationRightID = rightID;
                        newRightInRole.DateAssigned = DateTime.Now;
                        newRightInRole.UserAssigned = LoggedInUserID;
                        newRightInRole.DateUpdated = DateTime.Now;
                        newRightInRole.LastUserUpdated = LoggedInUserID;

                        entity.ApplicationRightsInRoles.Add(newRightInRole);

                    }
                    entity.SaveChanges();
                }

                dynamic returnItem = new JObject();
                returnItem.Status = "Success";
                return returnItem.ToString();
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        //update the specified rights of a specified role 
        //rights (JArray: id) 
        public string UpdateRole(string secretKey, string roleID, string roleName, string roleDescription, string rights)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                roleID = TrimIfNotNull(roleID);
                roleName = TrimIfNotNull(roleName);
                roleDescription = TrimIfNotNull(roleDescription);
                rights = TrimIfNotNull(rights);

                var username = CheckUserHasRight(secretKey, "UpdateRole");
                if (Utils.IsError(username))
                {
                    return username;
                }

                //check if the user is an administrator
                var IsAdmin = CheckUserHasAnyAdminRole(secretKey);
                //var IsRRZAdmin = CheckUserHasRRZAdminRole(secretKey);

                //if the user is not an admin 
                /*if (Utils.IsError(IsAdmin))
                {
                    var userCompany = CheckUserCompany(secretKey, companyID);
                    if (Utils.IsError(userCompany))
                    {
                        return userCompany;
                    }
                }*/

                if (string.IsNullOrWhiteSpace(rights))
                {
                    return Utils.WrapError("No rights found for adding");
                }

                Guid RoleID;
                if (!Guid.TryParse(roleID, out RoleID))
                {
                    return Utils.WrapError("Role ID is not in the correct format");
                }

                //convert the company id received
                /*Guid CompanyID = Guid.Empty;
                if (!IsRRZAdmin.Equals("true"))
                {
                    if (!Guid.TryParse(companyID, out CompanyID))
                    {
                        return Utils.WrapError("Company ID is not in the correct format");
                    }
                }*/

                //parse all rights to a json array
                JArray rightsList = null;
                if (!string.IsNullOrWhiteSpace(rights))
                {
                    rightsList = JArray.Parse(rights);
                }
                if (rightsList == null || rightsList.Count <= 0)
                {
                    return Utils.WrapError("No rights found for updating");
                }

                //retrieve all the id's in the list
                Guid[] rightIDs = new Guid[rightsList.Count];
                int count = 0;
                foreach (JObject i in rightsList)
                {
                    if (!Guid.TryParse(i.GetValue("id").ToString(), out rightIDs[count]))
                    {
                        return Utils.WrapError("There are rights that are not in the correct format");
                    }
                    count++;
                }

                #region Check if the logged in user is assuming a company

                //check if the user is assuming a company
                var assumeResult = CheckAssumeCompany(secretKey);
                if (Utils.IsError(assumeResult))
                {
                    return assumeResult;
                }

                //parse the company ID to a Guid
                Guid CompanyID = Guid.Empty;
                if (!Guid.TryParse(assumeResult, out CompanyID))
                {
                    return Utils.WrapError("The ID of the Company that you are trying to view is in the incorrect format");
                }

                #endregion

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {


                    //check if the role exists
                    var curRole = (from r in entity.Roles
                                   where r.RoleId == RoleID
                                   select r).FirstOrDefault();

                    if (curRole == null)
                    {
                        return Utils.WrapError("Role ID does not exist");
                    }

                    //if the user is not an rrz admin and they are trying to update a system role, do not allow the changes
                    if (/*!IsRRZAdmin.Equals("true") ||*/ !IsAdmin.Equals("true"))
                    {
                        if (curRole.IsSysRole == true)
                        {
                            return Utils.WrapError("System roles cannot be updated");
                        }
                    }

                    //check if the role name they are trying to add is one of the system roles
                    var curSysRoles = (from r in entity.Roles
                                       where r.CompanyID == null && r.IsSysRole == true
                                       && r.LoweredRoleName == roleName.ToLower() && r.RoleId != RoleID
                                       select r).FirstOrDefault();

                    if (curSysRoles != null)
                    {
                        return Utils.WrapError("You cannot use the specified role name as it is reserved for a System Role");
                    }

                    //check if the role name they are trying to add is one of their existing other roles
                    var curCurRoles = (from r in entity.Roles
                                       where r.CompanyID == CompanyID
                                       && r.LoweredRoleName == roleName.ToLower() && r.RoleId != RoleID
                                       select r).FirstOrDefault();

                    if (curCurRoles != null)
                    {
                        return Utils.WrapError("This role name already exists in your company");
                    }


                    curRole.RoleName = roleName;
                    curRole.Description = roleDescription;

                    entity.Entry(curRole).State = EntityState.Modified;

                    //check if the rights exist
                    var curRights = (from r in entity.Application_Rights
                                     where rightIDs.Contains(r.ID)
                                     select r).ToList();


                    if (curRights == null && curRights.Count <= 0)
                    {
                        return Utils.WrapError("No valid rights were provided");
                    }

                    //check if there are currently rights assigned
                    var curRightsInRoles = (from r in entity.ApplicationRightsInRoles
                                            where r.RoleID == RoleID
                                            select r).ToList();

                    //if there are - remove them
                    if (curRightsInRoles != null || curRightsInRoles.Count >= 0)
                    {
                        //remove all the items that match
                        //curRightsInRoles.RemoveRange(0, curRightsInRoles.Count);

                        //entity.Entry(curRightsInRoles).State = EntityState.Deleted;
                        entity.ApplicationRightsInRoles.RemoveRange(curRightsInRoles);
                    }

                    //get the ID for the logged in user
                    Guid LoggedInUserID = (Guid)Membership.GetUser(username).ProviderUserKey;

                    //cycle through all the rights to add
                    foreach (Guid rightID in rightIDs)
                    {
                        //create a new right
                        var newRightInRole = new ApplicationRightsInRole();
                        newRightInRole.ID = Guid.NewGuid();
                        newRightInRole.RoleID = RoleID;
                        newRightInRole.ApplicationRightID = rightID;
                        newRightInRole.DateAssigned = DateTime.Now;
                        newRightInRole.UserAssigned = LoggedInUserID;
                        newRightInRole.DateUpdated = DateTime.Now;
                        newRightInRole.LastUserUpdated = LoggedInUserID;

                        entity.ApplicationRightsInRoles.Add(newRightInRole);

                    }

                    entity.SaveChanges();

                }

                dynamic returnItem = new JObject();
                returnItem.Status = "Success";
                return returnItem.ToString();
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        //remove a role
        public string DeactivateRole(string secretKey, string roleID)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                roleID = TrimIfNotNull(roleID);

                var username = CheckUserHasRight(secretKey, "DeactivateRole");
                if (Utils.IsError(username))
                {
                    return username;
                }


                //check if the user is an administrator
                var IsAdmin = CheckUserHasAnyAdminRole(secretKey);
                //var IsRRZAdmin = CheckUserHasRRZAdminRole(secretKey);

                //if the user is not an admin 
                /* if (Utils.IsError(IsAdmin))
                 {
                     var userCompany = CheckUserCompany(secretKey, companyID);
                     if (Utils.IsError(userCompany))
                     {
                         return userCompany;
                     }
                 }

                 //convert the company id received
                 Guid CompanyID;
                 if (!Guid.TryParse(companyID, out CompanyID))
                 {
                     return Utils.WrapError("Company ID is not in the correct format");
                 }*/

                Guid RoleID;
                if (!Guid.TryParse(roleID, out RoleID))
                {
                    return Utils.WrapError("Role ID is not in the correct format");
                }

                #region Check if the logged in user is assuming a company

                //check if the user is assuming a company
                var assumeResult = CheckAssumeCompany(secretKey);
                if (Utils.IsError(assumeResult))
                {
                    return assumeResult;
                }

                //parse the company ID to a Guid
                Guid CompanyID = Guid.Empty;
                if (!Guid.TryParse(assumeResult, out CompanyID))
                {
                    return Utils.WrapError("The ID of the Company that you are trying to view is in the incorrect format");
                }

                #endregion

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    //check how many users are currently assigned to the role
                    var roleUsers = (from r in entity.CompanyUsers
                                     where r.RoleID == RoleID && r.CompanyID == CompanyID
                                     select r).Count();

                    if (roleUsers > 0)
                    {
                        return Utils.WrapError("There are " + roleUsers + " users assigned to this role. Please reassign the users before deactivating this role");
                    }

                    var role = (from r in entity.Roles
                                where r.RoleId == RoleID && r.CompanyID == CompanyID
                                select r).FirstOrDefault();

                    if (role == null)
                    {
                        return Utils.WrapError("The role you are trying to delete does not exist");
                    }
                    //if the user is not an admin and they are trying to update a system role, do not allow the changes
                    if (/*!IsRRZAdmin.Equals("true") ||*/ !IsAdmin.Equals("true"))
                    {
                        if (role.IsSysRole == true)
                        {
                            return Utils.WrapError("You cannot deactivate a system role");
                        }
                    }

                    role.IsActive = false;

                    entity.Entry(role).State = EntityState.Modified;
                    entity.SaveChanges();


                }

                dynamic returnItem = new JObject();
                returnItem.Status = "Success";
                return returnItem.ToString();
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        //reactivate a role
        public string ReactivateRole(string secretKey, string roleID)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                roleID = TrimIfNotNull(roleID);

                var username = CheckUserHasRight(secretKey, "ReactivateRole");
                if (Utils.IsError(username))
                {
                    return username;
                }


                //check if the user is an administrator
                var IsAdmin = CheckUserHasAnyAdminRole(secretKey);
                //var IsRRZAdmin = CheckUserHasRRZAdminRole(secretKey);
                //if the user is not an admin 
                /*if (Utils.IsError(IsAdmin))
                {
                    var userCompany = CheckUserCompany(secretKey, companyID);
                    if (Utils.IsError(userCompany))
                    {
                        return userCompany;
                    }
                }

                //convert the company id received
                Guid CompanyID;
                if (!Guid.TryParse(companyID, out CompanyID))
                {
                    return Utils.WrapError("Company ID is not in the correct format");
                }*/

                Guid RoleID;
                if (!Guid.TryParse(roleID, out RoleID))
                {
                    return Utils.WrapError("Role ID is not in the correct format");
                }


                #region Check if the logged in user is assuming a company

                //check if the user is assuming a company
                var assumeResult = CheckAssumeCompany(secretKey);
                if (Utils.IsError(assumeResult))
                {
                    return assumeResult;
                }

                //parse the company ID to a Guid
                Guid CompanyID = Guid.Empty;
                if (!Guid.TryParse(assumeResult, out CompanyID))
                {
                    return Utils.WrapError("The ID of the Company that you are trying to view is in the incorrect format");
                }

                #endregion

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    var role = (from r in entity.Roles
                                where r.RoleId == RoleID && r.CompanyID == CompanyID
                                select r).FirstOrDefault();

                    if (role == null)
                    {
                        return Utils.WrapError("The role you are trying to delete does not exist");
                    }

                    //if the user is not an admin and they are trying to update a system role, do not allow the changes
                    if (/*!IsRRZAdmin.Equals("true") || */!IsAdmin.Equals("true"))
                    {
                        if (role.IsSysRole == true)
                        {
                            return Utils.WrapError("You cannot reactivate a system role");
                        }
                    }

                    role.IsActive = true;

                    entity.Entry(role).State = EntityState.Modified;
                    entity.SaveChanges();

                }

                dynamic returnItem = new JObject();
                returnItem.Status = "Success";
                return returnItem.ToString();
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        //Reassign the user to the new role
        public string ReassignUserToRole(string secretKey, string theUserID, /*string oldRoleID,*/ string newRoleID)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                theUserID = TrimIfNotNull(theUserID);
                //oldRoleID = TrimIfNotNull(oldRoleID);
                newRoleID = TrimIfNotNull(newRoleID);

                var username = CheckUserHasRight(secretKey, "ReassignUserToRole");
                if (Utils.IsError(username))
                {
                    return username;
                }

                //check if the user is an administrator
                /*var IsAdmin = CheckUserHasAdminRole(secretKey);

                //if the user is not an admin 
                if (Utils.IsError(IsAdmin))
                {
                    var userCompany = CheckUserCompany(secretKey, companyID);
                    if (Utils.IsError(userCompany))
                    {
                        return userCompany;
                    }
                }

                //convert the company id received
                Guid CompanyID;
                if (!Guid.TryParse(companyID, out CompanyID))
                {
                    return Utils.WrapError("Company ID is not in the correct format");
                }*/

                Guid TheUserID;
                if (!Guid.TryParse(theUserID, out TheUserID))
                {
                    return Utils.WrapError("User ID is not in the correct format");
                }

                /*Guid OldRoleID;
                if (!Guid.TryParse(oldRoleID, out OldRoleID))
                {
                    return Utils.WrapError("Old Role ID is not in the correct format");
                }*/

                Guid NewRoleID;
                if (!Guid.TryParse(newRoleID, out NewRoleID))
                {
                    return Utils.WrapError("New Role ID is not in the correct format");
                }

                #region Check if the logged in user is assuming a company

                //check if the user is assuming a company
                var assumeResult = CheckAssumeCompany(secretKey);
                if (Utils.IsError(assumeResult))
                {
                    return assumeResult;
                }

                //parse the company ID to a Guid
                Guid CompanyID = Guid.Empty;
                if (!Guid.TryParse(assumeResult, out CompanyID))
                {
                    return Utils.WrapError("The ID of the Company that you are trying to view is in the incorrect format");
                }

                #endregion

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    /*var user = (from u in entity.aspnet_Membership
                                where u.UserId == TheUserID
                                select u).FirstOrDefault();

                    if (user == null)
                    {
                        return Utils.WrapError("The user you are trying to update could not be found");
                    }*/

                    /*var oldRole = (from r in entity.Roles
                                   where r.RoleId == OldRoleID
                                   select r).FirstOrDefault();
                    if (oldRole == null)
                    {
                        return Utils.WrapError("The old role you are trying to remove the user from could not be found");
                    }*/

                    var newRole = (from r in entity.Roles
                                   where r.RoleId == NewRoleID && r.CompanyID == CompanyID
                                   select r).FirstOrDefault();

                    if (NewRoleID == null)
                    {
                        return Utils.WrapError("The new role you are trying to add the user to could not be found");
                    }

                    //remove the old role
                    //Roles.RemoveUserFromRole(username, oldRole.RoleName);

                    //add the new role
                    //Roles.AddUserToRole(username, newRole.RoleName);

                    var companyUser = (from e in entity.CompanyUsers
                                       where e.UserID == TheUserID && e.CompanyID == CompanyID
                                       select e).FirstOrDefault();

                    if (companyUser == null)
                    {
                        return Utils.WrapError("The user you are trying to update could not be found");
                    }

                    companyUser.RoleID = NewRoleID;
                    entity.Entry(companyUser).State = EntityState.Modified;

                    entity.SaveChanges();

                }

                dynamic returnItem = new JObject();
                returnItem.Status = "Success";
                return returnItem.ToString();
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        //Get the users in the specified role
        public string GetUsersInRole(string secretKey, string roleID)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                roleID = TrimIfNotNull(roleID);

                var username = CheckUserHasRight(secretKey, "GetUsersInRole");
                if (Utils.IsError(username))
                {
                    return username;
                }

                //check if the user is an administrator
                /*var IsAdmin = CheckUserHasAdminRole(secretKey);

                //if the user is not an admin 
                if (Utils.IsError(IsAdmin))
                {
                    var userCompany = CheckUserCompany(secretKey, companyID);
                    if (Utils.IsError(userCompany))
                    {
                        return userCompany;
                    }
                }

                //convert the company id received
                Guid CompanyID;
                if (!Guid.TryParse(companyID, out CompanyID))
                {
                    return Utils.WrapError("Company ID is not in the correct format");
                }
                */

                Guid RoleID;
                if (!Guid.TryParse(roleID, out RoleID))
                {
                    return Utils.WrapError("Role ID is not in the correct format");
                }

                #region Check if the logged in user is assuming a company

                //check if the user is assuming a company
                var assumeResult = CheckAssumeCompany(secretKey);
                if (Utils.IsError(assumeResult))
                {
                    return assumeResult;
                }

                //parse the company ID to a Guid
                Guid CompanyID = Guid.Empty;
                if (!Guid.TryParse(assumeResult, out CompanyID))
                {
                    return Utils.WrapError("The ID of the Company that you are trying to view is in the incorrect format");
                }

                #endregion

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    var users = (from cu in entity.CompanyUsers
                                 join u in entity.aspnet_Membership
                                 on cu.UserID equals u.UserId
                                 join r in entity.Roles
                                 on cu.RoleID equals r.RoleId
                                 where cu.RoleID == RoleID && cu.CompanyID == CompanyID
                                 select new
                                 {
                                     cu.UserID,
                                     cu.RoleID,
                                     u.Firstnames,
                                     u.Lastname,
                                     r.RoleName
                                 }).ToList();

                    if (users == null || users.Count <= 0)
                    {
                        return "[]";
                    }

                    return Helper.SerializeToJavascriptOject(users);
                }

            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        //view a list of all the roles for the specified company
        public string GetAllRolesForCompany(string secretKey, string getAll)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                getAll = TrimIfNotNull(getAll);

                //get the ID for the logged in user
                string loggedInUserID = GetUserID(secretKey);
                if (Utils.IsError(loggedInUserID))
                {
                    return loggedInUserID;
                }
                Guid LoggedInUserID;
                if (!Guid.TryParse(loggedInUserID, out LoggedInUserID))
                {
                    return Utils.WrapError("User ID is not in the correct format");
                }

                //check if the user is an administrator
                var IsRRZAdmin = CheckUserHasRRZAdminRole(secretKey);
                var IsAdmin = CheckUserHasAdminRole(secretKey);

                /*Guid CompanyID;
                if (!Guid.TryParse(companyID, out CompanyID))
                {
                    return Utils.WrapError("Company ID is not in the correct format");
                }*/

                Boolean GetAll = true;
                //
                // if there is no value or the value is false, then do not display the inactive roles
                //
                if (string.IsNullOrWhiteSpace(getAll) || getAll.Equals("false"))
                {
                    GetAll = false;
                }


                #region Check if the logged in user is assuming a company

                //check if the user is assuming a company
                var assumeResult = CheckAssumeCompany(secretKey);
                if (Utils.IsError(assumeResult))
                {
                    return assumeResult;
                }

                //parse the company ID to a Guid
                Guid CompanyID = Guid.Empty;
                if (!Guid.TryParse(assumeResult, out CompanyID))
                {
                    return Utils.WrapError("The ID of the Company that you are trying to view is in the incorrect format");
                }

                #endregion

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    /*
                    //
                    // if there is no value or the value is false, then do not display the inactive roles
                    //
                    if (getAll == null || getAll.Equals("false"))
                    {
                        //if rrz admin:
                        //return all the system roles 
                        //return all the roles for the company
                        if (IsRRZAdmin.Equals("true"))
                        {
                            var allRoles = (from r in entity.Roles
                                            where (r.CompanyID == CompanyID && r.IsActive == true) ||
                                            (r.IsSysRole == true && r.IsActive == true)
                                            orderby r.RoleName
                                            select new
                                            {
                                                r.RoleId,
                                                r.RoleName,
                                                r.Description,
                                                r.IsSysRole,
                                                r.IsActive,
                                                CanEditSysRole = true
                                            }).ToList();

                            if (allRoles == null || allRoles.Count <= 0)
                            {
                                return "[]";
                            }

                            return Helper.SerializeToJavascriptOject(allRoles);
                        }

                        //if a normal admin:
                        //return all the system roles except for RRZAdmin role 
                        //return all the roles for the company
                        if (IsAdmin.Equals("true"))
                        {
                            var adminRoles = (from r in entity.Roles
                                              where
                                         (r.CompanyID == CompanyID && r.IsActive == true) ||
                                         (r.IsSysRole == true && r.IsActive == true && !r.RoleName.Equals(RRZAdminRole))


                                              orderby r.RoleName
                                              select new
                                              {
                                                  r.RoleId,
                                                  r.RoleName,
                                                  r.Description,
                                                  r.IsSysRole,
                                                  r.IsActive,
                                                  CanEditSysRole = false
                                              }).ToList();

                            if (adminRoles == null || adminRoles.Count <= 0)
                            {
                                return "[]";
                            }

                            return Helper.SerializeToJavascriptOject(adminRoles);
                        }

                        //if not an administrator
                        var roles = (from r in entity.Roles
                                     //where r.CompanyID == CompanyID && r.IsActive == true && r.IsDeleted == false
                                     // where (r.CompanyID == CompanyID || (r.CompanyID == null && !r.CompanyID.Equals(RRZAdminRole) && !r.CompanyID.Equals(AdminRole)))
                                     //&& r.IsActive == true && r.IsDeleted == false
                                     where (r.CompanyID == CompanyID && r.IsActive == true) ||
                                         (r.IsSysRole == true && r.IsActive == true && (!r.RoleName.Equals(RRZAdminRole) || !r.RoleName.Equals(AdminRole)))
                                     orderby r.RoleName
                                     select new
                                     {
                                         r.RoleId,
                                         r.RoleName,
                                         r.Description,
                                         r.IsSysRole,
                                         r.IsActive,
                                         CanEditSysRole = false
                                     }).ToList();

                        if (roles == null || roles.Count <= 0)
                        {
                            return "[]";
                        }

                        return Helper.SerializeToJavascriptOject(roles);
                    }

                    //
                    // display active and inactive roles
                    //

                    //if rrz admin:
                    //return all the system roles 
                    //return all the roles for the company
                    if (IsRRZAdmin.Equals("true"))
                    {
                        var allRoles = (from r in entity.Roles
                                        where (r.CompanyID == CompanyID) ||
                                        (r.IsSysRole == true)
                                        orderby r.RoleName
                                        select new
                                        {
                                            r.RoleId,
                                            r.RoleName,
                                            r.Description,
                                            r.IsSysRole,
                                            r.IsActive,
                                            CanEditSysRole = true
                                        }).ToList();

                        if (allRoles == null || allRoles.Count <= 0)
                        {
                            return "[]";
                        }

                        return Helper.SerializeToJavascriptOject(allRoles);
                    }

                    //if a normal admin:
                    //return all the system roles except for RRZAdmin role 
                    //return all the roles for the company
                    if (IsAdmin.Equals("true"))
                    {
                        var adminRoles = (from r in entity.Roles
                                          where
                                     (r.CompanyID == CompanyID) ||
                                     (r.IsSysRole == true && !r.RoleName.Equals(RRZAdminRole))


                                          orderby r.RoleName
                                          select new
                                          {
                                              r.RoleId,
                                              r.RoleName,
                                              r.Description,
                                              r.IsSysRole,
                                              r.IsActive,
                                              CanEditSysRole = false
                                          }).ToList();

                        if (adminRoles == null || adminRoles.Count <= 0)
                        {
                            return "[]";
                        }

                        return Helper.SerializeToJavascriptOject(adminRoles);
                    }

                    //if not an administrator
                    var userRoles = (from r in entity.Roles
                                     //where r.CompanyID == CompanyID && r.IsActive == true && r.IsDeleted == false
                                     // where (r.CompanyID == CompanyID || (r.CompanyID == null && !r.CompanyID.Equals(RRZAdminRole) && !r.CompanyID.Equals(AdminRole)))
                                     //&& r.IsActive == true && r.IsDeleted == false
                                     where (r.CompanyID == CompanyID) ||
                                         (r.IsSysRole == true && (!r.RoleName.Equals(RRZAdminRole) || !r.RoleName.Equals(AdminRole)))
                                     orderby r.RoleName
                                     select new
                                     {
                                         r.RoleId,
                                         r.RoleName,
                                         r.Description,
                                         r.IsSysRole,
                                         r.IsActive,
                                         CanEditSysRole = false
                                     }).ToList();

                    if (userRoles == null || userRoles.Count <= 0)
                    {
                        return "[]";
                    }

                    return Helper.SerializeToJavascriptOject(userRoles);

                    */



                    var allRoles = (from r in entity.Roles
                                    where
                                     (
                                        //get the roles for this company
                                        r.CompanyID == CompanyID
                                        ||
                                        //get the system roles
                                        (r.IsSysRole == true && r.CompanyID == null)

                                     )
                                    &&
                                    (
                                        //
                                        // GetAll = true then display active and inactive roles
                                        //
                                        (GetAll)
                                        ||
                                        //
                                        // GetAll = false then do not display the inactive roles only show active roles
                                        //
                                        (!GetAll && r.IsActive == true)
                                    )
                                    orderby r.RoleName
                                    select new
                                    {
                                        r.RoleId,
                                        r.RoleName,
                                        r.Description,
                                        r.IsSysRole,
                                        r.IsActive,
                                        CanEditSysRole = true
                                    }).ToList();

                    if (allRoles == null || allRoles.Count <= 0)
                    {
                        return "[]";
                    }

                    if (IsRRZAdmin.Equals("true"))
                    {
                        //return all the roles
                        return Helper.SerializeToJavascriptOject(allRoles);
                    }
                    else if (IsAdmin.Equals("true"))
                    {
                        var specificRoles = (from e in allRoles
                                             where !e.RoleName.Equals(RRZAdminRole)
                                             select e).ToList();

                        //return all the roles except for the RRZAdminRole
                        return Helper.SerializeToJavascriptOject(specificRoles);
                    }
                    else
                    {
                        var specificRoles = (from e in allRoles
                                             where !e.RoleName.Equals(RRZAdminRole) && !e.RoleName.Equals(AdminRole)
                                             select e).ToList();

                        //return all the roles except for the RRZAdminRole and AdminRole
                        return Helper.SerializeToJavascriptOject(specificRoles);
                    }
                }
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        //view a list of all the active system roles
        //only rrzadmin can view this
        public string GetAllSysRoles(string secretKey)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);

                //get the ID for the logged in user
                string loggedInUserID = GetUserID(secretKey);
                if (Utils.IsError(loggedInUserID))
                {
                    return loggedInUserID;
                }
                Guid LoggedInUserID;
                if (!Guid.TryParse(loggedInUserID, out LoggedInUserID))
                {
                    return Utils.WrapError("User ID is not in the correct format");
                }

                //check if the user is an administrator
                var IsRRZAdmin = CheckUserHasRRZAdminRole(secretKey);
                string RRZAdminRoleName = "";
                if (Utils.IsError(IsRRZAdmin) || !IsRRZAdmin.Equals("true"))
                {
                    RRZAdminRoleName = RRZAdminRole;
                }

                var username = CheckUserHasRight(secretKey, "GetAllSysRoles");
                if (Utils.IsError(username))
                {
                    return username;
                }

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {

                    var allRoles = (from r in entity.Roles
                                    where r.IsSysRole == true && r.IsActive == true && r.RoleName != RRZAdminRoleName
                                    orderby r.RoleName
                                    select new
                                    {
                                        r.RoleId,
                                        r.RoleName,
                                        r.Description,
                                        r.IsSysRole,
                                        r.IsActive,
                                        CanEditSysRole = true
                                    }).ToList();

                    if (allRoles == null || allRoles.Count <= 0)
                    {
                        return "[]";
                    }

                    return Helper.SerializeToJavascriptOject(allRoles);

                }
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        //view a list of all the rights for the role
        public string GetAllRightsForRole(string secretKey, string roleID)
        {
            try
            {

                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                roleID = TrimIfNotNull(roleID);

                var username = CheckUserHasRight(secretKey, "GetAllRightsForRole");
                if (Utils.IsError(username))
                {
                    return username;
                }

                Guid RoleID;
                if (!Guid.TryParse(roleID, out RoleID))
                {
                    return Utils.WrapError("Role ID is not in the correct format");
                }

                #region Check if the logged in user is assuming a company

                //check if the user is assuming a company
                var assumeResult = CheckAssumeCompany(secretKey);
                if (Utils.IsError(assumeResult))
                {
                    return assumeResult;
                }

                //parse the company ID to a Guid
                Guid CompanyID = Guid.Empty;
                if (!Guid.TryParse(assumeResult, out CompanyID))
                {
                    return Utils.WrapError("The ID of the Company that you are trying to view is in the incorrect format");
                }

                #endregion

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    var rights = (from r in entity.Roles
                                  join rir in entity.ApplicationRightsInRoles
                                  on r.RoleId equals rir.RoleID
                                  join ar in entity.Application_Rights
                                  on rir.ApplicationRightID equals ar.ID
                                  where r.RoleId == RoleID
                                  orderby ar.RightGroup, ar.FriendlyName
                                  select new
                                  {
                                      ar.ID,
                                      ar.Name,
                                      ar.FriendlyName,
                                      ar.Description,
                                      ar.RightGroup
                                  }).ToList();

                    if (rights == null || rights.Count <= 0)
                    {
                        return "[]";
                    }

                    return Helper.SerializeToJavascriptOject(rights);
                }
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        //view a list of all the available rights 
        public string GetAllRights(string secretKey)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);

                /*var username = CheckUserHasRight(secretKey, "GetAllRights");
                if (Utils.IsError(username))
                {
                    return username;
                }
                */

                //get the ID for the logged in user
                string loggedInUserID = GetUserID(secretKey);
                if (Utils.IsError(loggedInUserID))
                {
                    return loggedInUserID;
                }
                Guid LoggedInUserID;
                if (!Guid.TryParse(loggedInUserID, out LoggedInUserID))
                {
                    return Utils.WrapError("User ID is not in the correct format");
                }

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    var rights = (from r in entity.Application_Rights
                                  orderby r.RightGroup, r.FriendlyName
                                  select new
                                  {
                                      r.ID,
                                      r.Name,
                                      r.FriendlyName,
                                      r.Description,
                                      r.RightGroup
                                  }).ToList();

                    if (rights == null || rights.Count <= 0)
                    {
                        return "[]";
                    }

                    return Helper.SerializeToJavascriptOject(rights);
                }
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        //Update the role of a user within a specified company
        public string UpdateUserRoleInCompany(string secretKey, string userID, string newRoleID)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                userID = TrimIfNotNull(userID);
                newRoleID = TrimIfNotNull(newRoleID);

                var username = CheckUserHasRight(secretKey, "UpdateUserRoleInCompany");
                if (Utils.IsError(username))
                {
                    return username;
                }

                /*Guid CompanyID;

                //if the logged in user is updating someone within their company
                if (companyID.Equals("-1"))
                {
                    var username = CheckUserHasRight(secretKey, "UpdateUserRoleInCompany");
                    if (Utils.IsError(username))
                    {
                        return username;
                    }

                 
                    using (Surveya_DevEntities entity = new Surveya_DevEntities())
                    {
                        var companyUser = (from cu in entity.CompanyUsers
                                           where cu.UserID == LoggedInUserID
                                           select cu).FirstOrDefault();

                        if (companyUser == null)
                        {
                            return Utils.WrapError("The Company you work for could not be found");
                        }

                        CompanyID = companyUser.CompanyID;
                    }
                }
                else
                {
                    var username = CheckUserHasRight(secretKey, "UpdateUserRoleInDifferentCompany");
                    if (Utils.IsError(username))
                    {
                        return username;
                    }

                    if (!Guid.TryParse(companyID, out CompanyID))
                    {
                        return Utils.WrapError("Company ID is not in the correct format");
                    }

                }*/

                Guid UserID;
                if (!Guid.TryParse(userID, out UserID))
                {
                    return Utils.WrapError("User ID is not in the correct format");
                }

                Guid RoleID;
                if (!Guid.TryParse(newRoleID, out RoleID))
                {
                    return Utils.WrapError("Role ID is not in the correct format");
                }

                //convert the company id received
                /*Guid CompanyID;
                if (!Guid.TryParse(companyID, out CompanyID))
                {
                    return Utils.WrapError("Company ID is not in the correct format");
                }

                var userCompany = CheckUserCompany(secretKey, companyID);
                if (Utils.IsError(userCompany))
                {
                    return userCompany;
                }*/

                #region Check if the logged in user is assuming a company

                //check if the user is assuming a company
                var assumeResult = CheckAssumeCompany(secretKey);
                if (Utils.IsError(assumeResult))
                {
                    return assumeResult;
                }

                //parse the company ID to a Guid
                Guid CompanyID = Guid.Empty;
                if (!Guid.TryParse(assumeResult, out CompanyID))
                {
                    return Utils.WrapError("The ID of the Company that you are trying to view is in the incorrect format");
                }

                #endregion

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    var role = (from r in entity.Roles
                                where r.RoleId == RoleID
                                select r).FirstOrDefault();

                    if (role == null)
                    {
                        return Utils.WrapError("The Role you are trying to assign does not exist");
                    }

                    /*var company = (from c in entity.Companies
                                   where c.ID == CompanyID
                                   select c).FirstOrDefault();

                    if (company == null)
                    {
                        return Utils.WrapError("The Company you are trying to edit does not exist");
                    }*/

                    var user = (from u in entity.aspnet_Membership
                                where u.UserId == UserID
                                select u).FirstOrDefault();

                    if (user == null)
                    {
                        return Utils.WrapError("The User you are trying to edit does not exist");
                    }

                    var companyUser = (from cu in entity.CompanyUsers
                                       where cu.UserID == UserID && cu.CompanyID == CompanyID
                                       select cu).FirstOrDefault();

                    if (companyUser == null)
                    {
                        return Utils.WrapError("The user you are trying to edit does not work for the specified company");
                    }

                    //update the users role
                    companyUser.RoleID = RoleID;

                    entity.Entry(companyUser).State = EntityState.Modified;
                    entity.SaveChanges();
                }

                dynamic returnItem = new JObject();
                returnItem.Status = "Success";
                return returnItem.ToString();
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        //Update the role of a user within a specified project
        public string UpdateUserRoleInProject(string secretKey, string userID, string projectID, string newRoleID)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                userID = TrimIfNotNull(userID);
                projectID = TrimIfNotNull(projectID);
                newRoleID = TrimIfNotNull(newRoleID);

                var username = CheckUserHasRight(secretKey, "UpdateUserRoleInProject");
                if (Utils.IsError(username))
                {
                    return username;
                }

                /*Guid CompanyID;

                //if the logged in user is updating someone within their company
                if (companyID.Equals("-1"))
                {
                    var username = CheckUserHasRight(secretKey, "UpdateUserRoleInProject");
                    if (Utils.IsError(username))
                    {
                        return username;
                    }

                    using (Surveya_DevEntities entity = new Surveya_DevEntities())
                    {
                        var companyUser = (from cu in entity.CompanyUsers
                                           where cu.UserID == LoggedInUserID
                                           select cu).FirstOrDefault();

                        if (companyUser == null)
                        {
                            return Utils.WrapError("The Company you work for could not be found");
                        }

                        CompanyID = companyUser.CompanyID;
                    }
                }
                else
                {
                    var username = CheckUserHasRight(secretKey, "UpdateUserRoleInProjectDifferentCompany");
                    if (Utils.IsError(username))
                    {
                        return username;
                    }

                    if (!Guid.TryParse(companyID, out CompanyID))
                    {
                        return Utils.WrapError("Company ID is not in the correct format");
                    }

                }*/

                //check if the user is an administrator
                /*var IsAdmin = CheckUserHasAdminRole(secretKey);

                //if the user is not an admin 
                if (Utils.IsError(IsAdmin))
                {
                    var userCompany = CheckUserCompany(secretKey, companyID);
                    if (Utils.IsError(userCompany))
                    {
                        return userCompany;
                    }
                }

                //convert the company id received
                Guid CompanyID;
                if (!Guid.TryParse(companyID, out CompanyID))
                {
                    return Utils.WrapError("Company ID is not in the correct format");
                }*/

                Guid UserID;
                if (!Guid.TryParse(userID, out UserID))
                {
                    return Utils.WrapError("User ID is not in the correct format");
                }

                Guid ProjectID;
                if (!Guid.TryParse(projectID, out ProjectID))
                {
                    return Utils.WrapError("Project ID is not in the correct format");
                }

                Guid RoleID;
                if (!Guid.TryParse(newRoleID, out RoleID))
                {
                    return Utils.WrapError("Role ID is not in the correct format");
                }

                #region Check if the logged in user is assuming a company

                //check if the user is assuming a company
                var assumeResult = CheckAssumeCompany(secretKey);
                if (Utils.IsError(assumeResult))
                {
                    return assumeResult;
                }

                //parse the company ID to a Guid
                Guid CompanyID = Guid.Empty;
                if (!Guid.TryParse(assumeResult, out CompanyID))
                {
                    return Utils.WrapError("The ID of the Company that you are trying to view is in the incorrect format");
                }

                #endregion

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    var role = (from r in entity.Roles
                                where r.RoleId == RoleID
                                select r).FirstOrDefault();

                    if (role == null)
                    {
                        return Utils.WrapError("The Role you are trying to assign does not exist");
                    }

                    /*var company = (from c in entity.Companies
                                   where c.ID == CompanyID
                                   select c).FirstOrDefault();

                    if (company == null)
                    {
                        return Utils.WrapError("The Company you are trying to edit does not exist");
                    }*/

                    var project = (from p in entity.Projects
                                   where p.ID == ProjectID && p.ProjectCompany == CompanyID
                                   select p).FirstOrDefault();

                    if (project == null)
                    {
                        return Utils.WrapError("The Project you are trying to edit does not exist");
                    }

                    var user = (from u in entity.aspnet_Membership
                                where u.UserId == UserID
                                select u).FirstOrDefault();

                    if (user == null)
                    {
                        return Utils.WrapError("The User you are trying to edit does not exist");
                    }

                    var projectTeam = (from p in entity.Projects
                                       join pt in entity.ProjectTeams
                                       on p.ID equals pt.ProjectID
                                       where pt.ProjectID == ProjectID && pt.UserID == UserID && p.ProjectCompany == CompanyID
                                       select pt).FirstOrDefault();

                    if (projectTeam == null)
                    {
                        return Utils.WrapError("The user you are trying to edit does not work for the specified company");
                    }

                    //update the users role
                    projectTeam.RoleID = RoleID;

                    entity.Entry(projectTeam).State = EntityState.Modified;
                    entity.SaveChanges();

                }

                dynamic returnItem = new JObject();
                returnItem.Status = "Success";
                return returnItem.ToString();
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        #endregion

        #region Projects


        public string CreateDefaultProject(string secretKey, Guid LoggedInUserID, Guid CompanyID)
        {
            var projectResult = CreateProject(secretKey, "Project 1", "", "", LoggedInUserID + "", "1", DateTime.Now + "", DateTime.Now.AddMonths(1) + "", "false", "false", "false", "false", "false", "false", "false", "false", "false", "false", "false", "false", "false", "false", "false", "false", "false", "false", "", "false", "false", CompanyID + "");
            if (Utils.IsError(projectResult))
            {
                Helper.LogMessage("CreateDefaultProject: Error creating default project : " + projectResult);
                return Utils.WrapError("CreateDefaultProject: Error creating default project : " + projectResult);
            }
            else
            {

                //get project info back
                JObject projectResultObj = JObject.Parse(projectResult);
                string projectID = projectResultObj.GetValue("ProjectID").ToString();

                //create a default survey
                string surveyResult = AddSurvey(secretKey, "Survey 1", projectID, "First survey", CompanyID + "", LoggedInUserID + "", "Has been completed and is ready to be submitted.", "true", "");      //, CompanyID+""
                if (Utils.IsError(surveyResult))
                {
                    Helper.LogMessage("CreateDefaultProject: Error creating default survey : " + surveyResult);
                    return Utils.WrapError("CreateDefaultProject: Error creating default survey : " + surveyResult);
                }
                else
                {

                    JObject surveyResultObj = JObject.Parse(surveyResult);
                    string surveyID = surveyResultObj.GetValue("SurveyID").ToString();

                    //create a default question group of type page
                    string questionResult = CreateQuestionGroup(secretKey, "Page", "Page 1", surveyID, "", CompanyID + "", LoggedInUserID + "", "");   //, string companyToAddTo
                    if (Utils.IsError(questionResult))
                    {
                        Helper.LogMessage("CreateDefaultProject: Error creating default question group - Page : " + questionResult);
                        return Utils.WrapError("CreateDefaultProject: Error creating default question group - Page : " + questionResult);
                    }
                    else
                    {
                        dynamic returnItem = new JObject();
                        returnItem.Status = "Success";
                        returnItem.CompanyID = CompanyID;
                        return returnItem.ToString();
                    }
                }
            }
        }

        //create a new project
        public string CreateProject(string secretKey,
            //project information
            string projectName, string projectDescription, string projectCountry, string primaryContactID,
            //if this is 0 then the questiosn for which data and files are required should not be asked
            string numberOfMembers,
            //timeline
            string startDate, string endDate,
            //what data is required for the project - these should be received as true / false
            string isPassportNumberRequired, string isPassportExpiryDateRequired, string isMedicalAidNameRequired,
            string isMedicalAidNumberRequired, string isMedicalAidContactNumberRequired, string isBloodTypeRequired,
            string isAllergiesRequired, string isAllergiesDescriptionRequired, string isVaccinationsRequired,
            string isSafetyBootsRequired, string isVestRequired,
            //what files are required for upload - these should be received as true / false
            string isPassportDocRequired, string isETicketDocRequired, string isVisaDocRequired, string isAccommodationDocRequired,
            string isVaccinationDocRequired, string isDriversLicenseDocRequired, string isCustomsClearanceDocRequired, string otherInformation,
            string isEmergencyContactOneRequired, string isEmergencyContactTwoRequired, string companyToAddTo
            )
        {
            try
            {

                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                projectName = TrimIfNotNull(projectName);
                projectDescription = TrimIfNotNull(projectDescription);
                projectCountry = TrimIfNotNull(projectCountry);
                primaryContactID = TrimIfNotNull(primaryContactID);
                numberOfMembers = TrimIfNotNull(numberOfMembers);
                startDate = TrimIfNotNull(startDate);
                endDate = TrimIfNotNull(endDate);
                isPassportNumberRequired = TrimIfNotNull(isPassportNumberRequired);
                isPassportExpiryDateRequired = TrimIfNotNull(isPassportExpiryDateRequired);
                isMedicalAidNameRequired = TrimIfNotNull(isMedicalAidNameRequired);
                isMedicalAidNumberRequired = TrimIfNotNull(isMedicalAidNumberRequired);
                isMedicalAidContactNumberRequired = TrimIfNotNull(isMedicalAidContactNumberRequired);
                isBloodTypeRequired = TrimIfNotNull(isBloodTypeRequired);
                isAllergiesRequired = TrimIfNotNull(isAllergiesRequired);
                isAllergiesDescriptionRequired = TrimIfNotNull(isAllergiesDescriptionRequired);
                isVaccinationsRequired = TrimIfNotNull(isVaccinationsRequired);
                isSafetyBootsRequired = TrimIfNotNull(isSafetyBootsRequired);
                isVestRequired = TrimIfNotNull(isVestRequired);
                isPassportDocRequired = TrimIfNotNull(isPassportDocRequired);
                isETicketDocRequired = TrimIfNotNull(isETicketDocRequired);
                isVisaDocRequired = TrimIfNotNull(isVisaDocRequired);
                isAccommodationDocRequired = TrimIfNotNull(isAccommodationDocRequired);
                isVaccinationDocRequired = TrimIfNotNull(isVaccinationDocRequired);
                isDriversLicenseDocRequired = TrimIfNotNull(isDriversLicenseDocRequired);
                isCustomsClearanceDocRequired = TrimIfNotNull(isCustomsClearanceDocRequired);
                otherInformation = TrimIfNotNull(otherInformation);
                isEmergencyContactOneRequired = TrimIfNotNull(isEmergencyContactOneRequired);
                isEmergencyContactTwoRequired = TrimIfNotNull(isEmergencyContactTwoRequired);
                companyToAddTo = TrimIfNotNull(companyToAddTo);

                //check that the user has rights to create a project
                var username = CheckUserHasRight(secretKey, "CreateProject");
                if (Utils.IsError(username))
                {
                    return username;
                }

                //check if the user is an administrator
                /*var IsAdmin = CheckUserHasAdminRole(secretKey);

                //if the user is not an admin 
                if (Utils.IsError(IsAdmin))
                {
                    var userCompany = CheckUserCompany(secretKey, companyID);
                    if (Utils.IsError(userCompany))
                    {
                        return userCompany;
                    }
                }

                //convert the company id received
                Guid CompanyID;
                if (!Guid.TryParse(companyID, out CompanyID))
                {
                    return Utils.WrapError("Company ID is not in the correct format");
                }*/

                //validation
                if (string.IsNullOrWhiteSpace(projectName))
                {
                    return Utils.WrapError("Please ensure that you enter the project name");
                }
                if (string.IsNullOrWhiteSpace(numberOfMembers))
                {
                    return Utils.WrapError("Please ensure that you enter the number of members");
                }
                if (string.IsNullOrWhiteSpace(primaryContactID))
                {
                    return Utils.WrapError("Please ensure that you select the primary contact person");
                }
                if (string.IsNullOrWhiteSpace(startDate))
                {
                    return Utils.WrapError("Please ensure that you enter the expected start date of the project");
                }
                if (string.IsNullOrWhiteSpace(endDate))
                {
                    return Utils.WrapError("Please ensure that you enter the expected end date of the project");
                }
                if (string.IsNullOrWhiteSpace(isPassportNumberRequired))
                {
                    return Utils.WrapError("Please ensure that you indicate if the passport number is required");
                }
                if (string.IsNullOrWhiteSpace(isPassportExpiryDateRequired))
                {
                    return Utils.WrapError("Please ensure that you indicate if the passport expiry date is required");
                }
                if (string.IsNullOrWhiteSpace(isMedicalAidNameRequired))
                {
                    return Utils.WrapError("Please ensure that you indicate if the medical aid name is required");
                }
                if (string.IsNullOrWhiteSpace(isMedicalAidNumberRequired))
                {
                    return Utils.WrapError("Please ensure that you indicate if the medical aid number is required");
                }
                if (string.IsNullOrWhiteSpace(isMedicalAidContactNumberRequired))
                {
                    return Utils.WrapError("Please ensure that you indicate if the medical aid contact number is required");
                }
                if (string.IsNullOrWhiteSpace(isBloodTypeRequired))
                {
                    return Utils.WrapError("Please ensure that you indicate if the blood type is required");
                }
                if (string.IsNullOrWhiteSpace(isAllergiesRequired))
                {
                    return Utils.WrapError("Please ensure that you indicate if the allergy is required");
                }
                if (string.IsNullOrWhiteSpace(isAllergiesDescriptionRequired))
                {
                    return Utils.WrapError("Please ensure that you indicate if the allergy description is required");
                }
                if (string.IsNullOrWhiteSpace(isVaccinationsRequired))
                {
                    return Utils.WrapError("Please ensure that you indicate if a vaccination is required");
                }
                if (string.IsNullOrWhiteSpace(isSafetyBootsRequired))
                {
                    return Utils.WrapError("Please ensure that you indicate if safety boots are required");
                }
                if (string.IsNullOrWhiteSpace(isVestRequired))
                {
                    return Utils.WrapError("Please ensure that you indicate if a safety vest is required");
                }
                if (string.IsNullOrWhiteSpace(isPassportDocRequired))
                {
                    return Utils.WrapError("Please ensure that you indicate if a copy of the team members passport should be uploaded");
                }
                if (string.IsNullOrWhiteSpace(isETicketDocRequired))
                {
                    return Utils.WrapError("Please ensure that you indicate if a copy of the team members e-ticket should be uploaded");
                }
                if (string.IsNullOrWhiteSpace(isVisaDocRequired))
                {
                    return Utils.WrapError("Please ensure that you indicate if a copy of the team members visa should be uploaded");
                }
                if (string.IsNullOrWhiteSpace(isAccommodationDocRequired))
                {
                    return Utils.WrapError("Please ensure that you indicate if a copy of the team members accommodation confirmation should be uploaded");
                }
                if (string.IsNullOrWhiteSpace(isVaccinationDocRequired))
                {
                    return Utils.WrapError("Please ensure that you indicate if a copy of the team members vaccination certificates should be uploaded");
                }
                if (string.IsNullOrWhiteSpace(isDriversLicenseDocRequired))
                {
                    return Utils.WrapError("Please ensure that you indicate if a copy of the team members drivers license should be uploaded");
                }
                if (string.IsNullOrWhiteSpace(isCustomsClearanceDocRequired))
                {
                    return Utils.WrapError("Please ensure that you indicate if a copy of the team members customs clearance certificate should be uploaded");
                }

                //validation to parse to correct types
                Guid PrimaryContactID;
                if (!Guid.TryParse(primaryContactID, out PrimaryContactID))
                {
                    return Utils.WrapError("Primary Contact ID is not in the correct format");
                }
                int NumberOfMembers = 0;
                if (!Int32.TryParse(numberOfMembers, out NumberOfMembers))
                {
                    return Utils.WrapError("Number of members is not in the correct format");
                }
                DateTime StartDate;
                if (!DateTime.TryParse(startDate, out StartDate))
                {
                    return Utils.WrapError("Start date is not in the correct format");
                }
                DateTime EndDate;
                if (!DateTime.TryParse(endDate, out EndDate))
                {
                    return Utils.WrapError("End date is not in the correct format");
                }
                bool IsPassportNumberRequired;
                if (!Boolean.TryParse(isPassportNumberRequired, out IsPassportNumberRequired))
                {
                    return Utils.WrapError("isPassportNumberRequired is not in the correct format");
                }
                bool IsPassportExpiryDateRequired;
                if (!Boolean.TryParse(isPassportExpiryDateRequired, out IsPassportExpiryDateRequired))
                {
                    return Utils.WrapError("IsPassportExpiryDateRequired is not in the correct format");
                }
                bool IsMedicalAidNameRequired;
                if (!Boolean.TryParse(isMedicalAidNameRequired, out IsMedicalAidNameRequired))
                {
                    return Utils.WrapError("isMedicalAidNameRequired is not in the correct format");
                }
                bool IsMedicalAidNumberRequired;
                if (!Boolean.TryParse(isMedicalAidNumberRequired, out IsMedicalAidNumberRequired))
                {
                    return Utils.WrapError("isMedicalAidNumberRequired is not in the correct format");
                }
                bool IsMedicalAidContactNumberRequired;
                if (!Boolean.TryParse(isMedicalAidContactNumberRequired, out IsMedicalAidContactNumberRequired))
                {
                    return Utils.WrapError("isMedicalAidContactNumberRequired is not in the correct format");
                }
                bool IsBloodTypeRequired;
                if (!Boolean.TryParse(isBloodTypeRequired, out IsBloodTypeRequired))
                {
                    return Utils.WrapError("isBloodTypeRequired is not in the correct format");
                }
                bool IsAllergiesRequired;
                if (!Boolean.TryParse(isAllergiesRequired, out IsAllergiesRequired))
                {
                    return Utils.WrapError("isAllergiesRequired is not in the correct format");
                }
                bool IsAllergiesDescriptionRequired;
                if (!Boolean.TryParse(isAllergiesDescriptionRequired, out IsAllergiesDescriptionRequired))
                {
                    return Utils.WrapError("isAllergiesDescriptionRequired is not in the correct format");
                }
                bool IsVaccinationsRequired;
                if (!Boolean.TryParse(isVaccinationsRequired, out IsVaccinationsRequired))
                {
                    return Utils.WrapError("IsVaccinationsRequired is not in the correct format");
                }
                bool IsSafetyBootsRequired;
                if (!Boolean.TryParse(isSafetyBootsRequired, out IsSafetyBootsRequired))
                {
                    return Utils.WrapError("IsSafetyBootsRequired is not in the correct format");
                }
                bool IsVestRequired;
                if (!Boolean.TryParse(isVestRequired, out IsVestRequired))
                {
                    return Utils.WrapError("IsVestRequired is not in the correct format");
                }
                bool IsPassportDocRequired;
                if (!Boolean.TryParse(isPassportDocRequired, out IsPassportDocRequired))
                {
                    return Utils.WrapError("IsPassportDocRequired is not in the correct format");
                }
                bool IsETicketDocRequired;
                if (!Boolean.TryParse(isETicketDocRequired, out IsETicketDocRequired))
                {
                    return Utils.WrapError("IsETicketDocRequired is not in the correct format");
                }
                bool IsVisaDocRequired;
                if (!Boolean.TryParse(isVisaDocRequired, out IsVisaDocRequired))
                {
                    return Utils.WrapError("IsVisaDocRequired is not in the correct format");
                }
                bool IsAccommodationDocRequired;
                if (!Boolean.TryParse(isAccommodationDocRequired, out IsAccommodationDocRequired))
                {
                    return Utils.WrapError("IsAccommodationDocRequired is not in the correct format");
                }
                bool IsVaccinationDocRequired;
                if (!Boolean.TryParse(isVaccinationDocRequired, out IsVaccinationDocRequired))
                {
                    return Utils.WrapError("IsVaccinationDocRequired is not in the correct format");
                }
                bool IsDriversLicenseDocRequired;
                if (!Boolean.TryParse(isDriversLicenseDocRequired, out IsDriversLicenseDocRequired))
                {
                    return Utils.WrapError("IsDriversLicenseDocRequired is not in the correct format");
                }
                bool IsCustomsClearanceDocRequired;
                if (!Boolean.TryParse(isCustomsClearanceDocRequired, out IsCustomsClearanceDocRequired))
                {
                    return Utils.WrapError("IsCustomsClearanceDocRequired is not in the correct format");
                }
                bool IsEmergencyContactOneRequired;
                if (!Boolean.TryParse(isEmergencyContactOneRequired, out IsEmergencyContactOneRequired))
                {
                    return Utils.WrapError("IsEmergencyContactOneRequired is not in the correct format");
                }
                bool IsEmergencyContactTwoRequired;
                if (!Boolean.TryParse(isEmergencyContactTwoRequired, out IsEmergencyContactTwoRequired))
                {
                    return Utils.WrapError("IsEmergencyContactTwoRequired is not in the correct format");
                }

                //parse the company ID to a Guid
                Guid CompanyID = Guid.Empty;

                if (!string.IsNullOrWhiteSpace(companyToAddTo) && Guid.TryParse(companyToAddTo, out CompanyID))
                {
                    // Use the provided company (Company admin activated the first package)
                    Helper.LogMessage("CreateProject: will add user: " + primaryContactID + " to new project for company: " + companyToAddTo);
                }
                else
                {

                    #region Check if the logged in user is assuming a company

                    //check if the user is assuming a company
                    var assumeResult = CheckAssumeCompany(secretKey);
                    if (Utils.IsError(assumeResult))
                    {
                        return assumeResult;
                    }
                    if (!Guid.TryParse(assumeResult, out CompanyID))
                    {
                        return Utils.WrapError("The ID of the Company that you are trying to view is in the incorrect format");
                    }

                    #endregion
                }

                //check if the company is allowed to add more projects
                var packageResult = CheckCompanyPackageNoProjects(CompanyID + "");
                if (Utils.IsError(packageResult))
                {
                    return packageResult;
                }

                Guid LoggedInUserID;

                if (!string.IsNullOrWhiteSpace(companyToAddTo) && Guid.TryParse(companyToAddTo, out CompanyID))
                {
                    // Use the provided company (Company admin activated the first package)
                    Helper.LogMessage("CreateProject: will add user: " + primaryContactID + " to new project for company: " + companyToAddTo);
                    LoggedInUserID = PrimaryContactID;
                }
                else
                {
                    LoggedInUserID = (Guid)Membership.GetUser(username).ProviderUserKey;
                }

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {

                    var newProject = (from p in entity.Projects
                                      where p.ProjectName == projectName
                                      && p.ProjectCompany == CompanyID
                                      select p).FirstOrDefault();


                    if (newProject != null)
                    {
                        return Utils.WrapError("Your company already has a project with that name");
                    }

                    newProject = new Project();
                    Guid ProjectID = Guid.NewGuid();

                    newProject.ID = ProjectID;

                    newProject.ProjectName = projectName;
                    newProject.ProjectDescription = projectDescription;
                    newProject.ProjectCountry = projectCountry;
                    newProject.NumberOfMembers = NumberOfMembers;
                    //primary contact
                    newProject.UserID = PrimaryContactID;
                    //timeline
                    newProject.StartDate = StartDate;
                    newProject.EndDate = EndDate;
                    //what data is required for the project
                    newProject.IsPassportNumberRequired = IsPassportNumberRequired;
                    newProject.IsPassportExpiryDateRequired = IsPassportExpiryDateRequired;
                    newProject.IsMedicalAidNameRequired = IsMedicalAidNameRequired;
                    newProject.IsMedicalAidNumberRequired = IsMedicalAidNumberRequired;
                    newProject.IsMedicalAidContactNumberRequired = IsMedicalAidContactNumberRequired;
                    newProject.IsBloodTypeRequired = IsBloodTypeRequired;
                    newProject.IsAllergiesRequired = IsAllergiesRequired;
                    newProject.IsAllergiesDescriptionRequired = IsAllergiesDescriptionRequired;
                    newProject.IsVaccinationsRequired = IsVaccinationsRequired;
                    newProject.IsSafetyBootsRequired = IsSafetyBootsRequired;
                    newProject.IsVestRequired = IsVestRequired;
                    //what files are required to upload
                    newProject.IsPassportDocRequired = IsPassportDocRequired;
                    newProject.IsETicketDocRequired = IsETicketDocRequired;
                    newProject.IsVisaDocRequired = IsVisaDocRequired;
                    newProject.IsAccommodationDocRequired = IsAccommodationDocRequired;
                    newProject.IsVaccinationDocRequired = IsVaccinationDocRequired;
                    newProject.IsDriversLicenseDocRequired = IsDriversLicenseDocRequired;
                    newProject.IsCustomsClearanceDocRequired = IsCustomsClearanceDocRequired;
                    newProject.ProjectCompany = CompanyID;
                    newProject.CreatedBy = LoggedInUserID;
                    newProject.DateCreated = DateTime.Now;
                    newProject.OtherInfoRequired = otherInformation;
                    newProject.IsEmergencyContactOneRequired = IsEmergencyContactOneRequired;
                    newProject.IsEmergencyContactTwoRequired = IsEmergencyContactTwoRequired;
                    //set the new company to active
                    newProject.IsActive = true;
                    entity.Projects.Add(newProject);


                    //create a new Project Team member
                    var newProjectTeamMember = new ProjectTeam();
                    newProjectTeamMember.ID = Guid.NewGuid();
                    newProjectTeamMember.UserID = LoggedInUserID;
                    newProjectTeamMember.ProjectID = ProjectID;
                    newProjectTeamMember.RoleID = ProjectAdministatorRoleID;
                    newProjectTeamMember.CompletedRegistration = false;
                    newProjectTeamMember.IsActive = false;
                    entity.ProjectTeams.Add(newProjectTeamMember);

                    entity.SaveChanges();

                    //activity stream
                    AddActivity(secretKey, CompanyID + "", null, null, ProjectID + "", null, "created a new project", ActivityType.Project, LoggedInUserID + "");

                    var curUser = (from u in entity.aspnet_Membership
                                   where u.UserId == LoggedInUserID
                                   select u).FirstOrDefault();

                    //send a email to the new project administrator
                    //SendEmailNewProject(LoggedInUserID.ToString(), newProject.ProjectName, curUser.Email, curUser.Email, "", companyID);
                    SendEmail(EmailPurpose.NewProject, curUser.Email, CompanyID + "", newProject.ProjectName, "", "", "", ProjectAdministatorRoleID + "", "Primary Contact", "");


                    #region Document Manager

                    //path on where to save the documents
                    string DocumentManagerPath = ConfigurationManager.AppSettings["DocumentManagerPath"].ToString();
                    string ProjectsPath = DocumentManagerPath + "\\" + CompanyID + "\\Projects\\" + ProjectID;

                    //create the directory 
                    if (CreateDirectory(ProjectsPath))
                    {
                        string ProjectsMiscPath = ProjectsPath + "\\ProjectDocs";

                        //create the directory 
                        CreateDirectory(ProjectsMiscPath);

                        string ProjectsSurveysPath = ProjectsPath + "\\Surveys";

                        //create the directory 
                        CreateDirectory(ProjectsSurveysPath);

                        string ProjectsUsersPath = ProjectsPath + "\\Users";

                        //create the directory 
                        CreateDirectory(ProjectsUsersPath);

                        string ProjectsUsersOwnPath = ProjectsUsersPath + "\\" + LoggedInUserID;

                        //create the directory 
                        CreateDirectory(ProjectsUsersOwnPath);
                    }

                    #endregion

                    dynamic returnItem = new JObject();
                    returnItem.Status = "Success";
                    returnItem.ProjectID = ProjectID;
                    return returnItem.ToString();

                }

            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        //update a project default information
        public string UpdateProjectPrimaryInfo(string secretKey, string projectID,
            //project information
            string projectName, string projectDescription, string projectCountry, string primaryContactID,
            //if this is 0 then the questiosn for which data and files are required should not be asked
            string numberOfMembers,
            //timeline
            string startDate, string endDate
            )
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                projectID = TrimIfNotNull(projectID);
                projectName = TrimIfNotNull(projectName);
                projectDescription = TrimIfNotNull(projectDescription);
                projectCountry = TrimIfNotNull(projectCountry);
                primaryContactID = TrimIfNotNull(primaryContactID);
                numberOfMembers = TrimIfNotNull(numberOfMembers);
                startDate = TrimIfNotNull(startDate);
                endDate = TrimIfNotNull(endDate);

                //check that the user has rights to update a project
                var username = CheckUserHasRight(secretKey, "UpdateProject");
                if (Utils.IsError(username))
                {
                    return username;
                }

                //check if the user is an administrator
                /*var IsAdmin = CheckUserHasAdminRole(secretKey);

                //if the user is not an admin 
                if (Utils.IsError(IsAdmin))
                {
                    var userCompany = CheckUserCompany(secretKey, companyID);
                    if (Utils.IsError(userCompany))
                    {
                        return userCompany;
                    }
                }*/

                //validation
                if (string.IsNullOrWhiteSpace(projectName))
                {
                    return Utils.WrapError("Please ensure that you enter the project name");
                }
                if (string.IsNullOrWhiteSpace(numberOfMembers))
                {
                    return Utils.WrapError("Please ensure that you enter the number of members");
                }
                if (string.IsNullOrWhiteSpace(primaryContactID))
                {
                    return Utils.WrapError("Please ensure that you select the primary contact person");
                }
                if (string.IsNullOrWhiteSpace(startDate))
                {
                    return Utils.WrapError("Please ensure that you enter the expected start date of the project");
                }
                if (string.IsNullOrWhiteSpace(endDate))
                {
                    return Utils.WrapError("Please ensure that you enter the expected end date of the project");
                }

                //convert the company id received
                /*Guid CompanyID;
                if (!Guid.TryParse(companyID, out CompanyID))
                {
                    return Utils.WrapError("Company ID is not in the correct format");
                }*/

                Guid ProjectID;
                if (!Guid.TryParse(projectID, out ProjectID))
                {
                    return Utils.WrapError("Project ID is not in the correct format");
                }

                //validation to parse to correct types
                Guid PrimaryContactID;
                if (!Guid.TryParse(primaryContactID, out PrimaryContactID))
                {
                    return Utils.WrapError("Primary Contact ID is not in the correct format");
                }
                int NumberOfMembers = 0;
                if (!Int32.TryParse(numberOfMembers, out NumberOfMembers))
                {
                    return Utils.WrapError("Number of members is not in the correct format");
                }
                DateTime StartDate;
                if (!DateTime.TryParse(startDate, out StartDate))
                {
                    return Utils.WrapError("Start date is not in the correct format");
                }
                DateTime EndDate;
                if (!DateTime.TryParse(endDate, out EndDate))
                {
                    return Utils.WrapError("End date is not in the correct format");
                }

                //check the project's status
                var projectStatus = CheckProjectStatus(projectID, "true", "true", "true");
                if (Utils.IsError(projectStatus))
                {
                    return projectStatus;
                }

                #region Check if the logged in user is assuming a company

                //check if the user is assuming a company
                var assumeResult = CheckAssumeCompany(secretKey);
                if (Utils.IsError(assumeResult))
                {
                    return assumeResult;
                }

                //parse the company ID to a Guid
                Guid CompanyID = Guid.Empty;
                if (!Guid.TryParse(assumeResult, out CompanyID))
                {
                    return Utils.WrapError("The ID of the Company that you are trying to view is in the incorrect format");
                }

                #endregion

                Guid LoggedInUserID = (Guid)Membership.GetUser(username).ProviderUserKey;

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    var project = (from p in entity.Projects
                                   where p.ID == ProjectID && p.ProjectCompany == CompanyID
                                   select p).FirstOrDefault();

                    if (project == null)
                    {
                        return Utils.WrapError("Your project could not be found");
                    }

                    var user = (from u in entity.aspnet_Membership
                                join cu in entity.CompanyUsers
                                on u.UserId equals cu.UserID
                                join r in entity.Roles
                                on cu.RoleID equals r.RoleId
                                where u.UserId == PrimaryContactID && cu.CompanyID == CompanyID
                                select new
                                {
                                    cu.RoleID,
                                    u.Email,
                                    r.RoleName
                                }).FirstOrDefault();

                    if (user == null)
                    {
                        return Utils.WrapError("The user you are trying to assign as the primary contact does not exist");
                    }

                    Guid RoleID;
                    if (!Guid.TryParse(user.RoleID + "", out RoleID))
                    {
                        return Utils.WrapError("Role ID is not in the correct format");
                    }

                    //if the old primary contact is not the same as the new primary contact
                    if (project.UserID != PrimaryContactID)
                    {
                        //activity stream for removing the primary contact
                        AddActivity(secretKey, CompanyID + "", primaryContactID, null, ProjectID + "", null, "removed the primary contact", ActivityType.User);

                        //if there is a old primary contact person, send them an email
                        var primaryContact = (from u in entity.aspnet_Membership
                                              where u.UserId == project.UserID
                                              select u).FirstOrDefault();

                        SendEmail(EmailPurpose.RemoveProjectUser, primaryContact.Email, CompanyID + "", projectName, "", "", "", null, "Primary Contact", "");

                    }

                    //check if the user is currently part of the project team
                    var projectTeam = (from p in entity.ProjectTeams
                                       join r in entity.Roles
                                       on p.RoleID equals r.RoleId
                                       join pr in entity.Projects
                                       on p.ProjectID equals pr.ID
                                       where p.ProjectID == ProjectID
                                       && p.UserID == PrimaryContactID && pr.ProjectCompany == CompanyID
                                       select p).FirstOrDefault();

                    //if they not part of the team, add them to the team
                    if (projectTeam == null)
                    {
                        var newTeamMember = new ProjectTeam();
                        newTeamMember.ID = Guid.NewGuid();
                        newTeamMember.ProjectID = ProjectID;
                        newTeamMember.UserID = PrimaryContactID;
                        newTeamMember.RoleID = RoleID;
                        newTeamMember.CompletedRegistration = false;
                        entity.ProjectTeams.Add(newTeamMember);

                    }

                    //update the projects details
                    project.ProjectName = projectName;
                    project.ProjectDescription = projectDescription;
                    project.ProjectCountry = projectCountry;
                    project.NumberOfMembers = NumberOfMembers;
                    //primary contact
                    project.UserID = PrimaryContactID;
                    //timeline
                    project.StartDate = StartDate;
                    project.EndDate = EndDate;

                    project.UpdatedBy = LoggedInUserID;
                    project.DateUpdated = DateTime.Now;

                    entity.Entry(project).State = EntityState.Modified;
                    entity.SaveChanges();

                    //activity stream for project update
                    AddActivity(secretKey, CompanyID + "", null, null, ProjectID + "", null, "updated the details for", ActivityType.Project);

                    //activity stream for new primary contact
                    AddActivity(secretKey, CompanyID + "", primaryContactID, null, ProjectID + "", null, "added a new primary contact", ActivityType.User);

                    //email the new primary contact
                    SendEmail(EmailPurpose.NewTeamMember, user.Email, CompanyID + "", projectName, "", "", "", user.RoleID + "", "Primary Contact", "");

                    //email the primary contact informing of project details being udated
                    string result2 = SendEmail(EmailPurpose.UpdateProject, user.Email, CompanyID + "", project.ProjectName, "", "", "", "", "", "");
                    if (Utils.IsError(result2))
                    {
                        return result2;
                    }

                    dynamic returnItem = new JObject();
                    returnItem.Status = "Success";
                    return returnItem.ToString();

                }

            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        //update a project required information
        public string UpdateProjectRequiredInfo(string secretKey, string projectID,
            //what data is required for the project - these should be received as true / false
            string isPassportNumberRequired, string isPassportExpiryDateRequired, string isMedicalAidNameRequired,
            string isMedicalAidNumberRequired, string isMedicalAidContactNumberRequired, string isBloodTypeRequired,
            string isAllergiesRequired, string isAllergiesDescriptionRequired, string isVaccinationsRequired,
            string isSafetyBootsRequired, string isVestRequired,
            //what files are required for upload - these should be received as true / false
            string isPassportDocRequired, string isETicketDocRequired, string isVisaDocRequired, string isAccommodationDocRequired,
            string isVaccinationDocRequired, string isDriversLicenseDocRequired, string isCustomsClearanceDocRequired,
            string otherInformation, string isEmergencyContactOneRequired, string isEmergencyContactTwoRequired
            )
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                projectID = TrimIfNotNull(projectID);
                isPassportNumberRequired = TrimIfNotNull(isPassportNumberRequired);
                isPassportExpiryDateRequired = TrimIfNotNull(isPassportExpiryDateRequired);
                isMedicalAidNameRequired = TrimIfNotNull(isMedicalAidNameRequired);
                isMedicalAidNumberRequired = TrimIfNotNull(isMedicalAidNumberRequired);
                isMedicalAidContactNumberRequired = TrimIfNotNull(isMedicalAidContactNumberRequired);
                isBloodTypeRequired = TrimIfNotNull(isBloodTypeRequired);
                isAllergiesRequired = TrimIfNotNull(isAllergiesRequired);
                isAllergiesDescriptionRequired = TrimIfNotNull(isAllergiesDescriptionRequired);
                isVaccinationsRequired = TrimIfNotNull(isVaccinationsRequired);
                isSafetyBootsRequired = TrimIfNotNull(isSafetyBootsRequired);
                isVestRequired = TrimIfNotNull(isVestRequired);
                isPassportDocRequired = TrimIfNotNull(isPassportDocRequired);
                isETicketDocRequired = TrimIfNotNull(isETicketDocRequired);
                isVisaDocRequired = TrimIfNotNull(isVisaDocRequired);
                isAccommodationDocRequired = TrimIfNotNull(isAccommodationDocRequired);
                isVaccinationDocRequired = TrimIfNotNull(isVaccinationDocRequired);
                isDriversLicenseDocRequired = TrimIfNotNull(isDriversLicenseDocRequired);
                isCustomsClearanceDocRequired = TrimIfNotNull(isCustomsClearanceDocRequired);
                otherInformation = TrimIfNotNull(otherInformation);
                isEmergencyContactOneRequired = TrimIfNotNull(isEmergencyContactOneRequired);
                isEmergencyContactTwoRequired = TrimIfNotNull(isEmergencyContactTwoRequired);

                //check that the user has rights to update a project
                var username = CheckUserHasRight(secretKey, "UpdateProject");
                if (Utils.IsError(username))
                {
                    return username;
                }

                //check if the user is an administrator
                /*var IsAdmin = CheckUserHasAdminRole(secretKey);

                //if the user is not an admin 
                if (Utils.IsError(IsAdmin))
                {
                    var userCompany = CheckUserCompany(secretKey, companyID);
                    if (Utils.IsError(userCompany))
                    {
                        return userCompany;
                    }
                }*/

                //validation
                if (string.IsNullOrWhiteSpace(isPassportNumberRequired))
                {
                    return Utils.WrapError("Please ensure that you indicate if the passport number is required");
                }
                if (string.IsNullOrWhiteSpace(isPassportExpiryDateRequired))
                {
                    return Utils.WrapError("Please ensure that you indicate if the passport expiry date is required");
                }
                if (string.IsNullOrWhiteSpace(isMedicalAidNameRequired))
                {
                    return Utils.WrapError("Please ensure that you indicate if the medical aid name is required");
                }
                if (string.IsNullOrWhiteSpace(isMedicalAidNumberRequired))
                {
                    return Utils.WrapError("Please ensure that you indicate if the medical aid number is required");
                }
                if (string.IsNullOrWhiteSpace(isMedicalAidContactNumberRequired))
                {
                    return Utils.WrapError("Please ensure that you indicate if the medical aid contact number is required");
                }
                if (string.IsNullOrWhiteSpace(isBloodTypeRequired))
                {
                    return Utils.WrapError("Please ensure that you indicate if the blood type is required");
                }
                if (string.IsNullOrWhiteSpace(isAllergiesRequired))
                {
                    return Utils.WrapError("Please ensure that you indicate if the allergy is required");
                }
                if (string.IsNullOrWhiteSpace(isAllergiesDescriptionRequired))
                {
                    return Utils.WrapError("Please ensure that you indicate if the allergy description is required");
                }
                if (string.IsNullOrWhiteSpace(isVaccinationsRequired))
                {
                    return Utils.WrapError("Please ensure that you indicate if a vaccination is required");
                }
                if (string.IsNullOrWhiteSpace(isSafetyBootsRequired))
                {
                    return Utils.WrapError("Please ensure that you indicate if safety boots are required");
                }
                if (string.IsNullOrWhiteSpace(isVestRequired))
                {
                    return Utils.WrapError("Please ensure that you indicate if a safety vest is required");
                }
                if (string.IsNullOrWhiteSpace(isPassportDocRequired))
                {
                    return Utils.WrapError("Please ensure that you indicate if a copy of the team members passport should be uploaded");
                }
                if (string.IsNullOrWhiteSpace(isETicketDocRequired))
                {
                    return Utils.WrapError("Please ensure that you indicate if a copy of the team members e-ticket should be uploaded");
                }
                if (string.IsNullOrWhiteSpace(isVisaDocRequired))
                {
                    return Utils.WrapError("Please ensure that you indicate if a copy of the team members visa should be uploaded");
                }
                if (string.IsNullOrWhiteSpace(isAccommodationDocRequired))
                {
                    return Utils.WrapError("Please ensure that you indicate if a copy of the team members accommodation confirmation should be uploaded");
                }
                if (string.IsNullOrWhiteSpace(isVaccinationDocRequired))
                {
                    return Utils.WrapError("Please ensure that you indicate if a copy of the team members vaccination certificates should be uploaded");
                }
                if (string.IsNullOrWhiteSpace(isDriversLicenseDocRequired))
                {
                    return Utils.WrapError("Please ensure that you indicate if a copy of the team members drivers license should be uploaded");
                }
                if (string.IsNullOrWhiteSpace(isCustomsClearanceDocRequired))
                {
                    return Utils.WrapError("Please ensure that you indicate if a copy of the team members customs clearance certificate should be uploaded");
                }

                //convert the company id received
                /*Guid CompanyID;
                if (!Guid.TryParse(companyID, out CompanyID))
                {
                    return Utils.WrapError("Company ID is not in the correct format");
                }
                */
                Guid ProjectID;
                if (!Guid.TryParse(projectID, out ProjectID))
                {
                    return Utils.WrapError("Project ID is not in the correct format");
                }

                //validation to parse to correct types
                bool IsPassportNumberRequired;
                if (!Boolean.TryParse(isPassportNumberRequired, out IsPassportNumberRequired))
                {
                    return Utils.WrapError("isPassportNumberRequired is not in the correct format");
                }
                bool IsPassportExpiryDateRequired;
                if (!Boolean.TryParse(isPassportExpiryDateRequired, out IsPassportExpiryDateRequired))
                {
                    return Utils.WrapError("IsPassportExpiryDateRequired is not in the correct format");
                }
                bool IsMedicalAidNameRequired;
                if (!Boolean.TryParse(isMedicalAidNameRequired, out IsMedicalAidNameRequired))
                {
                    return Utils.WrapError("isMedicalAidNameRequired is not in the correct format");
                }
                bool IsMedicalAidNumberRequired;
                if (!Boolean.TryParse(isMedicalAidNumberRequired, out IsMedicalAidNumberRequired))
                {
                    return Utils.WrapError("isMedicalAidNumberRequired is not in the correct format");
                }
                bool IsMedicalAidContactNumberRequired;
                if (!Boolean.TryParse(isMedicalAidContactNumberRequired, out IsMedicalAidContactNumberRequired))
                {
                    return Utils.WrapError("isMedicalAidContactNumberRequired is not in the correct format");
                }
                bool IsBloodTypeRequired;
                if (!Boolean.TryParse(isBloodTypeRequired, out IsBloodTypeRequired))
                {
                    return Utils.WrapError("isBloodTypeRequired is not in the correct format");
                }
                bool IsAllergiesRequired;
                if (!Boolean.TryParse(isAllergiesRequired, out IsAllergiesRequired))
                {
                    return Utils.WrapError("isAllergiesRequired is not in the correct format");
                }
                bool IsAllergiesDescriptionRequired;
                if (!Boolean.TryParse(isAllergiesDescriptionRequired, out IsAllergiesDescriptionRequired))
                {
                    return Utils.WrapError("isAllergiesDescriptionRequired is not in the correct format");
                }
                bool IsVaccinationsRequired;
                if (!Boolean.TryParse(isVaccinationsRequired, out IsVaccinationsRequired))
                {
                    return Utils.WrapError("IsVaccinationsRequired is not in the correct format");
                }
                bool IsSafetyBootsRequired;
                if (!Boolean.TryParse(isSafetyBootsRequired, out IsSafetyBootsRequired))
                {
                    return Utils.WrapError("IsSafetyBootsRequired is not in the correct format");
                }
                bool IsVestRequired;
                if (!Boolean.TryParse(isVestRequired, out IsVestRequired))
                {
                    return Utils.WrapError("IsVestRequired is not in the correct format");
                }
                bool IsPassportDocRequired;
                if (!Boolean.TryParse(isPassportDocRequired, out IsPassportDocRequired))
                {
                    return Utils.WrapError("IsPassportDocRequired is not in the correct format");
                }
                bool IsETicketDocRequired;
                if (!Boolean.TryParse(isETicketDocRequired, out IsETicketDocRequired))
                {
                    return Utils.WrapError("IsETicketDocRequired is not in the correct format");
                }
                bool IsVisaDocRequired;
                if (!Boolean.TryParse(isVisaDocRequired, out IsVisaDocRequired))
                {
                    return Utils.WrapError("IsVisaDocRequired is not in the correct format");
                }
                bool IsAccommodationDocRequired;
                if (!Boolean.TryParse(isAccommodationDocRequired, out IsAccommodationDocRequired))
                {
                    return Utils.WrapError("IsAccommodationDocRequired is not in the correct format");
                }
                bool IsVaccinationDocRequired;
                if (!Boolean.TryParse(isVaccinationDocRequired, out IsVaccinationDocRequired))
                {
                    return Utils.WrapError("IsVaccinationDocRequired is not in the correct format");
                }
                bool IsDriversLicenseDocRequired;
                if (!Boolean.TryParse(isDriversLicenseDocRequired, out IsDriversLicenseDocRequired))
                {
                    return Utils.WrapError("IsDriversLicenseDocRequired is not in the correct format");
                }
                bool IsCustomsClearanceDocRequired;
                if (!Boolean.TryParse(isCustomsClearanceDocRequired, out IsCustomsClearanceDocRequired))
                {
                    return Utils.WrapError("IsCustomsClearanceDocRequired is not in the correct format");
                }

                bool IsEmergencyContactOneRequired;
                if (!Boolean.TryParse(isEmergencyContactOneRequired, out IsEmergencyContactOneRequired))
                {
                    return Utils.WrapError("IsEmergencyContactOneRequired is not in the correct format");
                }
                bool IsEmergencyContactTwoRequired;
                if (!Boolean.TryParse(isEmergencyContactTwoRequired, out IsEmergencyContactTwoRequired))
                {
                    return Utils.WrapError("IsEmergencyContactTwoRequired is not in the correct format");
                }

                //check the project's status
                var projectStatus = CheckProjectStatus(projectID, "true", "true", "true");
                if (Utils.IsError(projectStatus))
                {
                    return projectStatus;
                }

                #region Check if the logged in user is assuming a company

                //check if the user is assuming a company
                var assumeResult = CheckAssumeCompany(secretKey);
                if (Utils.IsError(assumeResult))
                {
                    return assumeResult;
                }

                //parse the company ID to a Guid
                Guid CompanyID = Guid.Empty;
                if (!Guid.TryParse(assumeResult, out CompanyID))
                {
                    return Utils.WrapError("The ID of the Company that you are trying to view is in the incorrect format");
                }

                #endregion

                Guid LoggedInUserID = (Guid)Membership.GetUser(username).ProviderUserKey;

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    var project = (from p in entity.Projects
                                   where p.ID == ProjectID && p.ProjectCompany == CompanyID
                                   select p).FirstOrDefault();

                    if (project == null)
                    {
                        return Utils.WrapError("Your project could not be found");
                    }

                    //what data is required for the project
                    project.IsPassportNumberRequired = IsPassportNumberRequired;
                    project.IsPassportExpiryDateRequired = IsPassportExpiryDateRequired;
                    project.IsMedicalAidNameRequired = IsMedicalAidNameRequired;
                    project.IsMedicalAidNumberRequired = IsMedicalAidNumberRequired;
                    project.IsMedicalAidContactNumberRequired = IsMedicalAidContactNumberRequired;
                    project.IsBloodTypeRequired = IsBloodTypeRequired;
                    project.IsAllergiesRequired = IsAllergiesRequired;
                    project.IsAllergiesDescriptionRequired = IsAllergiesDescriptionRequired;
                    project.IsVaccinationsRequired = IsVaccinationsRequired;
                    project.IsSafetyBootsRequired = IsSafetyBootsRequired;
                    project.IsVestRequired = IsVestRequired;
                    //what files are required to upload
                    project.IsPassportDocRequired = IsPassportDocRequired;
                    project.IsETicketDocRequired = IsETicketDocRequired;
                    project.IsVisaDocRequired = IsVisaDocRequired;
                    project.IsAccommodationDocRequired = IsAccommodationDocRequired;
                    project.IsVaccinationDocRequired = IsVaccinationDocRequired;
                    project.IsDriversLicenseDocRequired = IsDriversLicenseDocRequired;
                    project.IsCustomsClearanceDocRequired = IsCustomsClearanceDocRequired;
                    project.UpdatedBy = LoggedInUserID;
                    project.DateUpdated = DateTime.Now;
                    project.OtherInfoRequired = otherInformation;
                    project.IsEmergencyContactOneRequired = IsEmergencyContactOneRequired;
                    project.IsEmergencyContactTwoRequired = IsEmergencyContactTwoRequired;

                    entity.Entry(project).State = EntityState.Modified;
                    entity.SaveChanges();

                    //activity stream
                    AddActivity(secretKey, CompanyID + "", null, null, ProjectID + "", null, "updated the required user data for", ActivityType.Project);

                    //if there is a primary contact person, send them an email
                    var primaryContact = (from u in entity.aspnet_Membership
                                          where u.UserId == project.UserID
                                          select u).FirstOrDefault();

                    if (primaryContact != null)
                    {
                        string result = SendEmail(EmailPurpose.UpdateProject, primaryContact.Email, CompanyID + "", project.ProjectName, "", "", "", "", "", "");

                        if (Utils.IsError(result))
                        {
                            return result;
                        }
                    }
                    dynamic returnItem = new JObject();
                    returnItem.Status = "Success";
                    return returnItem.ToString();

                }

            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }


        //deactivate a project
        public string DeactivateProject(string secretKey, string projectID)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                projectID = TrimIfNotNull(projectID);

                string username = CheckUserHasRight(secretKey, "DeactivateProject");
                if (Utils.IsError(username))
                {
                    return username;
                }

                Guid ProjectID;
                if (!Guid.TryParse(projectID, out ProjectID))
                {
                    return Utils.WrapError("Project ID is not in the correct format");
                }

                //convert the company id received
                /*Guid CompanyID;
                if (!Guid.TryParse(companyID, out CompanyID))
                {
                    return Utils.WrapError("Company ID is not in the correct format");
                }
                //check if the user is an administrator
                var IsAdmin = CheckUserHasAdminRole(secretKey);

                //if the user is not an admin 
                if (Utils.IsError(IsAdmin))
                {
                    var userCompany = CheckUserCompany(secretKey, companyID);
                    if (Utils.IsError(userCompany))
                    {
                        return userCompany;
                    }
                }*/

                #region Check if the logged in user is assuming a company

                //check if the user is assuming a company
                var assumeResult = CheckAssumeCompany(secretKey);
                if (Utils.IsError(assumeResult))
                {
                    return assumeResult;
                }

                //parse the company ID to a Guid
                Guid CompanyID = Guid.Empty;
                if (!Guid.TryParse(assumeResult, out CompanyID))
                {
                    return Utils.WrapError("The ID of the Company that you are trying to view is in the incorrect format");
                }

                #endregion

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {

                    var project = (from u in entity.Projects
                                   where u.ID == ProjectID && u.ProjectCompany == CompanyID
                                   select u).FirstOrDefault();

                    if (project == null)
                    {
                        return Utils.WrapError("The project you are trying to delete does not exist");
                    }

                    project.IsActive = false;
                    entity.Entry(project).State = EntityState.Modified;
                    entity.SaveChanges();

                    //activity stream
                    AddActivity(secretKey, CompanyID + "", null, null, ProjectID + "", null, "deactivated project", ActivityType.Project);

                }

                dynamic returnItem = new JObject();
                returnItem.Status = "Success";
                return returnItem.ToString();
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        //reactivate a project
        public string ReactivateProject(string secretKey, string projectID)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                projectID = TrimIfNotNull(projectID);

                string username = CheckUserHasRight(secretKey, "ReactivateProject");
                if (Utils.IsError(username))
                {
                    return username;
                }

                Guid ProjectID;
                if (!Guid.TryParse(projectID, out ProjectID))
                {
                    return Utils.WrapError("Project ID is not in the correct format");
                }

                //convert the company id received
                /*Guid CompanyID;
                if (!Guid.TryParse(companyID, out CompanyID))
                {
                    return Utils.WrapError("Company ID is not in the correct format");
                }
                //check if the user is an administrator
                var IsAdmin = CheckUserHasAnyAdminRole(secretKey);

                //if the user is not an admin 
                if (Utils.IsError(IsAdmin))
                {
                    var userCompany = CheckUserCompany(secretKey, companyID);
                    if (Utils.IsError(userCompany))
                    {
                        return userCompany;
                    }
                }*/

                #region Check if the logged in user is assuming a company

                //check if the user is assuming a company
                var assumeResult = CheckAssumeCompany(secretKey);
                if (Utils.IsError(assumeResult))
                {
                    return assumeResult;
                }

                //parse the company ID to a Guid
                Guid CompanyID = Guid.Empty;
                if (!Guid.TryParse(assumeResult, out CompanyID))
                {
                    return Utils.WrapError("The ID of the Company that you are trying to view is in the incorrect format");
                }

                #endregion

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {

                    var project = (from u in entity.Projects
                                   where u.ID == ProjectID && u.ProjectCompany == CompanyID
                                   select u).FirstOrDefault();

                    if (project == null)
                    {
                        return Utils.WrapError("The project you are trying to reactivate does not exist");
                    }

                    project.IsActive = true;
                    entity.Entry(project).State = EntityState.Modified;
                    entity.SaveChanges();

                    //activity stream
                    AddActivity(secretKey, CompanyID + "", null, null, ProjectID + "", null, "reactivated project", ActivityType.Project);

                }

                dynamic returnItem = new JObject();
                returnItem.Status = "Success";
                return returnItem.ToString();
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        //add a team member to your project
        public string AddTeamMember(string secretKey, string projectID, string emailAddress, string roleID)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                projectID = TrimIfNotNull(projectID);
                emailAddress = TrimIfNotNull(emailAddress);
                roleID = TrimIfNotNull(roleID);

                var username = CheckUserHasRight(secretKey, "AddTeamMember");

                if (Utils.IsError(username))
                {
                    return username;
                }

                //check if the user is an administrator
                /*var IsAdmin = CheckUserHasAdminRole(secretKey);

                //if the user is not an admin 
                if (Utils.IsError(IsAdmin))
                {
                    var userCompany = CheckUserCompany(secretKey, companyID);
                    if (Utils.IsError(userCompany))
                    {
                        return userCompany;
                    }

                }

                //convert the company id received
                Guid CompanyID;
                if (!Guid.TryParse(companyID, out CompanyID))
                {
                    return Utils.WrapError("Company ID is not in the correct format");
                }*/

                if (string.IsNullOrWhiteSpace(emailAddress))
                {
                    return Utils.WrapError("Please ensure that you enter the email address");
                }

                Guid ProjectID;
                if (!Guid.TryParse(projectID, out ProjectID))
                {
                    return Utils.WrapError("ProjectID is not in the correct format");
                }

                Guid RoleID;
                if (!Guid.TryParse(roleID, out RoleID))
                {
                    return Utils.WrapError("Role ID is not in the correct format");
                }

                //check the project's status
                var projectStatus = CheckProjectStatus(projectID, "true", null, "true");
                if (Utils.IsError(projectStatus))
                {
                    return projectStatus;
                }

                #region Check if the logged in user is assuming a company

                //check if the user is assuming a company
                var assumeResult = CheckAssumeCompany(secretKey);
                if (Utils.IsError(assumeResult))
                {
                    return assumeResult;
                }

                //parse the company ID to a Guid
                Guid CompanyID = Guid.Empty;
                if (!Guid.TryParse(assumeResult, out CompanyID))
                {
                    return Utils.WrapError("The ID of the Company that you are trying to view is in the incorrect format");
                }

                #endregion

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    //get the project you are wanting to add a team member to
                    var project = (from p in entity.Projects
                                   where p.ID == ProjectID && p.ProjectCompany == CompanyID
                                   select p).FirstOrDefault();

                    if (project == null)
                    {
                        return Utils.WrapError("The project you are trying to add users to does not exist");
                    }

                    //get the role information for the role you are trying to add the new useer to
                    var roleInfo = (from r in entity.Roles
                                    where r.RoleId == RoleID
                                    select r).FirstOrDefault();

                    //if the role you are trying to assign does not exist in the database
                    if (roleInfo == null)
                    {
                        return Utils.WrapError("The role you are trying to assign the team member to does not exist");
                    }

                    //get the user you are trying to add
                    var user = (from u in entity.aspnet_Membership
                                where u.LoweredEmail == emailAddress.ToLower()
                                select u).FirstOrDefault();

                    string thePassword = "";

                    Guid TheUserID = Guid.Empty;
                    string VerifyEmailRequestID = "";

                    string DocumentManagerPath = ConfigurationManager.AppSettings["DocumentManagerPath"].ToString();

                    //if there is no user with that email address
                    if (user == null)
                    {

                        //check if the company is allowed to add more users
                        var packageResult = CheckCompanyPackageNoUsers(CompanyID + "");
                        if (Utils.IsError(packageResult))
                        {
                            return packageResult;
                        }
                        //create a new password
                        thePassword = Helper.CreatePassword(7, 1, 1, false);

                        //create a new user
                        MembershipUser newMembershipUser = Membership.CreateUser(emailAddress, thePassword, emailAddress);

                        //get the new user's id
                        TheUserID = (Guid)newMembershipUser.ProviderUserKey;

                        //new user info
                        var newUser = (from u in entity.aspnet_Membership
                                       where u.UserId == TheUserID
                                       select u).FirstOrDefault();

                        if (newUser == null)
                        {
                            return Utils.WrapError("The registration unexpectedly failed");
                        }

                        //link the new user to the company
                        var newUserCompany = new CompanyUser();
                        newUserCompany.ID = Guid.NewGuid();
                        newUserCompany.UserID = TheUserID;
                        newUserCompany.CompanyID = CompanyID;

                        newUserCompany.RoleID = roleInfo.RoleId;
                        entity.CompanyUsers.Add(newUserCompany);

                        //add a new request for the email to be verified
                        var newVerifyRequest = new VerifyEmailRequest();
                        Guid RequestID = Guid.NewGuid();
                        newVerifyRequest.ID = RequestID;
                        newVerifyRequest.DateRequested = DateTime.Now;
                        newVerifyRequest.UserID = TheUserID;
                        newVerifyRequest.IsDeleted = false;
                        entity.VerifyEmailRequests.Add(newVerifyRequest);
                        VerifyEmailRequestID = RequestID + "";

                        entity.SaveChanges();

                        #region Document Manager

                        //path on where to save the documents
                        string UsersPath = DocumentManagerPath + "\\" + CompanyID + "\\Users\\" + TheUserID;

                        //create the directory 
                        CreateDirectory(UsersPath);

                        #endregion
                    }
                    //if the user already exists
                    else
                    {

                        //check if the user is part of your company
                        var curCompUsers = (from cu in entity.CompanyUsers
                                            where cu.CompanyID == CompanyID && cu.UserID == user.UserId
                                            select cu).FirstOrDefault();

                        if (curCompUsers == null)
                        {
                            return Utils.WrapError("The user you are trying to add is already registered with another company using this email address. " +
                                "Please request an alternative email address from the user");
                        }


                        thePassword = "";
                        TheUserID = user.UserId;
                        VerifyEmailRequestID = "";
                    }

                    //check if the user is already assigned to the project
                    var curProjectTeam = (from p in entity.ProjectTeams
                                          where p.UserID == TheUserID &&
                                          p.ProjectID == ProjectID
                                          select p).FirstOrDefault();

                    if (curProjectTeam != null)
                    {
                        return Utils.WrapError("User has already been added to this project");
                    }

                    //create a new Project Team member
                    var newProjectTeamMember = new ProjectTeam();
                    newProjectTeamMember.ID = Guid.NewGuid();
                    newProjectTeamMember.UserID = TheUserID;
                    newProjectTeamMember.ProjectID = ProjectID;
                    newProjectTeamMember.RoleID = roleInfo.RoleId;

                    var thisProj = (from pr in entity.Projects
                                    where pr.ID == ProjectID
                                    select pr).FirstOrDefault();
                    var curUser = (from u in entity.aspnet_Membership
                                   where u.UserId == TheUserID
                                   select u).FirstOrDefault();

                    //assume true and then try to disprove it
                    bool CompletedRegistration = true;

                    if (thisProj != null)
                    {

                        var userVaccinations = (from uv in entity.Vaccinations
                                                where uv.UserID == TheUserID
                                                select uv).ToList();

                        var userDocuments = (from ud in entity.Documents
                                             where ud.UserID == TheUserID
                                             select ud).ToList();

                        #region Emergency contact & Passport
                        if (thisProj.IsEmergencyContactOneRequired.HasValue && thisProj.IsEmergencyContactOneRequired.Value == true)
                        {
                            if (String.IsNullOrWhiteSpace(curUser.EmergencyContact1ContactNumber))
                            { CompletedRegistration = false; }
                        }
                        if (thisProj.IsEmergencyContactTwoRequired.HasValue && thisProj.IsEmergencyContactTwoRequired.Value == true)
                        {
                            if (String.IsNullOrWhiteSpace(curUser.EmergencyContact2ContactNumber))
                            { CompletedRegistration = false; }
                        }

                        if (thisProj.IsPassportNumberRequired == true)
                        {
                            if (String.IsNullOrWhiteSpace(curUser.PassportNumber))
                            { CompletedRegistration = false; }
                        }

                        #endregion

                        #region Medical

                        if (thisProj.IsMedicalAidNameRequired == true)
                        {
                            if (String.IsNullOrWhiteSpace(curUser.MedicalAidName))
                            { CompletedRegistration = false; }
                        }

                        if (thisProj.IsMedicalAidNumberRequired == true)
                        {
                            if (String.IsNullOrWhiteSpace(curUser.MedicalAidNumber))
                            { CompletedRegistration = false; }
                        }

                        if (thisProj.IsMedicalAidContactNumberRequired == true)
                        {
                            if (String.IsNullOrWhiteSpace(curUser.MedicalAidContactNumber))
                            { CompletedRegistration = false; }
                        }

                        if (thisProj.IsBloodTypeRequired == true)
                        {
                            if (String.IsNullOrWhiteSpace(curUser.BloodType))
                            { CompletedRegistration = false; }
                        }

                        if (thisProj.IsAllergiesDescriptionRequired == true)
                        {
                            if (String.IsNullOrWhiteSpace(curUser.AllergyDescription))
                            { CompletedRegistration = false; }
                        }

                        #endregion

                        #region Protective clothing

                        if (thisProj.IsSafetyBootsRequired == true)
                        {
                            if (String.IsNullOrWhiteSpace(curUser.SafetyBootsSize))
                            { CompletedRegistration = false; }
                        }

                        if (thisProj.IsVestRequired == true)
                        {
                            if (String.IsNullOrWhiteSpace(curUser.HighVisibilityVestSize))
                            { CompletedRegistration = false; }
                        }
                        #endregion

                        #region Required Documents
                        if (thisProj.IsAccommodationDocRequired.HasValue && thisProj.IsAccommodationDocRequired.Value == true)
                        {
                            if (userDocuments == null || !userDocuments.Exists(d => d.TypeNumber == (int)docType.AccommodationConfirmation))
                            { CompletedRegistration = false; }
                        }

                        if (thisProj.IsCustomsClearanceDocRequired.HasValue && thisProj.IsCustomsClearanceDocRequired.Value == true)
                        {
                            if (userDocuments == null || !userDocuments.Exists(d => d.TypeNumber == (int)docType.CustomsClearanceCertificates))
                            { CompletedRegistration = false; }
                        }

                        if (thisProj.IsDriversLicenseDocRequired.HasValue && thisProj.IsDriversLicenseDocRequired.Value == true)
                        {
                            if (userDocuments == null || !userDocuments.Exists(d => d.TypeNumber == (int)docType.DriversLicense))
                            { CompletedRegistration = false; }
                        }

                        if (thisProj.IsETicketDocRequired.HasValue && thisProj.IsETicketDocRequired.Value == true)
                        {
                            if (userDocuments == null || !userDocuments.Exists(d => d.TypeNumber == (int)docType.ETickets))
                            { CompletedRegistration = false; }
                        }

                        if (thisProj.IsPassportDocRequired.HasValue && thisProj.IsPassportDocRequired.Value == true)
                        {
                            if (userDocuments == null || !userDocuments.Exists(d => d.TypeNumber == (int)docType.Passport))
                            { CompletedRegistration = false; }
                        }

                        if (thisProj.IsVaccinationDocRequired.HasValue && thisProj.IsVaccinationDocRequired.Value == true)
                        {
                            if (userDocuments == null || !userDocuments.Exists(d => d.TypeNumber == (int)docType.VaccinationCertificates))
                            { CompletedRegistration = false; }
                        }

                        if (thisProj.IsVisaDocRequired.HasValue && thisProj.IsVisaDocRequired.Value == true)
                        {
                            if (userDocuments == null || !userDocuments.Exists(d => d.TypeNumber == (int)docType.VaccinationCertificates))
                            { CompletedRegistration = false; }
                        }
                        #endregion
                    }
                    newProjectTeamMember.IsActive = CompletedRegistration;
                    newProjectTeamMember.CompletedRegistration = CompletedRegistration;
                    entity.ProjectTeams.Add(newProjectTeamMember);


                    entity.SaveChanges();

                    //activity stream
                    AddActivity(secretKey, CompanyID + "", TheUserID + "", null, ProjectID + "", null, "added project user", ActivityType.User);

                    #region Document Manager

                    //path on where to save the documents
                    string ProjectsUsersPath = DocumentManagerPath + "\\" + CompanyID + "\\Projects\\" + ProjectID + "\\Users\\" + TheUserID;

                    //create the directory 
                    CreateDirectory(ProjectsUsersPath);

                    #endregion

                    //send a email to the new team member
                    return SendEmail(EmailPurpose.NewTeamMember, emailAddress, CompanyID + "", project.ProjectName, "", thePassword, "", roleInfo.RoleId + "", roleInfo.RoleName, VerifyEmailRequestID);
                }
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        //remove a team member on your project
        public string RemoveTeamMember(string secretKey, string projectID, string userID)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                projectID = TrimIfNotNull(projectID);
                userID = TrimIfNotNull(userID);

                var username = CheckUserHasRight(secretKey, "RemoveTeamMember");

                if (Utils.IsError(username))
                {
                    return username;
                }

                //check if the user is an administrator
                /*var IsAdmin = CheckUserHasAdminRole(secretKey);

                //if the user is not an admin 
                if (Utils.IsError(IsAdmin))
                {
                    var userCompany = CheckUserCompany(secretKey, companyID);
                    if (Utils.IsError(userCompany))
                    {
                        return userCompany;
                    }
                }*/

                Guid ProjectID;
                if (!Guid.TryParse(projectID, out ProjectID))
                {
                    return Utils.WrapError("Project ID is not in the correct format");
                }

                //convert the company id received
                /*Guid CompanyID;
                if (!Guid.TryParse(companyID, out CompanyID))
                {
                    return Utils.WrapError("Company ID is not in the correct format");
                }*/

                //convert the user id received
                Guid UserID;
                if (!Guid.TryParse(userID, out UserID))
                {
                    return Utils.WrapError("User ID is not in the correct format");
                }

                //check the project's status
                var projectStatus = CheckProjectStatus(projectID, "true", "true", "true");
                if (Utils.IsError(projectStatus))
                {
                    return projectStatus;
                }

                #region Check if the logged in user is assuming a company

                //check if the user is assuming a company
                var assumeResult = CheckAssumeCompany(secretKey);
                if (Utils.IsError(assumeResult))
                {
                    return assumeResult;
                }

                //parse the company ID to a Guid
                Guid CompanyID = Guid.Empty;
                if (!Guid.TryParse(assumeResult, out CompanyID))
                {
                    return Utils.WrapError("The ID of the Company that you are trying to view is in the incorrect format");
                }

                #endregion

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    //get the project you are wanting to add a team member to
                    var project = (from p in entity.Projects
                                   where p.ID == ProjectID && p.ProjectCompany == CompanyID
                                   select p).FirstOrDefault();

                    if (project == null)
                    {
                        return Utils.WrapError("Project not found");
                    }

                    //get the user you are trying to remove
                    var user = (from u in entity.aspnet_Membership
                                where u.UserId == UserID
                                select u).FirstOrDefault();

                    //if there is no user with that ID
                    if (user == null)
                    {
                        return Utils.WrapError("User not found");
                    }


                    //check if the user is assigned to a survey for the project
                    var surveysForUser = (from st in entity.SurveyTeams
                                          join s in entity.Surveys
                                          on st.SurveyID equals s.ID
                                          where st.UserID == UserID && s.ProjectID == ProjectID
                                          select st).ToList();


                    if (surveysForUser != null && surveysForUser.Count > 0)
                    {
                        entity.SurveyTeams.RemoveRange(surveysForUser);
                    }


                    //check if the user is assigned to the project
                    var curProjectTeam = (from p in entity.ProjectTeams
                                          where p.UserID == UserID &&
                                          p.ProjectID == ProjectID
                                          select p).FirstOrDefault();

                    if (curProjectTeam == null)
                    {
                        return Utils.WrapError("User was not part of this project team");
                    }


                    entity.ProjectTeams.Remove(curProjectTeam);
                    entity.Entry(curProjectTeam).State = EntityState.Deleted;


                    entity.SaveChanges();

                    //activity stream
                    AddActivity(secretKey, CompanyID + "", userID, null, ProjectID + "", null, "removed project user", ActivityType.User);

                    dynamic returnItem = new JObject();
                    returnItem.Status = "Success";
                    return returnItem.ToString();
                }
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        //deactivate a team member on your project
        public string DeactivateTeamMember(string secretKey, string projectID, string userID)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                projectID = TrimIfNotNull(projectID);
                userID = TrimIfNotNull(userID);

                var username = CheckUserHasRight(secretKey, "ActivateTeamMember");
                if (Utils.IsError(username))
                {
                    return username;
                }

                //check if the user is an administrator
                /*var IsAdmin = CheckUserHasAdminRole(secretKey);

                //if the user is not an admin 
                if (Utils.IsError(IsAdmin))
                {
                    //get the company that the logged in user works for
                    var userCompany = CheckUserCompany(secretKey, companyID);
                    if (Utils.IsError(userCompany))
                    {
                        return userCompany;
                    }
                }*/

                Guid ProjectID;
                if (!Guid.TryParse(projectID, out ProjectID))
                {
                    return Utils.WrapError("Project ID is not in the correct format");
                }

                //convert the company id received
                /*Guid CompanyID;
                if (!Guid.TryParse(companyID, out CompanyID))
                {
                    return Utils.WrapError("Company ID is not in the correct format");
                }*/

                //convert the user id received
                Guid UserID;
                if (!Guid.TryParse(userID, out UserID))
                {
                    return Utils.WrapError("User ID is not in the correct format");
                }

                //check the project's status
                var projectStatus = CheckProjectStatus(projectID, "true", null, "true");
                if (Utils.IsError(projectStatus))
                {
                    return projectStatus;
                }


                #region Check if the logged in user is assuming a company

                //check if the user is assuming a company
                var assumeResult = CheckAssumeCompany(secretKey);
                if (Utils.IsError(assumeResult))
                {
                    return assumeResult;
                }

                //parse the company ID to a Guid
                Guid CompanyID = Guid.Empty;
                if (!Guid.TryParse(assumeResult, out CompanyID))
                {
                    return Utils.WrapError("The ID of the Company that you are trying to view is in the incorrect format");
                }

                #endregion

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    //check if the user is assigned to the project
                    var curProjectTeam = (from p in entity.ProjectTeams
                                          join pr in entity.Projects
                                          on p.ProjectID equals pr.ID
                                          where p.UserID == UserID &&
                                          p.ProjectID == ProjectID && pr.ProjectCompany == CompanyID
                                          select p).FirstOrDefault();

                    if (curProjectTeam == null)
                    {
                        return Utils.WrapError("User was not part of this project team");
                    }

                    curProjectTeam.IsActive = false;

                    entity.Entry(curProjectTeam).State = EntityState.Modified;
                    entity.SaveChanges();

                    //activity stream
                    AddActivity(secretKey, CompanyID + "", userID, null, ProjectID + "", null, "deactivated project user", ActivityType.User);

                }

                dynamic returnItem = new JObject();
                returnItem.Status = "Success";
                return returnItem.ToString();
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        //reactivate a team member on your project
        public string ReactivateTeamMember(string secretKey, string projectID, string userID)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                projectID = TrimIfNotNull(projectID);
                userID = TrimIfNotNull(userID);

                var username = CheckUserHasRight(secretKey, "ActivateTeamMember");
                if (Utils.IsError(username))
                {
                    return username;
                }

                //check if the user is an administrator
                /*var IsAdmin = CheckUserHasAdminRole(secretKey);

                //if the user is not an admin 
                if (Utils.IsError(IsAdmin))
                {
                    //get the company that the logged in user works for
                    var userCompany = CheckUserCompany(secretKey, companyID);
                    if (Utils.IsError(userCompany))
                    {
                        return userCompany;
                    }
                }*/

                Guid ProjectID;
                if (!Guid.TryParse(projectID, out ProjectID))
                {
                    return Utils.WrapError("Project ID is not in the correct format");
                }

                //convert the company id received
                /*Guid CompanyID;
                if (!Guid.TryParse(companyID, out CompanyID))
                {
                    return Utils.WrapError("Company ID is not in the correct format");
                }*/

                //convert the user id received
                Guid UserID;
                if (!Guid.TryParse(userID, out UserID))
                {
                    return Utils.WrapError("User ID is not in the correct format");
                }

                //check the project's status
                var projectStatus = CheckProjectStatus(projectID, "true", null, "true");
                if (Utils.IsError(projectStatus))
                {
                    return projectStatus;
                }

                #region Check if the logged in user is assuming a company

                //check if the user is assuming a company
                var assumeResult = CheckAssumeCompany(secretKey);
                if (Utils.IsError(assumeResult))
                {
                    return assumeResult;
                }

                //parse the company ID to a Guid
                Guid CompanyID = Guid.Empty;
                if (!Guid.TryParse(assumeResult, out CompanyID))
                {
                    return Utils.WrapError("The ID of the Company that you are trying to view is in the incorrect format");
                }

                #endregion

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    //check if the user is assigned to the project
                    var curProjectTeam = (from p in entity.ProjectTeams
                                          join pr in entity.Projects
                                          on p.ProjectID equals pr.ID
                                          where p.UserID == UserID &&
                                          p.ProjectID == ProjectID && pr.ProjectCompany == CompanyID
                                          select p).FirstOrDefault();

                    if (curProjectTeam == null)
                    {
                        return Utils.WrapError("User was not part of this project team");
                    }

                    curProjectTeam.IsActive = true;

                    entity.Entry(curProjectTeam).State = EntityState.Modified;
                    entity.SaveChanges();

                    //activity stream
                    AddActivity(secretKey, CompanyID + "", userID, null, ProjectID + "", null, "reactivated project user", ActivityType.User);

                }

                dynamic returnItem = new JObject();
                returnItem.Status = "Success";
                return returnItem.ToString();
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        public string ResendTeamMemberInvite(string secretKey, string projectID, string userID)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                userID = TrimIfNotNull(userID);
                projectID = TrimIfNotNull(projectID);

                var username = CheckUserHasRight(secretKey, "ResendTeamMemberInvite");
                if (Utils.IsError(username))
                {
                    return username;
                }

                //check if the user is an administrator
                /* var IsAdmin = CheckUserHasAdminRole(secretKey);

                 //if the user is not an admin 
                 if (Utils.IsError(IsAdmin))
                 {
                     var userCompany = CheckUserCompany(secretKey, companyID);
                     if (Utils.IsError(userCompany))
                     {
                         return userCompany;
                     }
                 }

                 //convert the company id received
                 Guid CompanyID;
                 if (!Guid.TryParse(companyID, out CompanyID))
                 {
                     return Utils.WrapError("Company ID is not in the correct format");
                 }*/

                Guid UserID;
                if (!Guid.TryParse(userID, out UserID))
                {
                    return Utils.WrapError("User ID is not in the correct format");
                }

                Guid ProjectID;
                if (!Guid.TryParse(projectID, out ProjectID))
                {
                    return Utils.WrapError("Project ID is not in the correct format");
                }

                //check if the project is active and can be changed
                var projectUserIsActive = CheckProjectUserIsActive(userID, projectID);
                if (Utils.IsError(projectUserIsActive))
                {
                    return projectUserIsActive;
                }

                #region Check if the logged in user is assuming a company

                //check if the user is assuming a company
                var assumeResult = CheckAssumeCompany(secretKey);
                if (Utils.IsError(assumeResult))
                {
                    return assumeResult;
                }

                //parse the company ID to a Guid
                Guid CompanyID = Guid.Empty;
                if (!Guid.TryParse(assumeResult, out CompanyID))
                {
                    return Utils.WrapError("The ID of the Company that you are trying to view is in the incorrect format");
                }

                #endregion

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    //get the user you are trying to add
                    var user = (from u in entity.aspnet_Membership
                                where u.UserId == UserID
                                select u).FirstOrDefault();


                    //if there is no user 
                    if (user == null)
                    {
                        return Utils.WrapError("The user was not found");
                    }

                    var project = (from p in entity.Projects
                                   join pt in entity.ProjectTeams
                                   on p.ID equals pt.ProjectID
                                   join r in entity.Roles
                                   on pt.RoleID equals r.RoleId
                                   where p.ID == ProjectID && p.ProjectCompany == CompanyID
                                   select new
                                   {
                                       p.ProjectName,
                                       r.RoleName,
                                       r.RoleId
                                   }).FirstOrDefault();

                    if (projectID == null)
                    {
                        return Utils.WrapError("The project was not found");
                    }

                    //activity stream
                    AddActivity(secretKey, CompanyID + "", userID, null, ProjectID + "", null, "reinvited project user", ActivityType.User);

                    //send a email to the new team member
                    //return SendEmailNewTeamMember(UserID.ToString(), project.ProjectName, user.Email, user.Email, "", companyID);
                    return SendEmail(EmailPurpose.NewTeamMember, user.Email, CompanyID + "", project.ProjectName, "", "", "", project.RoleId + "", project.RoleName, "");
                }
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        //import a team of people from an existing project to the new project. 
        public string ImportProjectTeam(string secretKey, string fromProjectID, string toProjectID)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                toProjectID = TrimIfNotNull(toProjectID);

                var username = CheckUserHasRight(secretKey, "ImportTeam");
                if (Utils.IsError(username))
                {
                    return username;
                }

                Guid ToProjectID;
                if (!Guid.TryParse(toProjectID, out ToProjectID))
                {
                    return Utils.WrapError("To Project ID is not in the correct format");
                }

                Guid FromProjectID;
                if (!Guid.TryParse(fromProjectID, out FromProjectID))
                {
                    return Utils.WrapError("From Project ID is not in the correct format");
                }

                //check the project's status
                var projectStatus = CheckProjectStatus(toProjectID, "true", "true", "true");
                if (Utils.IsError(projectStatus))
                {
                    return projectStatus;
                }

                Guid LoggedInUserID = (Guid)Membership.GetUser(username).ProviderUserKey;

                #region Check if the logged in user is assuming a company

                //check if the user is assuming a company
                var assumeResult = CheckAssumeCompany(secretKey);
                if (Utils.IsError(assumeResult))
                {
                    return assumeResult;
                }

                //parse the company ID to a Guid
                Guid CompanyID = Guid.Empty;
                if (!Guid.TryParse(assumeResult, out CompanyID))
                {
                    return Utils.WrapError("The ID of the Company that you are trying to view is in the incorrect format");
                }

                #endregion

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {

                    //get the old project's details
                    var fromProject = (from p in entity.Projects
                                       where p.ID == FromProjectID && p.ProjectCompany == CompanyID
                                       select p).FirstOrDefault();

                    if (fromProject == null)
                    {
                        return Utils.WrapError("The project you are trying to import team members from does not exist");
                    }


                    //get the new project's details
                    var newProject = (from p in entity.Projects
                                      where p.ID == ToProjectID && p.ProjectCompany == CompanyID
                                      select p).FirstOrDefault();

                    if (newProject == null)
                    {
                        return Utils.WrapError("The new project you are trying to import team members to does not exist");
                    }

                    //check that the user is on the old project's team
                    var fromProjectTeam = (from pt in entity.ProjectTeams
                                           join p in entity.Projects
                                           on pt.ProjectID equals p.ID
                                           join s in entity.Surveys
                                           on p.ID equals s.ProjectID
                                           where p.ID == FromProjectID && pt.UserID == LoggedInUserID
                                           select p).FirstOrDefault();

                    if (fromProjectTeam == null)
                    {
                        return Utils.WrapError("You cannot import users from this project as you are not on the project team");
                    }

                    //check that the user is on the old project's team
                    var newProjectTeam = (from pt in entity.ProjectTeams
                                          join p in entity.Projects
                                          on pt.ProjectID equals p.ID
                                          join s in entity.Surveys
                                          on p.ID equals s.ProjectID
                                          where p.ID == ToProjectID && pt.UserID == LoggedInUserID
                                          select p).FirstOrDefault();

                    if (newProjectTeam == null)
                    {
                        return Utils.WrapError("You cannot import users to this project as you are not on the project team");
                    }

                    //get the users on the old team
                    var oldUsers = (from t in entity.ProjectTeams
                                    join p in entity.Projects
                                    on t.ProjectID equals p.ID
                                    join u in entity.aspnet_Membership
                                   on t.UserID equals u.UserId
                                    join r in entity.Roles
                                    on t.RoleID equals r.RoleId
                                    where t.ProjectID == FromProjectID && p.ProjectCompany == CompanyID
                                    select new
                                    {
                                        t.RoleID,
                                        IsActive = t.IsActive,
                                        u.Email,
                                        u.Password,
                                        t.UserID,
                                        r.RoleName
                                    }).ToList();

                    if (oldUsers == null || oldUsers.Count() <= 0)
                    {
                        return Utils.WrapError("There are no users to import");
                    }

                    Guid[] ExistingNewUserIDs = null;

                    //get the existing users on the new team
                    var existingNewUsers = (from t in entity.ProjectTeams
                                            join p in entity.Projects
                                            on t.ProjectID equals p.ID
                                            where t.ProjectID == ToProjectID && p.ProjectCompany == CompanyID
                                            select new
                                            {
                                                t.UserID
                                            }).ToList();

                    //if there are users, add their id's to the array
                    if (existingNewUsers != null || existingNewUsers.Count() > 0)
                    {
                        ExistingNewUserIDs = new Guid[existingNewUsers.Count()];
                        int counter = 0;
                        foreach (var u in existingNewUsers)
                        {
                            ExistingNewUserIDs[counter] = u.UserID;
                            counter++;
                        }
                    }
                    //if there are no existing users, set the size to 0
                    else
                    {
                        ExistingNewUserIDs = new Guid[0];
                    }

                    //cycle through all the old users
                    foreach (var oldUser in oldUsers)
                    {
                        //check if the old user is not already assigned to the new project
                        if (!ExistingNewUserIDs.Contains(oldUser.UserID))
                        {
                            //add them to the new team
                            var newTeamMember = new ProjectTeam();
                            newTeamMember.ID = Guid.NewGuid();
                            newTeamMember.ProjectID = ToProjectID;
                            newTeamMember.UserID = oldUser.UserID;
                            newTeamMember.RoleID = oldUser.RoleID;
                            newTeamMember.CompletedRegistration = false;

                            entity.ProjectTeams.Add(newTeamMember);

                            #region Document Manager

                            //path on where to save the documents
                            string DocumentManagerPath = ConfigurationManager.AppSettings["DocumentManagerPath"].ToString();
                            string ProjectsUsersPath = DocumentManagerPath + "\\" + CompanyID + "\\Projects\\" + ToProjectID + "\\Users\\" + oldUser.UserID;

                            //create the directory 
                            CreateDirectory(ProjectsUsersPath);

                            #endregion
                        }


                        //activity stream
                        AddActivity(secretKey, CompanyID + "", oldUser.UserID + "", null, toProjectID + "", null, "added project user", ActivityType.User);

                        //send a email to the new team member
                        //SendEmailNewTeamMember(oldUser.UserID.ToString(), newProject.ProjectName, oldUser.Email, oldUser.Email, "", companyID);
                        SendEmail(EmailPurpose.NewTeamMember, oldUser.Email, CompanyID + "", newProject.ProjectName, "", "", "", oldUser.RoleID + "", oldUser.RoleName, "");
                    }

                    entity.SaveChanges();

                    //activity stream
                    AddActivity(secretKey, CompanyID + "", LoggedInUserID + "", null, toProjectID + "", null, "imported users to", ActivityType.Project);

                }


                dynamic returnItem = new JObject();
                returnItem.Status = "Success";
                return returnItem.ToString();
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        //send a email to request missing documents
        public string RequestProjectDocuments(string secretKey, string projectID)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                projectID = TrimIfNotNull(projectID);

                var username = CheckUserHasRight(secretKey, "RequestProjectDocuments");
                if (Utils.IsError(username))
                {
                    return username;
                }

                //check if the user is an administrator
                /*var IsAdmin = CheckUserHasAdminRole(secretKey);

                //if the user is not an admin 
                if (Utils.IsError(IsAdmin))
                {
                    var userCompany = CheckUserCompany(secretKey, companyID);
                    if (Utils.IsError(userCompany))
                    {
                        return userCompany;
                    }
                }

                //convert the company id received
                Guid CompanyID;
                if (!Guid.TryParse(companyID, out CompanyID))
                {
                    return Utils.WrapError("Company ID is not in the correct format");
                }*/

                Guid ProjectID;
                if (!Guid.TryParse(projectID, out ProjectID))
                {
                    return Utils.WrapError("Project ID is not in the correct format");
                }

                #region Check if the logged in user is assuming a company

                //check if the user is assuming a company
                var assumeResult = CheckAssumeCompany(secretKey);
                if (Utils.IsError(assumeResult))
                {
                    return assumeResult;
                }

                //parse the company ID to a Guid
                Guid CompanyID = Guid.Empty;
                if (!Guid.TryParse(assumeResult, out CompanyID))
                {
                    return Utils.WrapError("The ID of the Company that you are trying to view is in the incorrect format");
                }

                #endregion

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    var users = (from p in entity.Projects
                                 join t in entity.ProjectTeams
                                 on p.ID equals t.ProjectID
                                 join u in entity.aspnet_Membership
                                 on p.UserID equals u.UserId
                                 where p.ID == ProjectID && t.CompletedRegistration == false && p.ProjectCompany == CompanyID
                                 select new
                                 {
                                     u.UserId,
                                     u.Email,
                                     p.ProjectName
                                 }).ToList();

                    if (users != null)
                    {

                        foreach (var u in users)
                        {
                            //send email
                            /*string baseEmail = Helper.RetrieveMailTemplate("EmailTemplate.html");
                            string contentEmail = Helper.RetrieveMailTemplate("RequestProjectDouments.html");
                            baseEmail = baseEmail.Replace("[Content]", contentEmail);
                            baseEmail = baseEmail.Replace("[AppName]", "Surveya");
                            baseEmail = baseEmail.Replace("[HeaderText]", "Missing Project Documents");
                            baseEmail = baseEmail.Replace("[EmailAddress]", u.Email);
                            baseEmail = baseEmail.Replace("[ProjectName]", u.ProjectName);

                            //TODO: Link to send to the email
                            string theLink = ConfigurationManager.AppSettings["baseLinkPathLogin"].ToString();
                            baseEmail = baseEmail.Replace("[Link]", theLink);
                            baseEmail = baseEmail.Replace("[Username]", u.Email);
                            baseEmail = baseEmail.Replace("[Password]", "The password you chose, use forgot password if you do not remember it");

                            //send the email
                            Helper.SendMail(u.Email, "Missing Project Documents", baseEmail, true);*/

                            //activity stream
                            AddActivity(secretKey, CompanyID + "", u.UserId + "", null, ProjectID + "", null, "requested outstanding documentation from", ActivityType.User);

                            SendEmail(EmailPurpose.RequestProjectDocuments, u.Email, CompanyID + "", u.ProjectName, "", "", "", "", "", "");
                        }

                        //activity stream
                        AddActivity(secretKey, CompanyID + "", null, null, ProjectID + "", null, "emailed all users with outstanding documentation for", ActivityType.Project);

                    }
                }

                dynamic returnItem = new JObject();
                returnItem.Status = "Success";
                return returnItem.ToString();
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        //send a email to request missing documents
        public string WelcomeProjectTeamEmail(string secretKey, string projectID)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                projectID = TrimIfNotNull(projectID);

                var username = CheckUserHasRight(secretKey, "RequestProjectDocuments");
                if (Utils.IsError(username))
                {
                    return username;
                }

                Guid ProjectID;
                if (!Guid.TryParse(projectID, out ProjectID))
                {
                    return Utils.WrapError("Project ID is not in the correct format");
                }

                #region Check if the logged in user is assuming a company

                //check if the user is assuming a company
                var assumeResult = CheckAssumeCompany(secretKey);
                if (Utils.IsError(assumeResult))
                {
                    return assumeResult;
                }

                //parse the company ID to a Guid
                Guid CompanyID = Guid.Empty;
                if (!Guid.TryParse(assumeResult, out CompanyID))
                {
                    return Utils.WrapError("The ID of the Company that you are trying to view is in the incorrect format");
                }

                #endregion

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    var users = (from pt in entity.ProjectTeams
                                 join p in entity.Projects
                                 on pt.ProjectID equals p.ID
                                 join u in entity.aspnet_Membership
                                 on pt.UserID equals u.UserId
                                 where p.ID == ProjectID && p.ProjectCompany == CompanyID
                                 select new
                                 {
                                     u.UserId,
                                     u.Email,
                                     p.ProjectName
                                 }).ToList();

                    if (users != null)
                    {

                        foreach (var u in users)
                        {
                            //activity stream
                            AddActivity(secretKey, CompanyID + "", u.UserId + "", null, ProjectID + "", null, "welcomed new team member and requested documentation from", ActivityType.User);

                            SendEmail(EmailPurpose.WelcomeProjectTeam, u.Email, CompanyID + "", u.ProjectName, "", "", "", "", "", "");

                        }

                        //activity stream
                        AddActivity(secretKey, CompanyID + "", null, null, ProjectID + "", null, "welcomed all team members and requested documentation for", ActivityType.Project);

                    }
                }

                dynamic returnItem = new JObject();
                returnItem.Status = "Success";
                return returnItem.ToString();
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        //get the team members assigned to a project
        public string GetTeamMembers(string secretKey, string projectID, string getAll)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                projectID = TrimIfNotNull(projectID);

                var username = CheckUserHasRight(secretKey, "GetTeamMembers");
                if (Utils.IsError(username))
                {
                    return username;
                }
                //check if the user is an administrator
                /*var IsAdmin = CheckUserHasAdminRole(secretKey);

                //if the user is not an admin 
                if (Utils.IsError(IsAdmin))
                {
                    var userCompany = CheckUserCompany(secretKey, companyID);
                    if (Utils.IsError(userCompany))
                    {
                        return userCompany;
                    }
                }

                //convert the company id received
                Guid CompanyID;
                if (!Guid.TryParse(companyID, out CompanyID))
                {
                    return Utils.WrapError("Company ID is not in the correct format");
                }*/

                Guid ProjectID;
                if (!Guid.TryParse(projectID, out ProjectID))
                {
                    return Utils.WrapError("Project ID is not in the correct format");
                }

                #region Check if the logged in user is assuming a company

                //check if the user is assuming a company
                var assumeResult = CheckAssumeCompany(secretKey);
                if (Utils.IsError(assumeResult))
                {
                    return assumeResult;
                }

                //parse the company ID to a Guid
                Guid CompanyID = Guid.Empty;
                if (!Guid.TryParse(assumeResult, out CompanyID))
                {
                    return Utils.WrapError("The ID of the Company that you are trying to view is in the incorrect format");
                }

                #endregion

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    /*
                    * if there is no value or the value is false, then do not display the inactive team members
                    */
                    if (getAll == null || getAll.Equals("false"))
                    {
                        var projectTeam = (from t in entity.ProjectTeams
                                           join p in entity.Projects
                                           on t.ProjectID equals p.ID
                                           join u in entity.aspnet_Membership
                                           on t.UserID equals u.UserId
                                           join r in entity.Roles
                                           on t.RoleID equals r.RoleId
                                           where t.ProjectID == ProjectID &&
                                           t.IsActive == true && p.ProjectCompany == CompanyID
                                           select new
                                           {
                                               u.UserId,
                                               u.Firstnames,
                                               u.Lastname,
                                               u.Email,
                                               u.ContactNumber,
                                               t.IsActive,
                                               t.CompletedRegistration,
                                               r.RoleId,
                                               r.RoleName
                                           }).ToList();

                        if (projectTeam == null || projectTeam.Count <= 0)
                        {
                            return "[]";
                        }

                        return Helper.SerializeToJavascriptOject(projectTeam);
                    }
                    /* display active and inactive team members */
                    else
                    {
                        var projectTeam = (from t in entity.ProjectTeams
                                           join p in entity.Projects
                                           on t.ProjectID equals p.ID
                                           join u in entity.aspnet_Membership
                                           on t.UserID equals u.UserId
                                           join r in entity.Roles
                                           on t.RoleID equals r.RoleId
                                           where t.ProjectID == ProjectID && p.ProjectCompany == CompanyID
                                           select new
                                           {
                                               u.UserId,
                                               u.Firstnames,
                                               u.Lastname,
                                               u.Email,
                                               u.ContactNumber,
                                               t.IsActive,
                                               t.CompletedRegistration,
                                               r.RoleId,
                                               r.RoleName
                                           }).ToList();

                        if (projectTeam == null || projectTeam.Count <= 0)
                        {
                            return "[]";
                        }

                        return Helper.SerializeToJavascriptOject(projectTeam);
                    }
                }
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        //start a project
        public string StartProject(string secretKey, string projectID)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                projectID = TrimIfNotNull(projectID);

                var username = CheckUserHasRight(secretKey, "StartProject");
                if (Utils.IsError(username))
                {
                    return username;
                }

                Guid ProjectID;
                if (!Guid.TryParse(projectID, out ProjectID))
                {
                    return Utils.WrapError("Project ID is not in the correct format");
                }

                //convert the company id received
                /*Guid CompanyID;
                if (!Guid.TryParse(companyID, out CompanyID))
                {
                    return Utils.WrapError("Company ID is not in the correct format");
                }*/

                Guid LoggedInUserID = (Guid)Membership.GetUser(username).ProviderUserKey;

                //check if the user is an administrator
                /*var IsAdmin = CheckUserHasAdminRole(secretKey);

                //if the user is not an admin 
                if (Utils.IsError(IsAdmin))
                {
                    var userCompany = CheckUserCompany(secretKey, companyID);
                    if (Utils.IsError(userCompany))
                    {
                        return userCompany;
                    }
                }*/

                //check the project's status
                var projectStatus = CheckProjectStatus(projectID, "true", "true", "true");
                if (Utils.IsError(projectStatus))
                {
                    return projectStatus;
                }

                #region Check if the logged in user is assuming a company

                //check if the user is assuming a company
                var assumeResult = CheckAssumeCompany(secretKey);
                if (Utils.IsError(assumeResult))
                {
                    return assumeResult;
                }

                //parse the company ID to a Guid
                Guid CompanyID = Guid.Empty;
                if (!Guid.TryParse(assumeResult, out CompanyID))
                {
                    return Utils.WrapError("The ID of the Company that you are trying to view is in the incorrect format");
                }

                #endregion

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    var project = (from p in entity.Projects
                                   where p.ID == ProjectID && p.ProjectCompany == CompanyID
                                   select p).FirstOrDefault();

                    if (project == null)
                    {
                        return Utils.WrapError("The project you are trying to change does not exist");
                    }

                    //change project info
                    project.ActualStartDate = DateTime.Now;
                    project.StartedByUserID = LoggedInUserID;

                    entity.Entry(project).State = EntityState.Modified;
                    entity.SaveChanges();

                    //activity stream
                    AddActivity(secretKey, CompanyID + "", null, null, ProjectID + "", null, "started project", ActivityType.Project);

                }

                dynamic returnItem = new JObject();
                returnItem.Status = "Success";
                return returnItem.ToString();
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        //end a project
        public string EndProject(string secretKey, string projectID)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                projectID = TrimIfNotNull(projectID);

                var username = CheckUserHasRight(secretKey, "EndProject");
                if (Utils.IsError(username))
                {
                    return username;
                }

                //check if the user is an administrator
                /*var IsAdmin = CheckUserHasAdminRole(secretKey);

                //if the user is not an admin 
                if (Utils.IsError(IsAdmin))
                {
                    var userCompany = CheckUserCompany(secretKey, companyID);
                    if (Utils.IsError(userCompany))
                    {
                        return userCompany;
                    }
                }*/

                Guid ProjectID;
                if (!Guid.TryParse(projectID, out ProjectID))
                {
                    return Utils.WrapError("Project ID is not in the correct format");
                }

                //convert the company id received
                /*Guid CompanyID;
                if (!Guid.TryParse(companyID, out CompanyID))
                {
                    return Utils.WrapError("Company ID is not in the correct format");
                }*/

                //check the project's status
                var projectStatus = CheckProjectStatus(projectID, "true", null, null);
                if (Utils.IsError(projectStatus))
                {
                    return projectStatus;
                }

                #region Check if the logged in user is assuming a company

                //check if the user is assuming a company
                var assumeResult = CheckAssumeCompany(secretKey);
                if (Utils.IsError(assumeResult))
                {
                    return assumeResult;
                }

                //parse the company ID to a Guid
                Guid CompanyID = Guid.Empty;
                if (!Guid.TryParse(assumeResult, out CompanyID))
                {
                    return Utils.WrapError("The ID of the Company that you are trying to view is in the incorrect format");
                }

                #endregion

                Guid LoggedInUserID = (Guid)Membership.GetUser(username).ProviderUserKey;

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {

                    var project = (from p in entity.Projects
                                   where p.ID == ProjectID && p.ProjectCompany == CompanyID
                                   select p).FirstOrDefault();

                    if (project == null)
                    {
                        return Utils.WrapError("The project you are trying to change does not exist");
                    }

                    //check if the logged in user works for the company they are trying to create a survey for
                    if (project.ProjectCompany != CompanyID)
                    {
                        return Utils.WrapError("You do not have access to this company");
                    }

                    if (project.ActualStartDate == null)
                    {
                        return Utils.WrapError("You cannot end a project that has not been started");
                    }

                    //change project info
                    project.ActualEndDate = DateTime.Now;
                    project.EndedByUserID = LoggedInUserID;

                    entity.Entry(project).State = EntityState.Modified;
                    entity.SaveChanges();

                    //activity stream
                    AddActivity(secretKey, CompanyID + "", null, null, ProjectID + "", null, "ended project", ActivityType.Project);

                }

                dynamic returnItem = new JObject();
                returnItem.Status = "Success";
                return returnItem.ToString();
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        //view all projects
        public string GetAllProjectsForCompany(string secretKey, string getAll)
        {
            try
            {

                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                getAll = TrimIfNotNull(getAll);

                var username = CheckUserHasRight(secretKey, "GetAllProjectsForCompany");
                if (Utils.IsError(username))
                {
                    return username;
                }

                //check if the user is an administrator
                /*var IsAdmin = CheckUserHasAdminRole(secretKey);

                //if the user is not an admin 
                if (Utils.IsError(IsAdmin))
                {
                    var userCompany = CheckUserCompany(secretKey, companyID);
                    if (Utils.IsError(userCompany))
                    {
                        return userCompany;
                    }
                }

                //convert the company id received
                Guid CompanyID;
                if (!Guid.TryParse(companyID, out CompanyID))
                {
                    return Utils.WrapError("Company ID is not in the correct format");
                }*/

                #region Check if the logged in user is assuming a company

                //check if the user is assuming a company
                var assumeResult = CheckAssumeCompany(secretKey);
                if (Utils.IsError(assumeResult))
                {
                    return assumeResult;
                }

                //parse the company ID to a Guid
                Guid CompanyID = Guid.Empty;
                if (!Guid.TryParse(assumeResult, out CompanyID))
                {
                    return Utils.WrapError("The ID of the Company that you are trying to view is in the incorrect format");
                }

                #endregion

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {

                    /*
                    * if there is no value or the value is false, then do not display the inactive projects
                    */
                    if (getAll == null || getAll.Equals("false"))
                    {
                        var project = (from p in entity.Projects
                                       where p.ProjectCompany == CompanyID && p.IsActive == true
                                       orderby p.ProjectName
                                       select new
                                       {
                                           p.ID,
                                           p.ProjectName,
                                           p.ProjectDescription,
                                           p.StartDate,
                                           p.EndDate
                                       }).ToList();

                        if (project == null || project.Count <= 0)
                        {
                            return "[]";
                        }

                        return Helper.SerializeToJavascriptOject(project);
                    }
                    /* display active and inactive projects */
                    else
                    {
                        var project = (from p in entity.Projects
                                       where p.ProjectCompany == CompanyID
                                       orderby p.ProjectName
                                       select new
                                       {
                                           p.ID,
                                           p.ProjectName,
                                           p.ProjectDescription,
                                           p.StartDate,
                                           p.EndDate
                                       }).ToList();

                        if (project == null || project.Count <= 0)
                        {
                            return "[]";
                        }

                        return Helper.SerializeToJavascriptOject(project);
                    }
                }
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        //get the details of a specific project
        public string GetSpecificProject(string secretKey, string projectID)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                projectID = TrimIfNotNull(projectID);

                var username = CheckUserHasRight(secretKey, "GetSpecificProject");
                if (Utils.IsError(username))
                {
                    return username;
                }

                Guid ProjectID;
                if (!Guid.TryParse(projectID, out ProjectID))
                {
                    return Utils.WrapError("Project ID is not in the correct format");
                }

                //convert the company id received
                /*Guid CompanyID;
                if (!Guid.TryParse(companyID, out CompanyID))
                {
                    return Utils.WrapError("Company ID is not in the correct format");
                }

                //check if the user is an administrator
                var IsAdmin = CheckUserHasAdminRole(secretKey);

                //if the user is not an admin 
                if (Utils.IsError(IsAdmin))
                {
                    var userCompany = CheckUserCompany(secretKey, companyID);
                    if (Utils.IsError(userCompany))
                    {
                        return userCompany;
                    }
                }
                */

                #region Check if the logged in user is assuming a company

                //check if the user is assuming a company
                var assumeResult = CheckAssumeCompany(secretKey);
                if (Utils.IsError(assumeResult))
                {
                    return assumeResult;
                }

                //parse the company ID to a Guid
                Guid CompanyID = Guid.Empty;
                if (!Guid.TryParse(assumeResult, out CompanyID))
                {
                    return Utils.WrapError("The ID of the Company that you are trying to view is in the incorrect format");
                }

                #endregion

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {

                    /*var project = (from p in entity.Projects
                                   where p.ID == ProjectID
                                   select new
                                   {
                                       p.ID,
                                       p.ProjectName,
                                       p.ProjectDescription,
                                       p.ProjectCountry,
                                       p.NumberOfMembers,
                                       PrimaryContact = p.UserID,
                                       p.StartDate,
                                       p.EndDate,
                                       p.ActualStartDate,
                                       p.ActualEndDate,
                                       p.IsPassportNumberRequired,
                                       p.IsPassportExpiryDateRequired,
                                       p.IsMedicalAidNameRequired,
                                       p.IsMedicalAidNumberRequired,
                                       p.IsMedicalAidContactNumberRequired,
                                       p.IsBloodTypeRequired,
                                       p.IsAllergiesRequired,
                                       p.IsAllergiesDescriptionRequired,
                                       p.IsVaccinationsRequired,
                                       p.IsSafetyBootsRequired,
                                       p.IsVestRequired,
                                       p.IsPassportDocRequired,
                                       p.IsETicketDocRequired,
                                       p.IsVisaDocRequired,
                                       p.IsAccommodationDocRequired,
                                       p.IsVaccinationDocRequired,
                                       p.IsDriversLicenseDocRequired,
                                       p.IsCustomsClearanceDocRequired,
                                       CompanyID = p.ProjectCompany,
                                       p.CreatedBy,
                                       p.DateCreated,
                                       p.UpdatedBy,
                                       p.DateUpdated,
                                       p.StartedByUserID,
                                       p.EndedByUserID,
                                       p.IsActive,
                                       OtherInformation = p.OtherInfoRequired
                                   }).FirstOrDefault();*/

                    var project = entity.GetProjectDetails(ProjectID).FirstOrDefault();

                    if (project == null)
                    {
                        return Utils.WrapError("The project you are trying to retrieve does not exist");
                    }

                    return Helper.SerializeToJavascriptOject(project);

                }

            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        #endregion

        #region Documents
        public string getMyDocuments(string secretKey)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                //userID = TrimIfNotNull(userID);

                var username = CheckUserHasRight(secretKey, "ViewUserDocuments");
                if (Utils.IsError(username))
                {
                    return username;
                }
                #region Check if the logged in user is assuming a company

                //check if the user is assuming a company
                var assumeResult = CheckAssumeCompany(secretKey);
                if (Utils.IsError(assumeResult))
                {
                    return assumeResult;
                }

                //parse the company ID to a Guid
                Guid CompanyID = Guid.Empty;
                if (!Guid.TryParse(assumeResult, out CompanyID))
                {
                    return Utils.WrapError("The ID of the Company that you are trying to view is in the incorrect format");
                }

                #endregion

                Guid LoggedInUserID = (Guid)Membership.GetUser(username).ProviderUserKey;

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    var docs = (from d in entity.Documents
                                where d.UserID == LoggedInUserID
                                orderby d.ExpiryDate descending
                                select new
                                {
                                    d.ID,
                                    d.TypeNumber,
                                    d.Name,
                                    d.TypeDescription,
                                    d.Link,
                                    d.ExpiryDate,
                                    d.UserID,
                                    d.ProjectID
                                }).ToList();

                    if (docs == null || docs.Count <= 0)
                    {
                        return "[]";
                    }

                    return Helper.SerializeToJavascriptOject(docs);

                }
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }
        public string getMyDocumentDetails(string secretKey, string docID)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                docID = TrimIfNotNull(docID);

                Guid DocumentID = Guid.Empty;
                if (!Guid.TryParse(docID, out DocumentID))
                {
                    return Utils.WrapError("The ID of the Document that you are trying to view is in the incorrect format");
                }

                var username = CheckUserHasRight(secretKey, "ViewUserDocuments");
                if (Utils.IsError(username))
                {
                    return username;
                }
                #region Check if the logged in user is assuming a company

                //check if the user is assuming a company
                var assumeResult = CheckAssumeCompany(secretKey);
                if (Utils.IsError(assumeResult))
                {
                    return assumeResult;
                }

                //parse the company ID to a Guid
                Guid CompanyID = Guid.Empty;
                if (!Guid.TryParse(assumeResult, out CompanyID))
                {
                    return Utils.WrapError("The ID of the Company that you are trying to view is in the incorrect format");
                }

                #endregion

                Guid LoggedInUserID = (Guid)Membership.GetUser(username).ProviderUserKey;

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    var thisDoc = (from d in entity.Documents
                                   where d.UserID == LoggedInUserID
                                   && d.ID == DocumentID
                                   select new
                                   {
                                       d.ID,
                                       d.TypeNumber,
                                       d.Name,
                                       d.TypeDescription,
                                       d.Link,
                                       d.ExpiryDate,
                                       d.UserID,
                                       d.IsProjectSpecific,
                                       d.ProjectID
                                   }).FirstOrDefault();

                    if (thisDoc == null)
                    {
                        return "{}";
                    }

                    return Helper.SerializeToJavascriptOject(thisDoc);

                }
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        public string importUserDocsToProject(string secretKey, string projectID, string replaceFile)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                projectID = TrimIfNotNull(projectID);

                var username = CheckUserHasRight(secretKey, "ViewUserDocuments");
                if (Utils.IsError(username))
                {
                    return username;
                }

                Guid ProjectID;
                if (!Guid.TryParse(projectID, out ProjectID))
                {
                    return Utils.WrapError("Project ID is not in the correct format");
                }

                bool replace = false;
                replace = replaceFile == "true" ? true : false;

                //convert the company id received
                /*Guid CompanyID;
                if (!Guid.TryParse(companyID, out CompanyID))
                {
                    return Utils.WrapError("Company ID is not in the correct format");
                }*/

                Guid LoggedInUserID = (Guid)Membership.GetUser(username).ProviderUserKey;

                //check if the user is an administrator
                /*var IsAdmin = CheckUserHasAdminRole(secretKey);

                //if the user is not an admin 
                if (Utils.IsError(IsAdmin))
                {
                    var userCompany = CheckUserCompany(secretKey, companyID);
                    if (Utils.IsError(userCompany))
                    {
                        return userCompany;
                    }
                }*/

                //check the project's status
                var projectStatus = CheckProjectStatus(projectID, "true", "true", "true");
                if (Utils.IsError(projectStatus))
                {
                    return projectStatus;
                }

                #region Check if the logged in user is assuming a company

                //check if the user is assuming a company
                var assumeResult = CheckAssumeCompany(secretKey);
                if (Utils.IsError(assumeResult))
                {
                    return assumeResult;
                }

                //parse the company ID to a Guid
                Guid CompanyID = Guid.Empty;
                if (!Guid.TryParse(assumeResult, out CompanyID))
                {
                    return Utils.WrapError("The ID of the Company that you are trying to view is in the incorrect format");
                }

                #endregion

                string DocumentManagerPath = ConfigurationManager.AppSettings["DocumentManagerPath"].ToString();

                string usersPath = DocumentManagerPath + "\\" + CompanyID + "\\Users\\";
                string projectUserPath = DocumentManagerPath + "\\" + CompanyID + "\\Projects\\" + projectID + "\\Users\\";

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {

                    var project = (from p in entity.Projects
                                   where p.ID == ProjectID && p.ProjectCompany == CompanyID
                                   select p).FirstOrDefault();

                    if (project == null)
                    {
                        return Utils.WrapError("The project you are trying to change does not exist");
                    }

                    List<Guid> usersInProj = (from u in entity.ProjectTeams
                                              where u.ProjectID == ProjectID
                                              select u.UserID).ToList();

                    DirectoryInfo di, di2;
                    FileInfo[] files;

                    foreach (var u in usersInProj)
                    {
                        di = new DirectoryInfo(usersPath + u);
                        string dirToCopyTo;
                        if (di.Exists)
                        {
                            files = di.GetFiles();
                            foreach (var fi in files)
                            {
                                dirToCopyTo = projectUserPath + u;
                                di2 = new DirectoryInfo(dirToCopyTo);
                                if (!di2.Exists)
                                {
                                    di2.Create();
                                }
                                fi.CopyTo(dirToCopyTo + "\\" + fi.Name, replace);
                            }
                        }
                    }


                    //activity stream
                    AddActivity(secretKey, CompanyID + "", null, null, ProjectID + "", null, "imported project documents", ActivityType.Project);

                }

                dynamic returnItem = new JObject();
                returnItem.Status = "Success";
                return returnItem.ToString();
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        //view all the user documents
        /*public string ViewUserDocuments(string secretKey, string userID)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                companyID = TrimIfNotNull(companyID);
                userID = TrimIfNotNull(userID);

                var username = CheckUserHasRight(secretKey, "ViewUserDocuments");
                if (Utils.IsError(username))
                {
                    return username;
                }

                Guid UserID;
                if (!Guid.TryParse(userID, out UserID))
                {
                    return Utils.WrapError("User ID is not in the correct format");
                }

         #region Check if the logged in user is assuming a company

        //check if the user is assuming a company
        var assumeResult = CheckAssumeCompany(secretKey);
        if (Utils.IsError(assumeResult))
        {
            return assumeResult;
        }

        //parse the company ID to a Guid
        Guid CompanyID = Guid.Empty;
        if (!Guid.TryParse(assumeResult, out CompanyID))
        {
            return Utils.WrapError("The ID of the Company that you are trying to view is in the incorrect format");
        }

        #endregion
         
                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    var docs = (from d in entity.Documents
                                where d.UserID == UserID && d.IsActive == true
                                orderby d.DateUploaded descending
                                select new
                                {
                                    d.ID,
                                    d.DocType,
                                    d.Classification,
                                    d.Link,
                                    d.UploadedBy,
                                    d.DateUploaded
                                }).ToList();

                    if (docs == null || docs.Count <= 0)
                    {
                        return "[]";
                    }

                    return Helper.SerializeToJavascriptOject(docs);

                }
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }*/

        //upload a user document
        /*public string AddUserDocument(string secretKey, string userID, string docType, string classification, string link)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                companyID = TrimIfNotNull(companyID);
                userID = TrimIfNotNull(userID);
                docType = TrimIfNotNull(docType);
                classification = TrimIfNotNull(classification);
                link = TrimIfNotNull(link);

                var username = CheckUserHasRight(secretKey, "AddUserDocument");
                if (Utils.IsError(username))
                {
                    return username;
                }

                Guid UserID;
                if (!Guid.TryParse(userID, out UserID))
                {
                    return Utils.WrapError("User ID is not in the correct format");
                }
         #region Check if the logged in user is assuming a company

        //check if the user is assuming a company
        var assumeResult = CheckAssumeCompany(secretKey);
        if (Utils.IsError(assumeResult))
        {
            return assumeResult;
        }

        //parse the company ID to a Guid
        Guid CompanyID = Guid.Empty;
        if (!Guid.TryParse(assumeResult, out CompanyID))
        {
            return Utils.WrapError("The ID of the Company that you are trying to view is in the incorrect format");
        }

        #endregion

                Guid LoggedInUserID = (Guid)Membership.GetUser(username).ProviderUserKey;

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    //create a new document
                    var newDoc = new Document();
                    newDoc.ID = Guid.NewGuid();
                    newDoc.DocType = docType;
                    newDoc.Classification = classification;
                    newDoc.Link = link;
                    newDoc.UserID = UserID;
                    newDoc.ProjectID = null;
                    newDoc.UploadedBy = LoggedInUserID;
                    newDoc.DateUploaded = DateTime.Now;
                    newDoc.IsActive = true;

                    entity.Documents.Add(newDoc);

                    entity.SaveChanges();

                }

                dynamic returnItem = new JObject();
                returnItem.Status = "Success";
                return returnItem.ToString();
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }
        */

        #endregion

        #region Surveys

        //create a survey
        public string AddSurvey(string secretKey, string surveyTitle, string projectID, string purpose, string companyToAddTo, string affectedUserID, string conclusion, string isPageView, string theme)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                surveyTitle = TrimIfNotNull(surveyTitle);
                projectID = TrimIfNotNull(projectID);
                purpose = TrimIfNotNull(purpose);
                affectedUserID = TrimIfNotNull(affectedUserID);
                conclusion = TrimIfNotNull(conclusion);
                isPageView = TrimIfNotNull(isPageView);
                if (string.IsNullOrWhiteSpace(isPageView)) { isPageView = "true"; }
                isPageView = isPageView.ToLower();
                theme = TrimIfNotNull(theme);

                var username = CheckUserHasRight(secretKey, "AddSurvey");
                if (Utils.IsError(username))
                {
                    return username;
                }

                //check if the user is an administrator
                /*var IsAdmin = CheckUserHasAdminRole(secretKey);

                //if the user is not an admin 
                if (Utils.IsError(IsAdmin))
                {
                    var userCompany = CheckUserCompany(secretKey, companyID);
                    if (Utils.IsError(userCompany))
                    {
                        return userCompany;
                    }
                }*/

                if (string.IsNullOrWhiteSpace(surveyTitle))
                {
                    return Utils.WrapError("Please ensure that you enter a title");
                }
                /*
                if (string.IsNullOrWhiteSpace(purpose))
                {
                    return Utils.WrapError("Please ensure that you enter a purpose");
                }
                */
                Guid ProjectID;
                if (!Guid.TryParse(projectID, out ProjectID))
                {
                    return Utils.WrapError("Project ID is not in the correct format");
                }

                //convert the company id received
                /* Guid CompanyID;
                 if (!Guid.TryParse(companyID, out CompanyID))
                 {
                     return Utils.WrapError("Company ID is not in the correct format");
                 }
                 */

                //parse the company ID to a Guid
                Guid CompanyID = Guid.Empty;

                if (!string.IsNullOrWhiteSpace(companyToAddTo) && Guid.TryParse(companyToAddTo, out CompanyID))
                {
                    // Use the provided company (Company admin activated the first package)
                }
                else
                {
                    #region Check if the logged in user is assuming a company

                    //check if the user is assuming a company
                    var assumeResult = CheckAssumeCompany(secretKey);
                    if (Utils.IsError(assumeResult))
                    {
                        return assumeResult;
                    }

                    if (!Guid.TryParse(assumeResult, out CompanyID))
                    {
                        return Utils.WrapError("The ID of the Company that you are trying to view is in the incorrect format");
                    }

                    #endregion
                }
                //check if the company is allowed to add more surveys
                var packageResult = CheckCompanyPackageNoSurveys(CompanyID + "");
                if (Utils.IsError(packageResult))
                {
                    return packageResult;
                }

                //check the project's status
                var projectStatus = CheckProjectStatus(projectID, "true", null, "true");
                if (Utils.IsError(projectStatus))
                {
                    return projectStatus;
                }


                Guid LoggedInUserID;
                if (!string.IsNullOrWhiteSpace(companyToAddTo) && Guid.TryParse(companyToAddTo, out CompanyID) && !string.IsNullOrWhiteSpace(affectedUserID) && Guid.TryParse(affectedUserID, out LoggedInUserID))
                {
                    // Use the provided company (Company admin activated the first package)     affectedUserID
                    Helper.LogMessage("CreateSurvey: will add user: " + LoggedInUserID + " to new survey for company: " + companyToAddTo);
                }
                else
                {
                    LoggedInUserID = (Guid)Membership.GetUser(username).ProviderUserKey;
                }

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {

                    var project = (from p in entity.Projects
                                   where p.ID == ProjectID && p.ProjectCompany == CompanyID
                                   select p).FirstOrDefault();

                    if (project == null)
                    {
                        return Utils.WrapError("The project you are trying to add a survey to does not exist");
                    }

                    //create a new survey
                    var newSurvey = new Survey();
                    Guid SurveyID = Guid.NewGuid();
                    newSurvey.ID = SurveyID;
                    newSurvey.SurveyTitle = surveyTitle;
                    newSurvey.ProjectID = ProjectID;
                    newSurvey.DateCreated = DateTime.Now;
                    newSurvey.CreatedBy = LoggedInUserID;
                    newSurvey.Purpose = purpose;
                    newSurvey.IsActive = true;
                    newSurvey.SurveyConclusion = conclusion;
                    newSurvey.IsPageView = isPageView == "true" ? true : false;
                    newSurvey.SurveyTheme = theme;

                    entity.Surveys.Add(newSurvey);
                    entity.SaveChanges();

                    #region Document Manager

                    //path on where to save the documents
                    string DocumentManagerPath = ConfigurationManager.AppSettings["DocumentManagerPath"].ToString();
                    string ProjectsSurveysPath = DocumentManagerPath + "\\" + CompanyID + "\\Projects\\" + ProjectID + "\\Surveys\\" + SurveyID;

                    //create the directory 
                    if (CreateDirectory(ProjectsSurveysPath))
                    {
                        string ProjectsSurveysMiscPath = ProjectsSurveysPath + "\\SurveyDocs";

                        //create the directory
                        CreateDirectory(ProjectsSurveysMiscPath);

                        /*string ProjectsSurveysResponsesPath = ProjectsSurveysPath + "\\Responses";

                        //create the directory
                        CreateDirectory(ProjectsSurveysResponsesPath);*/
                    }

                    #endregion

                    //activity stream
                    AddActivity(secretKey, CompanyID + "", null, null, ProjectID + "", SurveyID + "", "created a new survey called", ActivityType.Survey, LoggedInUserID + "");

                    dynamic returnItem = new JObject();
                    returnItem.Status = "Success";
                    returnItem.SurveyID = SurveyID;
                    return returnItem.ToString();
                }
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        //create a survey
        public string UpdateSurvey(string secretKey, string surveyID, string surveyTitle, string purpose, string conclusion, string isPageView, string theme)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                surveyTitle = TrimIfNotNull(surveyTitle);
                purpose = TrimIfNotNull(purpose);
                surveyID = TrimIfNotNull(surveyID);
                conclusion = TrimIfNotNull(conclusion);
                isPageView = TrimIfNotNull(isPageView);
                if (string.IsNullOrWhiteSpace(isPageView)) { isPageView = "false"; }
                isPageView = isPageView.ToLower();
                theme = TrimIfNotNull(theme);

                var username = CheckUserHasRight(secretKey, "UpdateSurvey");
                if (Utils.IsError(username))
                {
                    return username;
                }

                //check if the user is an administrator
                /*var IsAdmin = CheckUserHasAdminRole(secretKey);

                //if the user is not an admin 
                if (Utils.IsError(IsAdmin))
                {
                    var userCompany = CheckUserCompany(secretKey, companyID);
                    if (Utils.IsError(userCompany))
                    {
                        return userCompany;
                    }
                }*/

                if (string.IsNullOrWhiteSpace(surveyTitle))
                {
                    return Utils.WrapError("Please ensure that you enter a title");
                }
                /*
                if (string.IsNullOrWhiteSpace(purpose))
                {
                    return Utils.WrapError("Please ensure that you enter a purpose");
                }
                */
                Guid SurveyID;
                if (!Guid.TryParse(surveyID, out SurveyID))
                {
                    return Utils.WrapError("Survey ID is not in the correct format");
                }

                //convert the company id received
                /*Guid CompanyID;
                if (!Guid.TryParse(companyID, out CompanyID))
                {
                    return Utils.WrapError("Company ID is not in the correct format");
                }*/

                //check the survey's status
                var surveyStatus = CheckSurveyStatus(surveyID, "true", "true", "true");
                if (Utils.IsError(surveyStatus))
                {
                    return surveyStatus;
                }

                #region Check if the logged in user is assuming a company

                //check if the user is assuming a company
                var assumeResult = CheckAssumeCompany(secretKey);
                if (Utils.IsError(assumeResult))
                {
                    return assumeResult;
                }

                //parse the company ID to a Guid
                Guid CompanyID = Guid.Empty;
                if (!Guid.TryParse(assumeResult, out CompanyID))
                {
                    return Utils.WrapError("The ID of the Company that you are trying to view is in the incorrect format");
                }

                #endregion

                Guid LoggedInUserID = (Guid)Membership.GetUser(username).ProviderUserKey;

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {

                    var survey = (from p in entity.Surveys
                                  join pr in entity.Projects
                                  on p.ProjectID equals pr.ID
                                  where p.ID == SurveyID && pr.ProjectCompany == CompanyID
                                  select p).FirstOrDefault();

                    if (survey == null)
                    {
                        return Utils.WrapError("The survey you are trying to update does not exist");
                    }

                    //check the project's status
                    var projectStatus = CheckProjectStatus(survey.ProjectID + "", "true", null, "true");
                    if (Utils.IsError(projectStatus))
                    {
                        return projectStatus;
                    }

                    survey.SurveyTitle = surveyTitle;
                    survey.DateUpdated = DateTime.Now;
                    survey.UpdatedBy = LoggedInUserID;
                    survey.Purpose = purpose;
                    survey.SurveyConclusion = conclusion;
                    survey.IsPageView = isPageView == "true" ? true : false;
                    survey.SurveyTheme = theme;

                    entity.Entry(survey).State = EntityState.Modified;
                    entity.SaveChanges();

                    //activity stream
                    AddActivity(secretKey, CompanyID + "", null, null, survey.ProjectID + "" + "", SurveyID + "", "updated the details of", ActivityType.Survey);

                }

                dynamic returnItem = new JObject();
                returnItem.Status = "Success";
                return returnItem.ToString();
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        // update survey view
        public string UpdateSurveyView(string secretKey, string surveyID, string isPageView)
        {
            try
            {
                isPageView = TrimIfNotNull(isPageView);
                if (string.IsNullOrWhiteSpace(isPageView)) { isPageView = "false"; }
                isPageView = isPageView.ToLower();

                var username = CheckUserHasRight(secretKey, "UpdateSurvey");
                if (Utils.IsError(username))
                {
                    return username;
                }

                Guid SurveyID;
                if (!Guid.TryParse(surveyID, out SurveyID))
                {
                    return Utils.WrapError("Survey ID is not in the correct format");
                }
                //check the survey's status
                /*var surveyStatus = CheckSurveyStatus(surveyID, "true", "false", "false");
                if (Utils.IsError(surveyStatus))
                {
                    return surveyStatus;
                }*/

                #region Check if the logged in user is assuming a company

                //check if the user is assuming a company
                var assumeResult = CheckAssumeCompany(secretKey);
                if (Utils.IsError(assumeResult))
                {
                    return assumeResult;
                }

                //parse the company ID to a Guid
                Guid CompanyID = Guid.Empty;
                if (!Guid.TryParse(assumeResult, out CompanyID))
                {
                    return Utils.WrapError("The ID of the Company that you are trying to view is in the incorrect format");
                }

                #endregion

                Guid LoggedInUserID = (Guid)Membership.GetUser(username).ProviderUserKey;

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {

                    var survey = (from p in entity.Surveys
                                  join pr in entity.Projects
                                  on p.ProjectID equals pr.ID
                                  where p.ID == SurveyID && pr.ProjectCompany == CompanyID
                                  select p).FirstOrDefault();

                    if (survey == null)
                    {
                        return Utils.WrapError("The survey you are trying to update does not exist");
                    }

                    //check the project's status
                    var projectStatus = CheckProjectStatus(survey.ProjectID + "", "true", null, "true");
                    if (Utils.IsError(projectStatus))
                    {
                        return projectStatus;
                    }

                    survey.DateUpdated = DateTime.Now;
                    survey.UpdatedBy = LoggedInUserID;
                    survey.IsPageView = isPageView == "true";

                    entity.Entry(survey).State = EntityState.Modified;
                    entity.SaveChanges();

                    var PageOrQuestion = (isPageView == "true" ? "Page" : "Question") + " View";
                    //activity stream
                    AddActivity(secretKey, CompanyID + "", null, null, survey.ProjectID + "" + "", SurveyID + "", $"set the survey to {0}", ActivityType.Survey);

                }

                dynamic returnItem = new JObject();
                returnItem.Status = "Success";
                return returnItem.ToString();
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        //get a list of surveys for the project
        public string GetAllSurveysForProject(string secretKey, string projectID, string getAll)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                projectID = TrimIfNotNull(projectID);
                getAll = TrimIfNotNull(getAll);

                var username = CheckUserHasRight(secretKey, "GetAllSurveysForProject");
                if (Utils.IsError(username))
                {
                    return username;
                }

                Guid ProjectID;
                if (!Guid.TryParse(projectID, out ProjectID))
                {
                    return Utils.WrapError("Project ID is in the incorrect format");
                }

                //convert the company id received
                /*Guid CompanyID;
                if (!Guid.TryParse(companyID, out CompanyID))
                {
                    return Utils.WrapError("Company ID is not in the correct format");
                }

                //check if the user is an administrator
                var IsAdmin = CheckUserHasAdminRole(secretKey);

                //if the user is not an admin 
                if (Utils.IsError(IsAdmin))
                {
                    var userCompany = CheckUserCompany(secretKey, companyID);
                    if (Utils.IsError(userCompany))
                    {
                        return userCompany;
                    }
                }
                */

                #region Check if the logged in user is assuming a company

                //check if the user is assuming a company
                var assumeResult = CheckAssumeCompany(secretKey);
                if (Utils.IsError(assumeResult))
                {
                    return assumeResult;
                }

                //parse the company ID to a Guid
                Guid CompanyID = Guid.Empty;
                if (!Guid.TryParse(assumeResult, out CompanyID))
                {
                    return Utils.WrapError("The ID of the Company that you are trying to view is in the incorrect format");
                }

                #endregion

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {

                    var project = (from p in entity.Projects
                                   where p.ID == ProjectID && p.ProjectCompany == CompanyID
                                   select p).FirstOrDefault();

                    if (project == null)
                    {
                        return Utils.WrapError("The project you are trying to access does not exist");
                    }

                    /*
                    * if there is no value or the value is false, then do not display the inactive projects
                    */
                    if (getAll == null || getAll.Equals("false"))
                    {
                        //read the survey info
                        var survey = (from s in entity.Surveys
                                      join m in entity.aspnet_Membership
                                      on s.CreatedBy equals m.UserId
                                      where s.IsActive == true && s.ProjectID == ProjectID
                                      orderby s.SurveyTitle
                                      select new
                                      {
                                          s.ID,
                                          s.SurveyTitle,
                                          s.DateCreated,
                                          CreatedByID = s.CreatedBy,
                                          CreatedByName = m.Firstnames + " " + m.Lastname,
                                          s.Purpose,
                                          s.UpdatedBy,
                                          s.DateUpdated,
                                          s.StartDate,
                                          s.EndDate,
                                          s.StartedByUserID,
                                          s.EndedByUserID
                                      }).ToList();

                        if (survey == null || survey.Count <= 0)
                        {
                            return "[]";
                        }

                        return Helper.SerializeToJavascriptOject(survey);
                    }
                    /* Get all the active and inactive surveys */
                    else
                    {
                        //read the survey info
                        var survey = (from s in entity.Surveys
                                      join m in entity.aspnet_Membership
                                      on s.CreatedBy equals m.UserId
                                      where s.ProjectID == ProjectID
                                      orderby s.SurveyTitle
                                      select new
                                      {
                                          s.ID,
                                          s.SurveyTitle,
                                          s.DateCreated,
                                          CreatedByID = s.CreatedBy,
                                          CreatedByName = m.Firstnames + " " + m.Lastname,
                                          s.Purpose,
                                          s.UpdatedBy,
                                          s.DateUpdated,
                                          s.StartDate,
                                          s.EndDate,
                                          s.StartedByUserID,
                                          s.EndedByUserID
                                      }).ToList();

                        if (survey == null || survey.Count <= 0)
                        {
                            return "[]";
                        }

                        return Helper.SerializeToJavascriptOject(survey);
                    }

                }
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        //get a list of surveys for the company
        public string GetAllSurveysForMyCompany(string secretKey, string getAll)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                getAll = TrimIfNotNull(getAll);

                /*string loggedInUserCompanyID = GetUserCompanyID(secretKey);

                //get the question id
                Guid LoggedInUserCompanyID;
                if (!Guid.TryParse(loggedInUserCompanyID, out LoggedInUserCompanyID))
                {
                    return Utils.WrapError("Company ID is not in the correct format");
                }*/

                #region Check if the logged in user is assuming a company

                //check if the user is assuming a company
                var assumeResult = CheckAssumeCompany(secretKey);
                if (Utils.IsError(assumeResult))
                {
                    return assumeResult;
                }

                //parse the company ID to a Guid
                Guid CompanyID = Guid.Empty;
                if (!Guid.TryParse(assumeResult, out CompanyID))
                {
                    return Utils.WrapError("The ID of the Company that you are trying to view is in the incorrect format");
                }

                #endregion

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    /*
                    * if there is no value or the value is false, then do not display the inactive surveys
                    */
                    if (getAll == null || getAll.Equals("false"))
                    {
                        //read the survey info
                        var survey = (from s in entity.Surveys
                                      join p in entity.Projects
                                      on s.ProjectID equals p.ID
                                      join c in entity.Companies
                                      on p.ProjectCompany equals c.ID
                                      join m in entity.aspnet_Membership
                                      on s.CreatedBy equals m.UserId
                                      where c.ID == CompanyID && s.IsActive == true
                                      orderby s.SurveyTitle
                                      select new
                                      {
                                          SurveyID = s.ID,
                                          s.SurveyTitle,
                                          s.DateCreated,
                                          s.Purpose,
                                          s.StartDate,
                                          s.EndDate,
                                          p.ProjectName,
                                          ProjectID = p.ID,
                                          CreatedByID = s.CreatedBy,
                                          CreatedByName = m.Firstnames + " " + m.Lastname
                                      }).ToList();

                        if (survey == null || survey.Count <= 0)
                        {
                            return "[]";
                        }

                        return Helper.SerializeToJavascriptOject(survey);
                    }
                    /* Get all the active and inactive surveys */
                    else
                    {
                        //read the survey info
                        var survey = (from s in entity.Surveys
                                      join p in entity.Projects
                                      on s.ProjectID equals p.ID
                                      join c in entity.Companies
                                      on p.ProjectCompany equals c.ID
                                      join m in entity.aspnet_Membership
                                      on s.CreatedBy equals m.UserId
                                      where c.ID == CompanyID
                                      orderby s.SurveyTitle
                                      select new
                                      {
                                          SurveyID = s.ID,
                                          s.SurveyTitle,
                                          s.DateCreated,
                                          s.Purpose,
                                          s.StartDate,
                                          s.EndDate,
                                          p.ProjectName,
                                          ProjectID = p.ID,
                                          CreatedByID = s.CreatedBy,
                                          CreatedByName = m.Firstnames + " " + m.Lastname
                                      }).ToList();

                        if (survey == null || survey.Count <= 0)
                        {
                            return "[]";
                        }

                        return Helper.SerializeToJavascriptOject(survey);
                    }

                }
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        //get the specific details for a survey
        public string GetSpecificSurvey(string secretKey, string surveyID)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                surveyID = TrimIfNotNull(surveyID);

                var username = CheckUserHasRight(secretKey, "GetSpecificSurvey");
                if (Utils.IsError(username))
                {
                    return username;
                }
                //check if the user is an administrator
                /*var IsAdmin = CheckUserHasAdminRole(secretKey);

                //if the user is not an admin 
                if (Utils.IsError(IsAdmin))
                {

                    var userCompany = CheckUserCompany(secretKey, companyID);
                    if (Utils.IsError(userCompany))
                    {
                        return userCompany;
                    }
                }*/

                Guid SurveyID;
                if (!Guid.TryParse(surveyID, out SurveyID))
                {
                    return Utils.WrapError("Survey ID is not in the correct format");
                }

                //convert the company id received
                /*Guid CompanyID;
                if (!Guid.TryParse(companyID, out CompanyID))
                {
                    return Utils.WrapError("Company ID is not in the correct format");
                }*/

                #region Check if the logged in user is assuming a company

                //check if the user is assuming a company
                var assumeResult = CheckAssumeCompany(secretKey);
                if (Utils.IsError(assumeResult))
                {
                    return assumeResult;
                }

                //parse the company ID to a Guid
                Guid CompanyID = Guid.Empty;
                if (!Guid.TryParse(assumeResult, out CompanyID))
                {
                    return Utils.WrapError("The ID of the Company that you are trying to view is in the incorrect format");
                }

                #endregion

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    //var survey = (from s in entity.Surveys
                    //              join p in entity.Projects
                    //              on s.ProjectID equals p.ID
                    //              where s.ID == SurveyID
                    //              select new
                    //              {
                    //                  s.ID,
                    //                  s.SurveyTitle,
                    //                  s.DateCreated,
                    //                  s.CreatedBy,
                    //                  s.Purpose,
                    //                  s.UpdatedBy,
                    //                  s.DateUpdated,
                    //                  s.StartDate,
                    //                  s.EndDate,
                    //                  s.StartedByUserID,
                    //                  s.EndedByUserID,
                    //                  s.ProjectID,
                    //                  p.ProjectName,
                    //                  CompanyID = p.ProjectCompany
                    //              }).FirstOrDefault();

                    var survey = entity.GetSurveyDetails(SurveyID).FirstOrDefault();
                    if (survey == null)
                    {
                        return Utils.WrapError("The survey details could not be found");
                    }

                    return Helper.SerializeToJavascriptOject(survey);
                }
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        //deactivate a survey
        public string DeactivateSurvey(string secretKey, string surveyID)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                surveyID = TrimIfNotNull(surveyID);

                string username = CheckUserHasRight(secretKey, "DeactivateSurvey");
                if (Utils.IsError(username))
                {
                    return username;
                }

                //check if the user is an administrator
                /*var IsAdmin = CheckUserHasAdminRole(secretKey);

                //if the user is not an admin 
                if (Utils.IsError(IsAdmin))
                {
                    var userCompany = CheckUserCompany(secretKey, companyID);
                    if (Utils.IsError(userCompany))
                    {
                        return userCompany;
                    }
                }*/

                Guid SurveyID;
                if (!Guid.TryParse(surveyID, out SurveyID))
                {
                    return Utils.WrapError("Survey ID is not in the correct format");
                }

                //convert the company id received
                /*Guid CompanyID;
                if (!Guid.TryParse(companyID, out CompanyID))
                {
                    return Utils.WrapError("Company ID is not in the correct format");
                }*/

                #region Check if the logged in user is assuming a company

                //check if the user is assuming a company
                var assumeResult = CheckAssumeCompany(secretKey);
                if (Utils.IsError(assumeResult))
                {
                    return assumeResult;
                }

                //parse the company ID to a Guid
                Guid CompanyID = Guid.Empty;
                if (!Guid.TryParse(assumeResult, out CompanyID))
                {
                    return Utils.WrapError("The ID of the Company that you are trying to view is in the incorrect format");
                }

                #endregion

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {

                    var survey = (from u in entity.Surveys
                                  join p in entity.Projects
                                  on u.ProjectID equals p.ID
                                  where u.ID == SurveyID && p.ProjectCompany == CompanyID
                                  select u).FirstOrDefault();

                    if (survey == null)
                    {
                        return Utils.WrapError("The survey you are trying to delete does not exist");
                    }

                    //check the project's status
                    var projectStatus = CheckProjectStatus(survey.ProjectID + "", "true", null, "true");
                    if (Utils.IsError(projectStatus))
                    {
                        return projectStatus;
                    }

                    survey.IsActive = false;
                    entity.Entry(survey).State = EntityState.Modified;
                    entity.SaveChanges();

                    //activity stream
                    AddActivity(secretKey, CompanyID + "", null, null, survey.ProjectID + "", SurveyID + "", "deactivated survey", ActivityType.Survey);

                }

                dynamic returnItem = new JObject();
                returnItem.Status = "Success";
                return returnItem.ToString();
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        //reactivate a survey
        public string ReactivateSurvey(string secretKey, string surveyID)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                surveyID = TrimIfNotNull(surveyID);

                string username = CheckUserHasRight(secretKey, "ReactivateSurvey");
                if (Utils.IsError(username))
                {
                    return username;
                }

                //check if the user is an administrator
                /* var IsAdmin = CheckUserHasAdminRole(secretKey);

                 //if the user is not an admin 
                 if (Utils.IsError(IsAdmin))
                 {
                     var userCompany = CheckUserCompany(secretKey, companyID);
                     if (Utils.IsError(userCompany))
                     {
                         return userCompany;
                     }
                 }*/

                Guid SurveyID;
                if (!Guid.TryParse(surveyID, out SurveyID))
                {
                    return Utils.WrapError("Survey ID is not in the correct format");
                }

                //convert the company id received
                /* Guid CompanyID;
                 if (!Guid.TryParse(companyID, out CompanyID))
                 {
                     return Utils.WrapError("Company ID is not in the correct format");
                 }*/

                #region Check if the logged in user is assuming a company

                //check if the user is assuming a company
                var assumeResult = CheckAssumeCompany(secretKey);
                if (Utils.IsError(assumeResult))
                {
                    return assumeResult;
                }

                //parse the company ID to a Guid
                Guid CompanyID = Guid.Empty;
                if (!Guid.TryParse(assumeResult, out CompanyID))
                {
                    return Utils.WrapError("The ID of the Company that you are trying to view is in the incorrect format");
                }

                #endregion


                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {

                    var survey = (from u in entity.Surveys
                                  join p in entity.Projects
                                  on u.ProjectID equals p.ID
                                  where u.ID == SurveyID && p.ProjectCompany == CompanyID
                                  select u).FirstOrDefault();

                    if (survey == null)
                    {
                        return Utils.WrapError("The survey you are trying to reactivate does not exist");
                    }

                    //check the project's status
                    var projectStatus = CheckProjectStatus(survey.ProjectID + "", "true", null, "true");
                    if (Utils.IsError(projectStatus))
                    {
                        return projectStatus;
                    }

                    survey.IsActive = true;
                    entity.Entry(survey).State = EntityState.Modified;
                    entity.SaveChanges();

                    //activity stream
                    AddActivity(secretKey, CompanyID + "", null, null, survey.ProjectID + "", SurveyID + "", "reactivated survey", ActivityType.Survey);

                }

                dynamic returnItem = new JObject();
                returnItem.Status = "Success";
                return returnItem.ToString();
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        //add a team member that is assigned to the project to your new survey
        public string AddTeamMemberToSurvey(string secretKey, string surveyID, string userID)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                surveyID = TrimIfNotNull(surveyID);
                userID = TrimIfNotNull(userID);

                var username = CheckUserHasRight(secretKey, "AddTeamMemberToSurvey");

                if (Utils.IsError(username))
                {
                    return username;
                }

                //check if the user is an administrator
                /*var IsAdmin = CheckUserHasAdminRole(secretKey);

                //if the user is not an admin 
                if (Utils.IsError(IsAdmin))
                {
                    var userCompany = CheckUserCompany(secretKey, companyID);
                    if (Utils.IsError(userCompany))
                    {
                        return userCompany;
                    }
                }

                //convert the company id received
                Guid CompanyID;
                if (!Guid.TryParse(companyID, out CompanyID))
                {
                    return Utils.WrapError("Company ID is not in the correct format");
                }*/

                Guid SurveyID;
                if (!Guid.TryParse(surveyID, out SurveyID))
                {
                    return Utils.WrapError("Survey ID is not in the correct format");
                }

                Guid UserID;
                if (!Guid.TryParse(userID, out UserID))
                {
                    return Utils.WrapError("User ID is not in the correct format");
                }


                //check the survey's status
                var surveyStatus = CheckSurveyStatus(surveyID, "true", null, "true");
                if (Utils.IsError(surveyStatus))
                {
                    return surveyStatus;
                }

                #region Check if the logged in user is assuming a company

                //check if the user is assuming a company
                var assumeResult = CheckAssumeCompany(secretKey);
                if (Utils.IsError(assumeResult))
                {
                    return assumeResult;
                }

                //parse the company ID to a Guid
                Guid CompanyID = Guid.Empty;
                if (!Guid.TryParse(assumeResult, out CompanyID))
                {
                    return Utils.WrapError("The ID of the Company that you are trying to view is in the incorrect format");
                }

                #endregion

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    //get the survey you are wanting to add a team member to
                    var survey = (from s in entity.Surveys
                                  join p in entity.Projects
                                  on s.ProjectID equals p.ID
                                  where s.ID == SurveyID && p.ProjectCompany == CompanyID
                                  select new
                                  {
                                      SurveyID = s.ID,
                                      SurveyIsActive = s.IsActive,
                                      ProjectID = s.ProjectID,
                                      p.ProjectName,
                                      s.SurveyTitle
                                  }).FirstOrDefault();

                    if (survey == null)
                    {
                        return Utils.WrapError("Survey not found");
                    }


                    //check the project's status
                    var projectStatus = CheckProjectStatus(survey.ProjectID + "", "true", null, "true");
                    if (Utils.IsError(projectStatus))
                    {
                        return projectStatus;
                    }

                    if (!survey.SurveyIsActive.Value)
                    {
                        return Utils.WrapError("You cannot add team members to a survey that is no longer active");
                    }

                    //get the user you are trying to add
                    var user = (from u in entity.aspnet_Membership
                                join pt in entity.ProjectTeams
                                on u.UserId equals pt.UserID
                                join r in entity.Roles
                                on pt.RoleID equals r.RoleId
                                where pt.ProjectID == survey.ProjectID
                                && u.UserId == UserID
                                select new
                                {
                                    pt.IsActive,
                                    r.RoleName,
                                    u.Email,
                                    r.RoleId
                                }).FirstOrDefault();

                    if (user == null)
                    {
                        return Utils.WrapError("This user cannot be added to this survey as he/she is not assigned to the project");
                    }

                    if (!user.IsActive.Value)
                    {
                        return Utils.WrapError("The user cannot be added to this survey as he/she is no longer active");
                    }

                    //check if the user is already assigned to the survey
                    var curSurveyTeam = (from st in entity.SurveyTeams
                                         where st.UserID == UserID
                                         && st.SurveyID == SurveyID
                                         select st).FirstOrDefault();

                    if (curSurveyTeam != null)
                    {
                        return Utils.WrapError("User has already been added to this survey");
                    }

                    //create a new Survey Team member
                    var newSurveyTeamMember = new SurveyTeam();
                    newSurveyTeamMember.ID = Guid.NewGuid();
                    newSurveyTeamMember.UserID = UserID;
                    newSurveyTeamMember.SurveyID = SurveyID;
                    newSurveyTeamMember.IsActive = true;
                    entity.SurveyTeams.Add(newSurveyTeamMember);
                    entity.SaveChanges();

                    //activity stream
                    AddActivity(secretKey, CompanyID + "", UserID + "", null, survey.ProjectID + "" + "", SurveyID + "", "added survey user", ActivityType.User);

                    //send a email to the new team member
                    //return SendEmailNewSurveyTeamMember(UserID.ToString(), survey.ProjectName, survey.SurveyTitle, user.Email);
                    return SendEmail(EmailPurpose.NewSurveyTeamMember, user.Email, CompanyID + "", survey.ProjectName, "", "", survey.SurveyTitle, user.RoleId + "", user.RoleName, "");
                }
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        //remove a team member from a survey
        public string RemoveTeamMemberFromSurvey(string secretKey, string surveyID, string userID)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                surveyID = TrimIfNotNull(surveyID);
                userID = TrimIfNotNull(userID);

                var username = CheckUserHasRight(secretKey, "RemoveTeamMemberFromSurvey");

                if (Utils.IsError(username))
                {
                    return username;
                }

                //check if the user is an administrator
                /*var IsAdmin = CheckUserHasAdminRole(secretKey);

                //if the user is not an admin 
                if (Utils.IsError(IsAdmin))
                {
                    var userCompany = CheckUserCompany(secretKey, companyID);
                    if (Utils.IsError(userCompany))
                    {
                        return userCompany;
                    }
                }

                //convert the company id received
                Guid CompanyID;
                if (!Guid.TryParse(companyID, out CompanyID))
                {
                    return Utils.WrapError("Company ID is not in the correct format");
                }*/

                Guid SurveyID;
                if (!Guid.TryParse(surveyID, out SurveyID))
                {
                    return Utils.WrapError("Survey ID is not in the correct format");
                }

                Guid UserID;
                if (!Guid.TryParse(userID, out UserID))
                {
                    return Utils.WrapError("User ID is not in the correct format");
                }

                //check the survey's status
                var surveyStatus = CheckSurveyStatus(surveyID, "true", "true", "true");
                if (Utils.IsError(surveyStatus))
                {
                    return surveyStatus;
                }

                #region Check if the logged in user is assuming a company

                //check if the user is assuming a company
                var assumeResult = CheckAssumeCompany(secretKey);
                if (Utils.IsError(assumeResult))
                {
                    return assumeResult;
                }

                //parse the company ID to a Guid
                Guid CompanyID = Guid.Empty;
                if (!Guid.TryParse(assumeResult, out CompanyID))
                {
                    return Utils.WrapError("The ID of the Company that you are trying to view is in the incorrect format");
                }

                #endregion

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    //get the survey you are wanting to remove a team member from
                    var survey = (from s in entity.Surveys
                                  join p in entity.Projects
                                  on s.ProjectID equals p.ID
                                  where s.ID == SurveyID && p.ProjectCompany == CompanyID
                                  select new
                                  {
                                      SurveyID = s.ID,
                                      SurveyIsActive = s.IsActive,
                                      ProjectID = s.ProjectID,
                                      p.ProjectName,
                                      s.SurveyTitle
                                  }).FirstOrDefault();

                    if (survey == null)
                    {
                        return Utils.WrapError("Survey not found");
                    }

                    //check the project's status
                    var projectStatus = CheckProjectStatus(survey.ProjectID + "", "true", null, "true");
                    if (Utils.IsError(projectStatus))
                    {
                        return projectStatus;
                    }

                    /*if (!survey.SurveyIsActive.Value)
                    {
                        return Utils.WrapError("You cannot remove team members to a survey that is no longer active");
                    }*/

                    //check if the user is assigned to the survey
                    var curSurveyTeam = (from st in entity.SurveyTeams
                                         where st.UserID == UserID
                                         && st.SurveyID == SurveyID
                                         select st).FirstOrDefault();

                    if (curSurveyTeam == null)
                    {
                        return Utils.WrapError("User was not assigned to this survey");
                    }

                    entity.SurveyTeams.Remove(curSurveyTeam);
                    entity.Entry(curSurveyTeam).State = EntityState.Deleted;
                    entity.SaveChanges();

                    //activity stream
                    AddActivity(secretKey, CompanyID + "", userID, null, survey.ProjectID + "", SurveyID + "", "removed survey user", ActivityType.User);


                    dynamic returnItem = new JObject();
                    returnItem.Status = "Success";
                    return returnItem.ToString();
                }
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        //get the team members assigned to a survey
        public string GetTeamMembersForSurvey(string secretKey, string surveyID, string getAll)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                surveyID = TrimIfNotNull(surveyID);

                var username = CheckUserHasRight(secretKey, "GetTeamMembersForSurvey");
                if (Utils.IsError(username))
                {
                    return username;
                }
                //check if the user is an administrator
                /* var IsAdmin = CheckUserHasAdminRole(secretKey);

                 //if the user is not an admin 
                 if (Utils.IsError(IsAdmin))
                 {
                     var userCompany = CheckUserCompany(secretKey, companyID);
                     if (Utils.IsError(userCompany))
                     {
                         return userCompany;
                     }
                 }

                 //convert the company id received
                 Guid CompanyID;
                 if (!Guid.TryParse(companyID, out CompanyID))
                 {
                     return Utils.WrapError("Company ID is not in the correct format");
                 }*/

                Guid SurveyID;
                if (!Guid.TryParse(surveyID, out SurveyID))
                {
                    return Utils.WrapError("Survey ID is not in the correct format");
                }

                #region Check if the logged in user is assuming a company

                //check if the user is assuming a company
                var assumeResult = CheckAssumeCompany(secretKey);
                if (Utils.IsError(assumeResult))
                {
                    return assumeResult;
                }

                //parse the company ID to a Guid
                Guid CompanyID = Guid.Empty;
                if (!Guid.TryParse(assumeResult, out CompanyID))
                {
                    return Utils.WrapError("The ID of the Company that you are trying to view is in the incorrect format");
                }

                #endregion

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    /*
                    * if there is no value or the value is false, then do not display the inactive team members
                    */
                    if (getAll == null || getAll.Equals("false"))
                    {
                        var surveyTeam = (from u in entity.aspnet_Membership
                                          join pt in entity.ProjectTeams
                                          on u.UserId equals pt.UserID
                                          join r in entity.Roles
                                          on pt.RoleID equals r.RoleId
                                          join st in entity.SurveyTeams
                                          on u.UserId equals st.UserID
                                          join s in entity.Surveys
                                          on st.SurveyID equals s.ID
                                          where st.SurveyID == SurveyID && pt.ProjectID == s.ProjectID &&
                                          st.IsActive == true
                                          select new
                                          {
                                              u.UserId,
                                              u.Firstnames,
                                              u.Lastname,
                                              u.Email,
                                              u.ContactNumber,
                                              pt.RoleID,
                                              r.RoleName,
                                              IsActive = st.IsActive
                                          }).ToList();

                        if (surveyTeam == null || surveyTeam.Count <= 0)
                        {
                            return "[]";
                        }

                        return Helper.SerializeToJavascriptOject(surveyTeam);
                    }
                    /* display active and inactive team members */
                    else
                    {
                        var surveyTeam = (from u in entity.aspnet_Membership
                                          join pt in entity.ProjectTeams
                                          on u.UserId equals pt.UserID
                                          join r in entity.Roles
                                          on pt.RoleID equals r.RoleId
                                          join st in entity.SurveyTeams
                                          on u.UserId equals st.UserID
                                          join s in entity.Surveys
                                          on st.SurveyID equals s.ID
                                          where st.SurveyID == SurveyID && pt.ProjectID == s.ProjectID
                                          select new
                                          {
                                              u.UserId,
                                              u.Firstnames,
                                              u.Lastname,
                                              u.Email,
                                              u.ContactNumber,
                                              pt.RoleID,
                                              r.RoleName,
                                              IsActive = st.IsActive
                                          }).ToList();

                        if (surveyTeam == null || surveyTeam.Count <= 0)
                        {
                            return "[]";
                        }

                        return Helper.SerializeToJavascriptOject(surveyTeam);
                    }
                }
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        //deactivate a team member on your Survey
        public string DeactivateTeamMemberForSurvey(string secretKey, string surveyID, string userID)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                surveyID = TrimIfNotNull(surveyID);
                userID = TrimIfNotNull(userID);

                var username = CheckUserHasRight(secretKey, "ActivateTeamMemberSurvey");
                if (Utils.IsError(username))
                {
                    return username;
                }

                //check if the user is an administrator
                /*var IsAdmin = CheckUserHasAdminRole(secretKey);

                //if the user is not an admin 
                if (Utils.IsError(IsAdmin))
                {
                    //get the company that the logged in user works for
                    var userCompany = CheckUserCompany(secretKey, companyID);
                    if (Utils.IsError(userCompany))
                    {
                        return userCompany;
                    }
                }*/

                Guid SurveyID;
                if (!Guid.TryParse(surveyID, out SurveyID))
                {
                    return Utils.WrapError("Survey ID is not in the correct format");
                }

                //convert the company id received
                /*Guid CompanyID;
                if (!Guid.TryParse(companyID, out CompanyID))
                {
                    return Utils.WrapError("Company ID is not in the correct format");
                }*/

                //convert the user id received
                Guid UserID;
                if (!Guid.TryParse(userID, out UserID))
                {
                    return Utils.WrapError("User ID is not in the correct format");
                }

                //check the survey's status
                var surveyStatus = CheckSurveyStatus(surveyID, "true", null, "true");
                if (Utils.IsError(surveyStatus))
                {
                    return surveyStatus;
                }

                #region Check if the logged in user is assuming a company

                //check if the user is assuming a company
                var assumeResult = CheckAssumeCompany(secretKey);
                if (Utils.IsError(assumeResult))
                {
                    return assumeResult;
                }

                //parse the company ID to a Guid
                Guid CompanyID = Guid.Empty;
                if (!Guid.TryParse(assumeResult, out CompanyID))
                {
                    return Utils.WrapError("The ID of the Company that you are trying to view is in the incorrect format");
                }

                #endregion

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    var curSurvey = (from s in entity.Surveys
                                     join p in entity.Projects
                                     on s.ProjectID equals p.ID
                                     where s.ID == SurveyID && p.ProjectCompany == CompanyID
                                     select s).FirstOrDefault();

                    if (curSurvey == null)
                    {
                        return Utils.WrapError("Survey not found");
                    }

                    //check if the user is assigned to the survey
                    var curSurveyTeam = (from st in entity.SurveyTeams
                                         where st.UserID == UserID &&
                                         st.SurveyID == SurveyID
                                         select st).FirstOrDefault();

                    if (curSurveyTeam == null)
                    {
                        return Utils.WrapError("User was not part of this survey");
                    }

                    //check the project's status
                    var projectStatus = CheckProjectStatus(curSurvey.ProjectID + "", "true", null, "true");
                    if (Utils.IsError(projectStatus))
                    {
                        return projectStatus;
                    }

                    curSurveyTeam.IsActive = false;

                    entity.Entry(curSurveyTeam).State = EntityState.Modified;
                    entity.SaveChanges();

                    //activity stream
                    AddActivity(secretKey, CompanyID + "", userID, null, curSurvey.ProjectID + "", SurveyID + "", "deactivated survey user", ActivityType.User);

                }

                dynamic returnItem = new JObject();
                returnItem.Status = "Success";
                return returnItem.ToString();
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        //reactivate a team member on your project
        public string ReactivateTeamMemberForSurvey(string secretKey, string surveyID, string userID)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                surveyID = TrimIfNotNull(surveyID);
                userID = TrimIfNotNull(userID);

                var username = CheckUserHasRight(secretKey, "ActivateTeamMemberSurvey");
                if (Utils.IsError(username))
                {
                    return username;
                }

                //check if the user is an administrator
                /*var IsAdmin = CheckUserHasAdminRole(secretKey);

                //if the user is not an admin 
                if (Utils.IsError(IsAdmin))
                {
                    //get the company that the logged in user works for
                    var userCompany = CheckUserCompany(secretKey, companyID);
                    if (Utils.IsError(userCompany))
                    {
                        return userCompany;
                    }
                }*/

                Guid SurveyID;
                if (!Guid.TryParse(surveyID, out SurveyID))
                {
                    return Utils.WrapError("Survey ID is not in the correct format");
                }

                //convert the company id received
                /*Guid CompanyID;
                if (!Guid.TryParse(companyID, out CompanyID))
                {
                    return Utils.WrapError("Company ID is not in the correct format");
                }*/

                //convert the user id received
                Guid UserID;
                if (!Guid.TryParse(userID, out UserID))
                {
                    return Utils.WrapError("User ID is not in the correct format");
                }

                //check the survey's status
                var surveyStatus = CheckSurveyStatus(surveyID, "true", null, "true");
                if (Utils.IsError(surveyStatus))
                {
                    return surveyStatus;
                }

                #region Check if the logged in user is assuming a company

                //check if the user is assuming a company
                var assumeResult = CheckAssumeCompany(secretKey);
                if (Utils.IsError(assumeResult))
                {
                    return assumeResult;
                }

                //parse the company ID to a Guid
                Guid CompanyID = Guid.Empty;
                if (!Guid.TryParse(assumeResult, out CompanyID))
                {
                    return Utils.WrapError("The ID of the Company that you are trying to view is in the incorrect format");
                }

                #endregion

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    var curSurvey = (from s in entity.Surveys
                                     join p in entity.Projects
                                     on s.ProjectID equals p.ID
                                     where s.ID == SurveyID && p.ProjectCompany == CompanyID
                                     select s).FirstOrDefault();

                    if (curSurvey == null)
                    {
                        return Utils.WrapError("Survey not found");
                    }

                    //check if the user is assigned to the survey
                    var curSurveyTeam = (from st in entity.SurveyTeams
                                         where st.UserID == UserID &&
                                         st.SurveyID == SurveyID
                                         select st).FirstOrDefault();

                    if (curSurveyTeam == null)
                    {
                        return Utils.WrapError("User was not part of this survey");
                    }

                    //check the project's status
                    var projectStatus = CheckProjectStatus(curSurvey.ProjectID + "", "true", null, "true");
                    if (Utils.IsError(projectStatus))
                    {
                        return projectStatus;
                    }

                    curSurveyTeam.IsActive = true;

                    entity.Entry(curSurveyTeam).State = EntityState.Modified;
                    entity.SaveChanges();

                    //activity stream
                    AddActivity(secretKey, CompanyID + "", userID, null, curSurvey.ProjectID + "", SurveyID + "", "reactivated survey user", ActivityType.User);

                }

                dynamic returnItem = new JObject();
                returnItem.Status = "Success";
                return returnItem.ToString();
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        //duplicate a survey
        public string DuplicateSurvey(string secretKey, string fromSurveyID, string surveyTitle, string purpose, string conclusion, string isPageView, string theme)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                surveyTitle = TrimIfNotNull(surveyTitle);
                purpose = TrimIfNotNull(purpose);
                fromSurveyID = TrimIfNotNull(fromSurveyID);
                conclusion = TrimIfNotNull(conclusion);
                isPageView = TrimIfNotNull(isPageView);
                if (string.IsNullOrWhiteSpace(isPageView)) { isPageView = "true"; }
                isPageView = isPageView.ToLower();
                theme = TrimIfNotNull(theme);

                var username = CheckUserHasRight(secretKey, "DuplicateSurvey");
                if (Utils.IsError(username))
                {
                    return username;
                }

                //check if the user is an administrator
                /*var IsAdmin = CheckUserHasAdminRole(secretKey);

                //if the user is not an admin 
                if (Utils.IsError(IsAdmin))
                {
                    var userCompany = CheckUserCompany(secretKey, companyID);
                    if (Utils.IsError(userCompany))
                    {
                        return userCompany;
                    }
                }*/

                if (string.IsNullOrWhiteSpace(surveyTitle))
                {
                    return Utils.WrapError("Please ensure that you enter a title");
                }

                if (string.IsNullOrWhiteSpace(purpose))
                {
                    return Utils.WrapError("Please ensure that you enter a purpose");
                }

                if (string.IsNullOrWhiteSpace(conclusion))
                {
                    return Utils.WrapError("Please ensure that you enter a conclusion");
                }

                Guid FromSurveyID;
                if (!Guid.TryParse(fromSurveyID, out FromSurveyID))
                {
                    return Utils.WrapError("Survey ID is not in the correct format");
                }

                #region Check if the logged in user is assuming a company

                //check if the user is assuming a company
                var assumeResult = CheckAssumeCompany(secretKey);
                if (Utils.IsError(assumeResult))
                {
                    return assumeResult;
                }

                //parse the company ID to a Guid
                Guid CompanyID = Guid.Empty;
                if (!Guid.TryParse(assumeResult, out CompanyID))
                {
                    return Utils.WrapError("The ID of the Company that you are trying to view is in the incorrect format");
                }

                #endregion

                Guid LoggedInUserID = (Guid)Membership.GetUser(username).ProviderUserKey;

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    #region  check if the user can duplicate this survey based on the number of surveys they currently have

                    //check if the company is allowed to add more surveys
                    var packageResult = CheckCompanyPackageNoSurveys(CompanyID + "");
                    if (Utils.IsError(packageResult))
                    {
                        return packageResult;
                    }

                    #endregion

                    //get the survey that we are duplicating
                    var fromSurvey = (from s in entity.Surveys
                                      join p in entity.Projects
                                      on s.ProjectID equals p.ID
                                      where s.ID == FromSurveyID && p.ProjectCompany == CompanyID
                                      select s).FirstOrDefault();

                    if (fromSurvey == null)
                    {
                        return Utils.WrapError("Survey does not exist");
                    }

                    //check if the user is on the project team for the old survey, if he is then allow the survey to be duplicated
                    var fromProjectTeam = (from pt in entity.ProjectTeams
                                           join p in entity.Projects
                                           on pt.ProjectID equals p.ID
                                           join s in entity.Surveys
                                           on p.ID equals s.ProjectID
                                           where p.ID == fromSurvey.ProjectID && s.ID == fromSurvey.ID && pt.UserID == LoggedInUserID
                                           select p).FirstOrDefault();

                    if (fromProjectTeam == null)
                    {
                        return Utils.WrapError("You cannot duplicate this survey as you are not on the project team that this survey belongs to");
                    }

                    #region check if the user can duplicate this survey based on project status

                    //check the project's status
                    var projectStatus = CheckProjectStatus(fromSurvey.ProjectID + "", "true", null, "true");
                    if (Utils.IsError(projectStatus))
                    {
                        return projectStatus;
                    }

                    #endregion

                    #region check if the user can duplicate this survey based on the number of questions allowed per survey

                    //get the number of questions in the old survey
                    var numberQuestionsAdding = (from qg in entity.QuestionGroups
                                                 join q in entity.Questions
                                                 on qg.ID equals q.GroupID
                                                 where qg.SurveyID == FromSurveyID
                                                 select q).Count();


                    //check if the company is allowed to add more questions
                    var questionsResult = CheckCompanyPackageNoQuestionsNewSurvey(CompanyID + "", numberQuestionsAdding + "");
                    if (Utils.IsError(questionsResult))
                    {
                        return questionsResult;
                    }

                    #endregion

                    #region check if the user can duplicate this survey based on if  piping is allowed

                    //get the number of questions that have piping
                    var numberPipingQuestions = (from qg in entity.QuestionGroups
                                                 join qp in entity.QuestionPipings
                                                 on qg.ID equals qp.GroupID
                                                 where qg.SurveyID == FromSurveyID
                                                 select qp).Count();

                    if (numberPipingQuestions > 0)
                    {
                        //check if the company is allowed to use piping
                        var pipingResult = CheckCompanyPackagePiping(CompanyID + "");
                        if (Utils.IsError(pipingResult))
                        {
                            return pipingResult;
                        }
                    }

                    #endregion

                    #region check if the user can duplicate this survey based on if summing is allowed

                    //get the number of questions that have summing
                    var numberSummingQuestions = (from qg in entity.QuestionGroups
                                                  join q in entity.Questions
                                                  on qg.ID equals q.GroupID
                                                  where qg.SurveyID == FromSurveyID && q.HasSum.HasValue && q.HasSum.Value
                                                  select q).Count();

                    if (numberSummingQuestions > 0)
                    {
                        //check if the company is allowed to use summing
                        var packageSummingResult = CheckCompanyPackageSumming(CompanyID + "");
                        if (Utils.IsError(packageSummingResult))
                        {
                            return packageSummingResult;
                        }
                    }

                    #endregion

                    #region check if the user can duplicate this survey based on if the types of questions are allowed

                    //get the number of questions that are camera type
                    var numberCameraQuestions = (from qg in entity.QuestionGroups
                                                 join q in entity.Questions
                                                 on qg.ID equals q.GroupID
                                                 where qg.SurveyID == FromSurveyID && q.QuestionType == CameraType
                                                 select q).Count();

                    //if there are questions
                    if (numberCameraQuestions > 0)
                    {
                        //check if the company is allowed to use the photo/camera feature
                        var result = CheckCompanyPackagePhotoCamera(CompanyID + "");
                        if (Utils.IsError(result))
                        {
                            return result;
                        }
                    }

                    //get the number of questions that are location type
                    var numberLocationQuestions = (from qg in entity.QuestionGroups
                                                   join q in entity.Questions
                                                   on qg.ID equals q.GroupID
                                                   where qg.SurveyID == FromSurveyID && q.QuestionType == LocationType
                                                   select q).Count();

                    //if there are questions
                    if (numberLocationQuestions > 0)
                    {
                        //check if the company is allowed to use the geo services feature
                        var result = CheckCompanyPackageGeoServices(CompanyID + "");
                        if (Utils.IsError(result))
                        {
                            return result;
                        }
                    }

                    //get the number of questions that are signature type
                    var numberSignatureQuestions = (from qg in entity.QuestionGroups
                                                    join q in entity.Questions
                                                    on qg.ID equals q.GroupID
                                                    where qg.SurveyID == FromSurveyID && q.QuestionType == SignatureType
                                                    select q).Count();

                    //if there are questions
                    if (numberSignatureQuestions > 0)
                    {
                        //check if the company is allowed to use the signature feature
                        var result = CheckCompanyPackageSignatures(CompanyID + "");
                        if (Utils.IsError(result))
                        {
                            return result;
                        }
                    }


                    #endregion

                    #region create the new survey

                    //create a new survey
                    var newSurvey = new Survey();
                    Guid newSurveyID = Guid.NewGuid();
                    newSurvey.ID = newSurveyID;
                    newSurvey.SurveyTitle = surveyTitle;
                    newSurvey.ProjectID = fromSurvey.ProjectID;
                    newSurvey.DateCreated = DateTime.Now;
                    newSurvey.CreatedBy = LoggedInUserID;
                    newSurvey.Purpose = purpose;
                    newSurvey.IsActive = true;
                    newSurvey.SurveyConclusion = conclusion;
                    newSurvey.IsPageView = isPageView == "true" ? true : false;
                    newSurvey.SurveyTheme = theme;

                    entity.Surveys.Add(newSurvey);

                    //activity stream
                    AddActivity(secretKey, CompanyID + "", null, null, fromSurvey.ProjectID + "", newSurveyID + "", "created a new survey called", ActivityType.Survey);

                    #endregion


                    SortedList<Guid, Guid> allGroups = new SortedList<Guid, Guid>();


                    #region copy parent groups

                    SortedList<Guid, Guid> pGroups = new SortedList<Guid, Guid>();

                    //get the parent groups for this survey
                    var parentGroups = (from pg in entity.QuestionGroups
                                        where pg.SurveyID == FromSurveyID && !pg.ParentGroupID.HasValue
                                        select pg).ToList();
                    //if there are groups
                    if (parentGroups != null || parentGroups.Count > 0)
                    {
                        //cycle through each of the groups
                        foreach (var curG in parentGroups)
                        {
                            Guid newGroupID = Guid.NewGuid();

                            //save the old ID and new ID combination
                            pGroups.Add(curG.ID, newGroupID);

                            //save the old ID and new ID combination
                            allGroups.Add(curG.ID, newGroupID);

                            Helper.LogMessage("PARENT::: old : " + curG.ID + " new : " + newGroupID);

                            //create a new group
                            var newGroup = new QuestionGroup();
                            newGroup.ID = newGroupID;
                            newGroup.GroupType = curG.GroupType;
                            newGroup.GroupName = curG.GroupName;
                            newGroup.GroupHeading = curG.GroupHeading;
                            newGroup.CreatedBy = LoggedInUserID;
                            newGroup.DateCreated = DateTime.Now;
                            newGroup.Position = curG.Position;
                            newGroup.SurveyID = newSurveyID;
                            newGroup.ParentGroupID = null;
                            entity.QuestionGroups.Add(newGroup);

                        }

                        entity.SaveChanges();
                    }

                    #endregion

                    #region copy child groups

                    SortedList<Guid, Guid> questionsList = new SortedList<Guid, Guid>();


                    //get the groups assigned to the survey
                    var childGroups = (from g in entity.QuestionGroups
                                       where g.SurveyID == FromSurveyID && g.ParentGroupID.HasValue
                                       select g).ToList();

                    //if there are groups
                    if (childGroups != null || childGroups.Count > 0)
                    {

                        //cycle through each of the groups
                        foreach (var curG in childGroups)
                        {
                            //get the new Parent Group ID associated with the old parent group id
                            Guid ParentGroupID = pGroups[curG.ParentGroupID.Value];

                            Guid newGroupID = Guid.NewGuid();

                            Helper.LogMessage("CHILD::: old : " + curG.ParentGroupID + " new : " + ParentGroupID);

                            //save the old ID and new ID combination
                            allGroups.Add(curG.ID, newGroupID);

                            //create a new group
                            var newGroup = new QuestionGroup();
                            newGroup.ID = newGroupID;
                            newGroup.GroupType = curG.GroupType;
                            newGroup.GroupName = curG.GroupName;
                            newGroup.GroupHeading = curG.GroupHeading;
                            newGroup.CreatedBy = LoggedInUserID;
                            newGroup.DateCreated = DateTime.Now;
                            newGroup.Position = curG.Position;
                            newGroup.SurveyID = newSurveyID;
                            newGroup.ParentGroupID = ParentGroupID;
                            entity.QuestionGroups.Add(newGroup);

                            #region copy questions

                            //get all the questions for the group
                            var curQuestions = (from q in entity.Questions
                                                where q.GroupID == curG.ID
                                                select q).ToList();

                            //if there are questions
                            if (curQuestions != null && curQuestions.Count > 0)
                            {

                                //cycle through all the questions in the group
                                foreach (var curQ in curQuestions)
                                {

                                    Guid newQuestionID = Guid.NewGuid();

                                    //save the old ID and new ID combination
                                    questionsList.Add(curQ.ID, newQuestionID);

                                    //create a new questions
                                    var newQuestion = new Question();
                                    newQuestion.ID = newQuestionID;
                                    newQuestion.QuestionText = curQ.QuestionText;
                                    newQuestion.QuestionType = curQ.QuestionType;
                                    newQuestion.Position = curQ.Position;
                                    newQuestion.GroupID = newGroupID;
                                    newQuestion.CreatedBy = LoggedInUserID;
                                    newQuestion.DateCreated = DateTime.Now;
                                    newQuestion.RegexPattern = curQ.RegexPattern;
                                    newQuestion.MinimumValue = curQ.MinimumValue;
                                    newQuestion.MaximumValue = curQ.MaximumValue;
                                    newQuestion.RequiredQuestion = curQ.RequiredQuestion;
                                    newQuestion.ContainsValue = curQ.ContainsValue;
                                    newQuestion.EqualsValue = curQ.EqualsValue;
                                    newQuestion.NotEqualsValue = curQ.NotEqualsValue;
                                    newQuestion.StartsWithValue = curQ.StartsWithValue;
                                    newQuestion.EndsWithValue = curQ.EndsWithValue;
                                    newQuestion.LengthValue = curQ.LengthValue;
                                    newQuestion.CalculationValue = curQ.CalculationValue;
                                    newQuestion.HasSum = curQ.HasSum;
                                    entity.Questions.Add(newQuestion);

                                    //get the values for the question
                                    var curQuestionValues = (from qv in entity.QuestionValues
                                                             where qv.QuestionID == curQ.ID
                                                             select qv).ToList();

                                    //if there are question values
                                    if (curQuestionValues != null && curQuestionValues.Count > 0)
                                    {
                                        //cycle through all the values
                                        foreach (var curQuestionVal in curQuestionValues)
                                        {
                                            var newQuestionValue = new QuestionValue();
                                            Guid newQuestionValueID = Guid.NewGuid();
                                            newQuestionValue.ID = newQuestionValueID;
                                            newQuestionValue.QuestionID = newQuestionID;
                                            newQuestionValue.Name = curQuestionVal.Name;
                                            newQuestionValue.Value = curQuestionVal.Value;
                                            newQuestionValue.IsDefault = curQuestionVal.IsDefault;
                                            newQuestionValue.Position = curQuestionVal.Position;
                                            newQuestionValue.IsOther = curQuestionVal.IsOther;
                                            entity.QuestionValues.Add(newQuestionValue);
                                        }
                                    }
                                }

                            }

                            #endregion

                            /*#region copy rows

                            //get the rows that are assigned to the group
                            var curQuestionRows = (from qr in entity.QuestionRows
                                                   where qr.GroupID == curG.ID
                                                   select qr).ToList();

                            //if there are rows
                            if (curQuestionRows != null && curQuestionRows.Count() > 0)
                            {
                                //cycle through all the rows in the group
                                foreach (var curQ in curQuestionRows)
                                {
                                    Guid NewQuestionID = Guid.NewGuid();

                                    Helper.LogMessage("QUESTION::: old : " + curQ.GroupID + " new : " + newGroupID);

                                    //copy the row to the new group
                                    var newQuestionRow = new QuestionRow();
                                    newQuestionRow.ID = NewQuestionID;
                                    newQuestionRow.RowText = curQ.RowText;
                                    newQuestionRow.Position = curQ.Position;
                                    newQuestionRow.GroupID = newGroupID;
                                    newQuestionRow.DateCreated = DateTime.Now;
                                    newQuestionRow.CreatedBy = LoggedInUserID;
                                    entity.QuestionRows.Add(newQuestionRow);
                                }
                            }

                            #endregion
                            */

                            /* #region copy piping

                             //get the piping that are assigned to the group
                             var curQuestionPiping = (from qp in entity.QuestionPipings
                                                      where qp.GroupID == curG.ID
                                                      select qp).ToList();

                             //if there is piping
                             if (curQuestionPiping != null && curQuestionPiping.Count() > 0)
                             {
                                 //cycle through all the piping in the group
                                 foreach (var curP in curQuestionPiping)
                                 {
                                     Guid NewPipingID = Guid.NewGuid();

                                     Helper.LogMessage("PIPING::: old : " + curP.GroupID + " new : " + newGroupID);

                                     //  go through pipingconditions object to update it question ID's
                                     #region go through pipingconditions object to update it question ID's

                                     //save the original piping condition
                                     var newPipingCondition = curP.PipingConditions;

                                     Helper.LogMessage("Original Piping " + newPipingCondition);

                                     //check if there are any questions that need to chagne
                                     foreach (var oldQuestionID in questionsList.Keys)
                                     {

                                         //if the question ID is in the piping condition
                                         if (newPipingCondition.Contains(oldQuestionID + ""))
                                         {

                                             Helper.LogMessage("Found old question " + oldQuestionID + " replacing with " + questionsList[oldQuestionID]);
                                             //change the question ID in the piping condition
                                             newPipingCondition = newPipingCondition.Replace(oldQuestionID + "", questionsList[oldQuestionID] + "");
                                         }
                                     }

                                     Helper.LogMessage("New Piping " + newPipingCondition);

                                     #endregion

                                     //copy the piping to the new group
                                     var newQuestionPiping = new QuestionPiping();
                                     newQuestionPiping.ID = NewPipingID;
                                     newQuestionPiping.GroupID = newGroupID;
                                     newQuestionPiping.PipingConditions = newPipingCondition;
                                     newQuestionPiping.Show = curP.Show;
                                     entity.QuestionPipings.Add(newQuestionPiping);
                                 }
                             }

                             #endregion*/
                        }
                    }



                    foreach (var oldGroupID in allGroups.Keys)
                    {

                        //get the new Parent Group ID associated with the old parent group id
                        Guid newGroupID = allGroups[oldGroupID];

                        #region copy piping

                        //get the piping that are assigned to the group
                        var curQuestionPiping = (from qp in entity.QuestionPipings
                                                 where qp.GroupID == oldGroupID
                                                 select qp).ToList();

                        //if there is piping
                        if (curQuestionPiping != null && curQuestionPiping.Count() > 0)
                        {
                            //cycle through all the piping in the group
                            foreach (var curP in curQuestionPiping)
                            {
                                Guid NewPipingID = Guid.NewGuid();


                                Helper.LogMessage("PIPING::: old : " + curP.GroupID + " new : " + newGroupID);

                                //  go through pipingconditions object to update it question ID's
                                #region go through pipingconditions object to update it question ID's

                                //save the original piping condition
                                var newPipingCondition = curP.PipingConditions;

                                Helper.LogMessage("Original Piping " + newPipingCondition);

                                //check if there are any questions that need to chagne
                                foreach (var oldQuestionID in questionsList.Keys)
                                {

                                    //if the question ID is in the piping condition
                                    if (newPipingCondition.Contains(oldQuestionID + ""))
                                    {

                                        Helper.LogMessage("Found old question " + oldQuestionID + " replacing with " + questionsList[oldQuestionID]);
                                        //change the question ID in the piping condition
                                        newPipingCondition = newPipingCondition.Replace(oldQuestionID + "", questionsList[oldQuestionID] + "");
                                    }
                                }

                                #endregion

                                //copy the piping to the new group
                                var newQuestionPiping = new QuestionPiping();
                                newQuestionPiping.ID = NewPipingID;
                                newQuestionPiping.GroupID = newGroupID;
                                newQuestionPiping.PipingConditions = newPipingCondition;
                                newQuestionPiping.Show = curP.Show;
                                entity.QuestionPipings.Add(newQuestionPiping);
                            }
                        }
                        #endregion

                        #region copy rows

                        //get the rows that are assigned to the group
                        var curQuestionRows = (from qr in entity.QuestionRows
                                               where qr.GroupID == oldGroupID
                                               select qr).ToList();

                        //if there are rows
                        if (curQuestionRows != null && curQuestionRows.Count() > 0)
                        {
                            //cycle through all the rows in the group
                            foreach (var curQ in curQuestionRows)
                            {
                                Guid NewQuestionID = Guid.NewGuid();

                                Helper.LogMessage("QUESTION::: old : " + curQ.GroupID + " new : " + newGroupID);

                                //copy the row to the new group
                                var newQuestionRow = new QuestionRow();
                                newQuestionRow.ID = NewQuestionID;
                                newQuestionRow.RowText = curQ.RowText;
                                newQuestionRow.Position = curQ.Position;
                                newQuestionRow.GroupID = newGroupID;
                                newQuestionRow.DateCreated = DateTime.Now;
                                newQuestionRow.CreatedBy = LoggedInUserID;
                                entity.QuestionRows.Add(newQuestionRow);
                            }
                        }

                        #endregion

                    }

                    #endregion

                    entity.SaveChanges();

                    dynamic returnItem = new JObject();
                    returnItem.Status = "Success";
                    returnItem.NewSurveyID = newSurveyID;
                    return returnItem.ToString();
                }

            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        //start a survey
        public string StartSurvey(string secretKey, string surveyID)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                surveyID = TrimIfNotNull(surveyID);

                var username = CheckUserHasRight(secretKey, "StartSurvey");
                if (Utils.IsError(username))
                {
                    return username;
                }

                Guid SurveyID;
                if (!Guid.TryParse(surveyID, out SurveyID))
                {
                    return Utils.WrapError("Survey ID is not in the correct format");
                }

                //convert the company id received
                /*Guid CompanyID;
                if (!Guid.TryParse(companyID, out CompanyID))
                {
                    return Utils.WrapError("Company ID is not in the correct format");
                }*/

                Guid LoggedInUserID = (Guid)Membership.GetUser(username).ProviderUserKey;

                //check if the user is an administrator
                /* var IsAdmin = CheckUserHasAdminRole(secretKey);

                 //if the user is not an admin 
                 if (Utils.IsError(IsAdmin))
                 {
                     var userCompany = CheckUserCompany(secretKey, companyID);
                     if (Utils.IsError(userCompany))
                     {
                         return userCompany;
                     }
                 }*/

                //check the survey's status
                var surveyStatus = CheckSurveyStatus(surveyID, "true", "true", "true");
                if (Utils.IsError(surveyStatus))
                {
                    return surveyStatus;
                }


                #region Check if the logged in user is assuming a company

                //check if the user is assuming a company
                var assumeResult = CheckAssumeCompany(secretKey);
                if (Utils.IsError(assumeResult))
                {
                    return assumeResult;
                }

                //parse the company ID to a Guid
                Guid CompanyID = Guid.Empty;
                if (!Guid.TryParse(assumeResult, out CompanyID))
                {
                    return Utils.WrapError("The ID of the Company that you are trying to view is in the incorrect format");
                }

                #endregion

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    var survey = (from s in entity.Surveys
                                  join p in entity.Projects
                                  on s.ProjectID equals p.ID
                                  where s.ID == SurveyID && p.ProjectCompany == CompanyID
                                  select s).FirstOrDefault();

                    if (survey == null)
                    {
                        return Utils.WrapError("The survey you are trying to change does not exist");
                    }

                    //check the project's status
                    var projectStatus = CheckProjectStatus(survey.ProjectID + "", "true", null, "true");
                    if (Utils.IsError(projectStatus))
                    {
                        return projectStatus;
                    }

                    //change project info
                    survey.StartDate = DateTime.Now;
                    survey.StartedByUserID = LoggedInUserID;

                    entity.Entry(survey).State = EntityState.Modified;
                    entity.SaveChanges();

                    //activity stream
                    AddActivity(secretKey, CompanyID + "", null, null, survey.ProjectID + "", SurveyID + "", "started survey", ActivityType.Survey);

                }

                dynamic returnItem = new JObject();
                returnItem.Status = "Success";
                return returnItem.ToString();
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        //end a survey
        public string EndSurvey(string secretKey, string surveyID)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                surveyID = TrimIfNotNull(surveyID);

                var username = CheckUserHasRight(secretKey, "EndSurvey");
                if (Utils.IsError(username))
                {
                    return username;
                }

                Guid SurveyID;
                if (!Guid.TryParse(surveyID, out SurveyID))
                {
                    return Utils.WrapError("Survey ID is not in the correct format");
                }

                //convert the company id received
                /*Guid CompanyID;
                if (!Guid.TryParse(companyID, out CompanyID))
                {
                    return Utils.WrapError("Company ID is not in the correct format");
                }*/

                Guid LoggedInUserID = (Guid)Membership.GetUser(username).ProviderUserKey;

                //check if the user is an administrator
                /*var IsAdmin = CheckUserHasAdminRole(secretKey);

                //if the user is not an admin 
                if (Utils.IsError(IsAdmin))
                {
                    var userCompany = CheckUserCompany(secretKey, companyID);
                    if (Utils.IsError(userCompany))
                    {
                        return userCompany;
                    }
                }*/

                //check the survey's status
                var surveyStatus = CheckSurveyStatus(surveyID, "true", null, "true");
                if (Utils.IsError(surveyStatus))
                {
                    return surveyStatus;
                }

                #region Check if the logged in user is assuming a company

                //check if the user is assuming a company
                var assumeResult = CheckAssumeCompany(secretKey);
                if (Utils.IsError(assumeResult))
                {
                    return assumeResult;
                }

                //parse the company ID to a Guid
                Guid CompanyID = Guid.Empty;
                if (!Guid.TryParse(assumeResult, out CompanyID))
                {
                    return Utils.WrapError("The ID of the Company that you are trying to view is in the incorrect format");
                }

                #endregion

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    var survey = (from s in entity.Surveys
                                  join p in entity.Projects
                                  on s.ProjectID equals p.ID
                                  where s.ID == SurveyID && p.ProjectCompany == CompanyID
                                  select s).FirstOrDefault();

                    if (survey == null)
                    {
                        return Utils.WrapError("The survey you are trying to change does not exist");
                    }

                    //check the project's status
                    var projectStatus = CheckProjectStatus(survey.ProjectID + "", "true", null, "true");
                    if (Utils.IsError(projectStatus))
                    {
                        return projectStatus;
                    }

                    if (survey.StartDate.Value == null)
                    {
                        return Utils.WrapError("You cannot end a survey that has not been started");
                    }

                    //change project info
                    survey.EndDate = DateTime.Now;
                    survey.EndedByUserID = LoggedInUserID;
                    survey.IsActive = false;

                    entity.Entry(survey).State = EntityState.Modified;
                    entity.SaveChanges();

                    //activity stream
                    AddActivity(secretKey, CompanyID + "", null, null, survey.ProjectID + "", SurveyID + "", "ended survey", ActivityType.Survey);

                }

                dynamic returnItem = new JObject();
                returnItem.Status = "Success";
                return returnItem.ToString();
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        //delete a survey
        public string DeleteSurvey(string secretKey, string surveyID)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                surveyID = TrimIfNotNull(surveyID);

                var username = CheckUserHasRight(secretKey, "DeleteSurvey");
                if (Utils.IsError(username))
                {
                    return username;
                }

                Guid SurveyID;
                if (!Guid.TryParse(surveyID, out SurveyID))
                {
                    return Utils.WrapError("Survey ID is not in the correct format");
                }

                #region Check if the logged in user is assuming a company

                //check if the user is assuming a company
                var assumeResult = CheckAssumeCompany(secretKey);
                if (Utils.IsError(assumeResult))
                {
                    return assumeResult;
                }

                //parse the company ID to a Guid
                Guid CompanyID = Guid.Empty;
                if (!Guid.TryParse(assumeResult, out CompanyID))
                {
                    return Utils.WrapError("The ID of the Company that you are trying to view is in the incorrect format");
                }

                #endregion

                Guid LoggedInUserID = (Guid)Membership.GetUser(username).ProviderUserKey;

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    //get the survey that we are deleting
                    var curSurvey = (from s in entity.Surveys
                                     join p in entity.Projects
                                     on s.ProjectID equals p.ID
                                     where s.ID == SurveyID && p.ProjectCompany == CompanyID
                                     select s).FirstOrDefault();

                    if (curSurvey == null)
                    {
                        return Utils.WrapError("Survey does not exist");
                    }

                    string curSurveyTitle = curSurvey.SurveyTitle;

                    #region Responses Check

                    //check if the survey has any responses
                    var curResponses = (from r in entity.Responses
                                        where r.SurveyID == SurveyID
                                        select r).ToList();

                    //if there are responses for the survey
                    if (curResponses != null && curResponses.Count() > 0)
                    {
                        return Utils.WrapError("You cannot delete this survey as there are already responses captured for it");
                    }

                    #endregion

                    #region check if the user can delete this survey based on project status

                    //check the project's status
                    var projectStatus = CheckProjectStatus(curSurvey.ProjectID + "", "true", null, "true");
                    if (Utils.IsError(projectStatus))
                    {
                        return projectStatus;
                    }

                    #endregion

                    #region question groups and related data

                    //get the question groups
                    var curQuestionGroups = (from qg in entity.QuestionGroups
                                             where qg.SurveyID == SurveyID
                                             select qg).ToList();

                    //if there are groups
                    if (curQuestionGroups != null && curQuestionGroups.Count() > 0)
                    {

                        #region questions and related data

                        //get the questions
                        var curQuestions = (from q in entity.Questions
                                            join qg in entity.QuestionGroups
                                                on q.GroupID equals qg.ID
                                            where qg.SurveyID == SurveyID
                                            select q).ToList();

                        if (curQuestions != null && curQuestions.Count() > 0)
                        {
                            #region question values

                            //delete question values
                            var curQuestionVaues = (from qv in entity.QuestionValues
                                                    join q in entity.Questions
                                                    on qv.QuestionID equals q.ID
                                                    join qg in entity.QuestionGroups
                                                        on q.GroupID equals qg.ID
                                                    where qg.SurveyID == SurveyID
                                                    select qv).ToList();

                            if (curQuestionVaues != null && curQuestionVaues.Count() > 0)
                            {
                                entity.QuestionValues.RemoveRange(curQuestionVaues);
                            }

                            #endregion

                            //delete questions
                            entity.Questions.RemoveRange(curQuestions);
                        }

                        #endregion

                        #region piping

                        //delete piping
                        var curPiping = (from p in entity.QuestionPipings
                                         join qg in entity.QuestionGroups
                                           on p.GroupID equals qg.ID
                                         where qg.SurveyID == SurveyID
                                         select p).ToList();

                        if (curPiping != null && curPiping.Count() > 0)
                        {

                            entity.QuestionPipings.RemoveRange(curPiping);
                        }

                        #endregion

                        #region question rows

                        //delete question rows
                        var curRows = (from r in entity.QuestionRows
                                       join qg in entity.QuestionGroups
                                             on r.GroupID equals qg.ID
                                       where qg.SurveyID == SurveyID
                                       select r).ToList();

                        if (curRows != null && curRows.Count() > 0)
                        {

                            entity.QuestionRows.RemoveRange(curRows);
                        }

                        #endregion

                        //delete the groups
                        entity.QuestionGroups.RemoveRange(curQuestionGroups);
                    }

                    #endregion

                    #region survey team

                    //delete the survey team
                    var curSurveyTeam = (from st in entity.SurveyTeams
                                         where st.SurveyID == SurveyID
                                         select st).ToList();

                    if (curSurveyTeam != null)
                    {
                        entity.SurveyTeams.RemoveRange(curSurveyTeam);
                    }


                    #endregion

                    //delete the survey
                    entity.Surveys.Remove(curSurvey);
                    entity.Entry(curSurvey).State = EntityState.Deleted;

                    entity.SaveChanges();

                    //activity stream
                    AddActivity(secretKey, CompanyID + "", null, null, curSurvey.ProjectID + "", null, "deleted a survey called " + curSurveyTitle, ActivityType.Survey);


                    dynamic returnItem = new JObject();
                    returnItem.Status = "Success";
                    return returnItem.ToString();
                }

            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        //generate a email link for a survey
        public string GenerateSurveyEmailLink(string secretKey, string surveyID, string userID)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                surveyID = TrimIfNotNull(surveyID);
                userID = TrimIfNotNull(userID);

                var username = CheckUserHasRight(secretKey, "AddSurvey");
                if (Utils.IsError(username))
                {
                    return username;
                }

                Guid SurveyID;
                if (!Guid.TryParse(surveyID, out SurveyID))
                {
                    return Utils.WrapError("Survey ID is not in the correct format");
                }


                Guid UserID;
                if (!Guid.TryParse(userID, out UserID))
                {
                    return Utils.WrapError("Please select the user that you would like the emailed responses to be uploaded as");
                }

                #region Check if the logged in user is assuming a company

                //check if the user is assuming a company
                var assumeResult = CheckAssumeCompany(secretKey);
                if (Utils.IsError(assumeResult))
                {
                    return assumeResult;
                }

                //parse the company ID to a Guid
                Guid CompanyID = Guid.Empty;
                if (!Guid.TryParse(assumeResult, out CompanyID))
                {
                    return Utils.WrapError("The ID of the Company that you are trying to view is in the incorrect format");
                }

                #endregion

                Guid LoggedInUserID = (Guid)Membership.GetUser(username).ProviderUserKey;

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    //get the survey that we are deleting
                    var curSurvey = (from s in entity.Surveys
                                     join p in entity.Projects
                                     on s.ProjectID equals p.ID
                                     where s.ID == SurveyID && p.ProjectCompany == CompanyID
                                     select s).FirstOrDefault();

                    if (curSurvey == null)
                    {
                        return Utils.WrapError("Survey does not exist");
                    }

                    if (curSurvey.IsEmailed.HasValue && curSurvey.IsEmailed.Value == true)
                    {
                        return Utils.WrapError("This survey is already set as emailed");
                    }

                    if (curSurvey.StartDate == null)
                    {

                        return Utils.WrapError("This survey must first be started before you can generate a link");
                    }

                    var curUser = (from u in entity.aspnet_Membership
                                   join c in entity.CompanyUsers
                                   on u.UserId equals c.UserID
                                   where u.UserId == UserID && c.CompanyID == CompanyID
                                   select u).FirstOrDefault();

                    if (curUser == null)
                    {
                        return Utils.WrapError("Could not find the user you are trying to set as the response user");
                    }

                    //generate a unique id for the survey
                    Guid EmailedUniqueID = Guid.NewGuid();

                    //generate the link
                    string BaseSurveyLink = ConfigurationManager.AppSettings["baseLinkPathEmailedSurveys"].ToString();
                    string SurveyLink = BaseSurveyLink + EmailedUniqueID;

                    //save the details
                    curSurvey.IsEmailed = true;
                    curSurvey.EmailedSurveyLink = SurveyLink;
                    curSurvey.EmailedUserIDForResponses = UserID;
                    curSurvey.EmailedUniqueID = EmailedUniqueID;
                    entity.Surveys.Add(curSurvey);
                    entity.Entry(curSurvey).State = EntityState.Modified;

                    entity.SaveChanges();

                    //activity stream
                    AddActivity(secretKey, CompanyID + "", null, null, curSurvey.ProjectID + "", null, "generated a email link (" + SurveyLink + ") for Survey " + curSurvey.SurveyTitle, ActivityType.Survey);

                    dynamic returnItem = new JObject();
                    returnItem.Status = "Success";
                    returnItem.SurveyLink = SurveyLink;
                    returnItem.EmailedUniqueID = EmailedUniqueID;
                    returnItem.EmailedUserIDForResponses = UserID;
                    return returnItem.ToString();
                }

            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        #endregion

        #region QuestionGroups

        //get the next position for the group
        public string GetNextGroupPosition(string surveyID, string parentGroupID)
        {
            try
            {
                //remove any extra whitespaces
                surveyID = TrimIfNotNull(surveyID);
                parentGroupID = TrimIfNotNull(parentGroupID);

                Guid SurveyID;
                if (!Guid.TryParse(surveyID, out SurveyID))
                {
                    return Utils.WrapError("Survey ID is not in the correct format");
                }

                Guid ParentGroupID;
                if (!Guid.TryParse(parentGroupID, out ParentGroupID))
                {
                    return Utils.WrapError("Parent Group ID is not in the correct format");
                }

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    //check that the survey exists
                    var survey = (from s in entity.Surveys
                                  where s.ID == SurveyID
                                  select s).FirstOrDefault();

                    if (survey == null)
                    {
                        return Utils.WrapError("Survey not found");
                    }

                    //get the highest position for the groups
                    var groups = (from g in entity.QuestionGroups
                                  where g.SurveyID == SurveyID
                                    && (
                                        (ParentGroupID == Guid.Empty && g.ParentGroupID == null)
                                        ||
                                        (ParentGroupID != Guid.Empty && g.ParentGroupID == ParentGroupID)
                                    )
                                  orderby g.Position descending
                                  select g).Take(1).FirstOrDefault();

                    //if there are no groups for this survey, return 1 to indicate that this is the first group
                    if (groups == null)
                    {
                        Helper.LogMessage("POSITION 1");
                        return "1";
                    }

                    //if there were groups found, return the last position + 1
                    var nextPosition = groups.Position + 1;

                    Helper.LogMessage("POSITION " + nextPosition);

                    return nextPosition.ToString();
                }
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        //create a new group
        public string CreateQuestionGroup(string secretKey, string groupType, string groupName, string surveyID, string parentGroupID, string companyToAddTo, string affectedUserID, string groupHeading)   //, string companyToAddTo
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                groupType = TrimIfNotNull(groupType);
                surveyID = TrimIfNotNull(surveyID);
                parentGroupID = TrimIfNotNull(parentGroupID);
                groupName = TrimIfNotNull(groupName);
                companyToAddTo = TrimIfNotNull(companyToAddTo);
                affectedUserID = TrimIfNotNull(affectedUserID);
                groupHeading = TrimIfNotNull(groupHeading);

                var username = CheckUserHasRight(secretKey, "CreateQuestionGroup");
                if (Utils.IsError(username))
                {
                    return username;
                }

                //check if the user is an administrator
                /* var IsAdmin = CheckUserHasAdminRole(secretKey);

                 //if the user is not an admin 
                 if (Utils.IsError(IsAdmin))
                 {
                     var userCompany = CheckUserCompany(secretKey, companyID);
                     if (Utils.IsError(userCompany))
                     {
                         return userCompany;
                     }
                 }*/

                if (string.IsNullOrWhiteSpace(groupType))
                {
                    return Utils.WrapError("Please ensure that you enter a group type");
                }

                //check if the group type is valid 
                if (!GroupTypes.Contains(groupType))
                {
                    return Utils.WrapError("Group Type is invalid");
                }

                if (string.IsNullOrWhiteSpace(groupName))
                {
                    return Utils.WrapError("Please ensure that you enter a group name");
                }

                Guid SurveyID;
                if (!Guid.TryParse(surveyID, out SurveyID))
                {
                    return Utils.WrapError("Survey ID is not in the correct format");
                }
                Guid ParentGroupID = Guid.Empty;
                if (!string.IsNullOrWhiteSpace(parentGroupID))
                {
                    if (!Guid.TryParse(parentGroupID, out ParentGroupID))
                    {
                        return Utils.WrapError("Parent Group ID is not in the correct format");
                    }
                }

                //convert the company id received
                /*Guid CompanyID;
                if (!Guid.TryParse(companyID, out CompanyID))
                {
                    return Utils.WrapError("Company ID is not in the correct format");
                }*/

                //check the survey's status
                var surveyStatus = CheckSurveyStatus(surveyID + "", "true", "true", "true");
                if (Utils.IsError(surveyStatus))
                {
                    return surveyStatus;
                }

                Guid CompanyID = Guid.Empty;

                if (!string.IsNullOrWhiteSpace(companyToAddTo) && Guid.TryParse(companyToAddTo, out CompanyID))
                {
                    // Use the provided company (Company admin activated the first package)
                }
                else
                {
                    #region Check if the logged in user is assuming a company

                    //check if the user is assuming a company
                    var assumeResult = CheckAssumeCompany(secretKey);
                    if (Utils.IsError(assumeResult))
                    {
                        return assumeResult;
                    }

                    if (!Guid.TryParse(assumeResult, out CompanyID))
                    {
                        return Utils.WrapError("The ID of the Company that you are trying to view is in the incorrect format");
                    }

                    #endregion
                }

                Guid LoggedInUserID;

                if (!string.IsNullOrWhiteSpace(companyToAddTo) && Guid.TryParse(companyToAddTo, out CompanyID) && !string.IsNullOrWhiteSpace(affectedUserID) && Guid.TryParse(affectedUserID, out LoggedInUserID))
                {
                    // Use the provided company (Company admin activated the first package)
                }
                else
                {
                    LoggedInUserID = (Guid)Membership.GetUser(username).ProviderUserKey;
                }

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {

                    var survey = (from s in entity.Surveys
                                  join p in entity.Projects
                                  on s.ProjectID equals p.ID
                                  where s.ID == SurveyID && p.ProjectCompany == CompanyID
                                  select new
                                  {
                                      s.ID,
                                      s.ProjectID,
                                      CompanyID = p.ProjectCompany

                                  }).FirstOrDefault();

                    if (survey == null)
                    {
                        return Utils.WrapError("The survey details could not be found");
                    }

                    //check the project's status
                    var projectStatus = CheckProjectStatus(survey.ProjectID + "", "true", null, "true");
                    if (Utils.IsError(projectStatus))
                    {
                        return projectStatus;
                    }


                    //if there is a parent group type, validate it 
                    if (ParentGroupID != Guid.Empty)
                    {
                        //get the parent group
                        var parentGroup = (from g in entity.QuestionGroups
                                           where g.ID == ParentGroupID
                                           select g).FirstOrDefault();

                        if (parentGroup == null)
                        {
                            return Utils.WrapError("Parent Group not found");
                        }

                        //get the type of the group
                        string parentGroupType = parentGroup.GroupType;

                        //if the parent is a page, then allow children of type "Table" or "Normal"
                        if (parentGroupType.Equals("Page"))
                        {
                            //if the child is a Page
                            if (groupType.Equals("Page"))
                            {
                                return Utils.WrapError("A Page can only contain Table or Question");
                            }
                        }
                        //if the parent is a table, only allow questions
                        else if (parentGroupType.Equals("Table"))
                        {
                            //if the child is either a Page, Table or Normal
                            if (GroupTypes.Contains(groupType))
                            {
                                return Utils.WrapError("Tables can only contain questions");
                            }
                        }
                        //if the parent is a normal, only allow questions
                        else if (parentGroupType.Equals("Normal"))
                        {
                            //if the child is either a Page, Table or Normal
                            if (GroupTypes.Contains(groupType))
                            {
                                return Utils.WrapError("You can only create a question, you cannot create a Page or Table");
                            }
                        }
                    }

                    //get the next group position for the survey
                    string nextPosition = GetNextGroupPosition(surveyID, ParentGroupID + "");
                    if (Utils.IsError(nextPosition))
                    {
                        return nextPosition;
                    }
                    long NextPosition = 0;
                    if (!long.TryParse(nextPosition, out NextPosition))
                    {
                        return Utils.WrapError("Next group position could not be determined");
                    }

                    //create a new question group
                    var newGroup = new QuestionGroup();
                    Guid NewGroupID = Guid.NewGuid();
                    newGroup.ID = NewGroupID;
                    newGroup.GroupType = groupType;
                    newGroup.CreatedBy = LoggedInUserID;
                    newGroup.DateCreated = DateTime.Now;
                    newGroup.Position = NextPosition;
                    newGroup.SurveyID = SurveyID;
                    newGroup.GroupName = groupName;
                    newGroup.GroupHeading = groupHeading;

                    if (ParentGroupID != Guid.Empty)
                    {
                        newGroup.ParentGroupID = ParentGroupID;
                    }

                    entity.QuestionGroups.Add(newGroup);
                    entity.SaveChanges();

                    //activity stream
                    AddActivity(secretKey, CompanyID + "", "", null, survey.ProjectID + "", SurveyID + "", "added a new " + groupType.ToLower() + " to", ActivityType.Survey, LoggedInUserID + "");

                    dynamic returnItem = new JObject();
                    returnItem.ID = NewGroupID;
                    returnItem.Status = "Success";
                    return returnItem.ToString();
                }
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        //remove a question group only
        public string RemoveQuestionGroup(string secretKey, string groupID)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                groupID = TrimIfNotNull(groupID);

                var username = CheckUserHasRight(secretKey, "RemoveQuestionGroup");
                if (Utils.IsError(username))
                {
                    return username;
                }
                //check if the user is an administrator
                /*var IsAdmin = CheckUserHasAdminRole(secretKey);

                //if the user is not an admin 
                if (Utils.IsError(IsAdmin))
                {
                    var userCompany = CheckUserCompany(secretKey, companyID);
                    if (Utils.IsError(userCompany))
                    {
                        return userCompany;
                    }
                }*/

                Guid GroupID;
                if (!Guid.TryParse(groupID, out GroupID))
                {
                    return Utils.WrapError("Group ID is not in the correct format");
                }

                //convert the company id received
                /*Guid CompanyID;
                if (!Guid.TryParse(companyID, out CompanyID))
                {
                    return Utils.WrapError("Company ID is not in the correct format");
                }*/

                #region Check if the logged in user is assuming a company

                //check if the user is assuming a company
                var assumeResult = CheckAssumeCompany(secretKey);
                if (Utils.IsError(assumeResult))
                {
                    return assumeResult;
                }

                //parse the company ID to a Guid
                Guid CompanyID = Guid.Empty;
                if (!Guid.TryParse(assumeResult, out CompanyID))
                {
                    return Utils.WrapError("The ID of the Company that you are trying to view is in the incorrect format");
                }

                #endregion

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {

                    var curGroup = (from g in entity.QuestionGroups
                                    join s in entity.Surveys
                                    on g.SurveyID equals s.ID
                                    join p in entity.Projects
                                    on s.ProjectID equals p.ID
                                    where g.ID == GroupID && p.ProjectCompany == CompanyID
                                    select g).FirstOrDefault();

                    if (curGroup == null)
                    {
                        return Utils.WrapError("The group details could not be found");
                    }


                    //check the survey's status
                    var surveyStatus = CheckSurveyStatus(curGroup.SurveyID + "", "true", "true", "true");
                    if (Utils.IsError(surveyStatus))
                    {
                        return surveyStatus;
                    }

                    var survey = (from s in entity.Surveys
                                  join qg in entity.QuestionGroups
                                      on s.ID equals qg.SurveyID
                                  where qg.ID == GroupID
                                  select s).FirstOrDefault();

                    if (survey == null)
                    {
                        return Utils.WrapError("The survey this question belongs to could not be found");
                    }

                    //check the project's status
                    var projectStatus = CheckProjectStatus(survey.ProjectID + "", "true", null, "true");
                    if (Utils.IsError(projectStatus))
                    {
                        return projectStatus;
                    }

                    /*var survey = (from s in entity.Surveys
                                  join p in entity.Projects
                                  on s.ProjectID equals p.ID
                                  join q in entity.QuestionGroups
                                  on s.ID equals q.SurveyID
                                  where q.ID == GroupID
                                  select new
                                  {
                                      s.ID,
                                      s.ProjectID,
                                      CompanyID = p.ProjectCompany

                                  }).FirstOrDefault();

                    if (survey == null)
                    {
                        return Utils.WrapError("The group details could not be found");
                    }

                    if (survey.CompanyID != CompanyID)
                    {
                        return Utils.WrapError("You do not have access to this company");
                    }*/

                    //check if the group has questions assigned to it
                    var curGroupQuestions = (from q in entity.Questions
                                             where q.GroupID == GroupID
                                             select q).ToList();

                    /*if (groupQuestions == null || groupQuestions.Count <= 0)
                    {
                        return "[]";
                    }*/

                    if (curGroupQuestions != null || curGroupQuestions.Count >= 0)
                    {
                        return Utils.WrapError("This group cannot be removed because there are questions assigned to it");
                    }

                    //get the group's order number
                    var curGroupPosition = curGroup.Position;
                    var curGroupParentID = curGroup.ParentGroupID;

                    //remove the group
                    entity.QuestionGroups.Remove(curGroup);
                    entity.Entry(curGroup).State = EntityState.Deleted;

                    //get all the groups that have a position higher than the group that was removed
                    var remainingGroups = (from g in entity.QuestionGroups
                                           where g.Position > curGroupPosition && g.SurveyID == survey.ID && g.ParentGroupID == curGroupParentID
                                           select g).ToList();

                    //change the position of each of the groups that had a position higher than the group that was removed
                    foreach (var group in remainingGroups)
                    {
                        group.Position = --group.Position;
                        entity.Entry(group).State = EntityState.Modified;
                    }

                    entity.Entry(remainingGroups).State = EntityState.Modified;
                    entity.SaveChanges();



                    //activity stream
                    AddActivity(secretKey, CompanyID + "", null, null, survey.ProjectID + "", survey.ID + "", "removed a question group from", ActivityType.Survey);

                }
                dynamic returnItem = new JObject();
                returnItem.Status = "Success";
                return returnItem.ToString();
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        //remove a question group and its questions
        public string RemoveQuestionGroupAndQuestions(string secretKey, string groupID)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                groupID = TrimIfNotNull(groupID);

                var username = CheckUserHasRight(secretKey, "RemoveQuestionGroupAndQuestions");
                if (Utils.IsError(username))
                {
                    return username;
                }
                //check if the user is an administrator
                /*var IsAdmin = CheckUserHasAdminRole(secretKey);

                //if the user is not an admin 
                if (Utils.IsError(IsAdmin))
                {
                    var userCompany = CheckUserCompany(secretKey, companyID);
                    if (Utils.IsError(userCompany))
                    {
                        return userCompany;
                    }
                }*/

                Guid GroupID;
                if (!Guid.TryParse(groupID, out GroupID))
                {
                    return Utils.WrapError("Group ID is not in the correct format");
                }

                //convert the company id received
                /*Guid CompanyID;
                if (!Guid.TryParse(companyID, out CompanyID))
                {
                    return Utils.WrapError("Company ID is not in the correct format");
                }*/

                #region Check if the logged in user is assuming a company

                //check if the user is assuming a company
                var assumeResult = CheckAssumeCompany(secretKey);
                if (Utils.IsError(assumeResult))
                {
                    return assumeResult;
                }

                //parse the company ID to a Guid
                Guid CompanyID = Guid.Empty;
                if (!Guid.TryParse(assumeResult, out CompanyID))
                {
                    return Utils.WrapError("The ID of the Company that you are trying to view is in the incorrect format");
                }

                #endregion

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {

                    var curGroup = (from g in entity.QuestionGroups
                                    join s in entity.Surveys
                                    on g.SurveyID equals s.ID
                                    join p in entity.Projects
                                    on s.ProjectID equals p.ID
                                    where g.ID == GroupID && p.ProjectCompany == CompanyID
                                    select g).FirstOrDefault();

                    if (curGroup == null)
                    {
                        return Utils.WrapError("The group details could not be found");
                    }


                    //check the survey's status
                    var surveyStatus = CheckSurveyStatus(curGroup.SurveyID + "", "true", "true", "true");
                    if (Utils.IsError(surveyStatus))
                    {
                        return surveyStatus;
                    }
                    var survey = (from s in entity.Surveys
                                  join qg in entity.QuestionGroups
                                      on s.ID equals qg.SurveyID
                                  where qg.ID == GroupID
                                  select s).FirstOrDefault();

                    if (survey == null)
                    {
                        return Utils.WrapError("The survey this question group belongs to cannot be found");
                    }

                    //check the project's status
                    var projectStatus = CheckProjectStatus(survey.ProjectID + "", "true", null, "true");
                    if (Utils.IsError(projectStatus))
                    {
                        return projectStatus;
                    }



                    /* var survey = (from s in entity.Surveys
                                   join p in entity.Projects
                                   on s.ProjectID equals p.ID
                                   join q in entity.QuestionGroups
                                   on s.ID equals q.SurveyID
                                   where q.ID == GroupID
                                   select new
                                   {
                                       s.ID,
                                       s.ProjectID,
                                       CompanyID = p.ProjectCompany

                                   }).FirstOrDefault();

                     if (survey == null)
                     {
                         return Utils.WrapError("The group details could not be found");
                     }*/

                    //check if the group has any sub groups assigned to if
                    var subGroups = (from q in entity.QuestionGroups
                                     where q.ParentGroupID == GroupID
                                     select q).ToList();

                    //if there are sub groups then remove them
                    if (subGroups != null && subGroups.Count > 0)
                    {
                        foreach (var g in subGroups)
                        {
                            entity.QuestionGroups.Remove(g);
                            entity.Entry(g).State = EntityState.Deleted;
                        }
                    }

                    //check if the group has questions assigned to it
                    var groupQuestions = (from q in entity.Questions
                                          where q.GroupID == GroupID
                                          select q).ToList();

                    //if there are questions assigned
                    if (groupQuestions != null || groupQuestions.Count >= 0)
                    {
                        //cycle through them and remove them
                        foreach (var question in groupQuestions)
                        {
                            entity.Questions.Remove(question);
                            entity.Entry(question).State = EntityState.Deleted;
                        }
                    }
                    //entity.Entry(groupQuestions).State = EntityState.Deleted;

                    //get the group's order number
                    var curGroupPosition = curGroup.Position;
                    var curGroupParentID = curGroup.ParentGroupID;

                    //remove the group
                    entity.QuestionGroups.Remove(curGroup);
                    entity.Entry(curGroup).State = EntityState.Deleted;

                    //get all the groups that have a position higher than the group that was removed
                    var remainingGroups = (from g in entity.QuestionGroups
                                           where g.Position > curGroupPosition && g.SurveyID == survey.ID && g.ParentGroupID == curGroupParentID
                                           select g).ToList();

                    //change the position of each of the groups that had a position higher than the group that was removed
                    foreach (var group in remainingGroups)
                    {
                        group.Position = --group.Position;
                        entity.Entry(group).State = EntityState.Modified;
                    }

                    //entity.Entry(remainingGroups).State = EntityState.Modified;
                    entity.SaveChanges();


                    //activity stream
                    AddActivity(secretKey, CompanyID + "", null, null, survey.ProjectID + "", survey.ID + "", "removed a question group and its associated questions from", ActivityType.Survey);


                }
                dynamic returnItem = new JObject();
                returnItem.Status = "Success";
                return returnItem.ToString();
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        //update the details of an existing group
        public string UpdateQuestionGroup(string secretKey, string groupID, string groupName, string groupHeading)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                groupID = TrimIfNotNull(groupID);
                groupName = TrimIfNotNull(groupName);
                groupHeading = TrimIfNotNull(groupHeading);

                var username = CheckUserHasRight(secretKey, "UpdateQuestionGroup");
                if (Utils.IsError(username))
                {
                    return username;
                }

                //check if the user is an administrator
                /*var IsAdmin = CheckUserHasAdminRole(secretKey);

                //if the user is not an admin 
                if (Utils.IsError(IsAdmin))
                {
                    var userCompany = CheckUserCompany(secretKey, companyID);
                    if (Utils.IsError(userCompany))
                    {
                        return userCompany;
                    }
                }*/

                if (string.IsNullOrWhiteSpace(groupName))
                {
                    return Utils.WrapError("Please ensure that you enter a group name");
                }

                Guid GroupID = Guid.Empty;
                if (!Guid.TryParse(groupID, out GroupID))
                {
                    return Utils.WrapError("Group ID is not in the correct format");
                }

                #region Check if the logged in user is assuming a company

                //check if the user is assuming a company
                var assumeResult = CheckAssumeCompany(secretKey);
                if (Utils.IsError(assumeResult))
                {
                    return assumeResult;
                }

                //parse the company ID to a Guid
                Guid CompanyID = Guid.Empty;
                if (!Guid.TryParse(assumeResult, out CompanyID))
                {
                    return Utils.WrapError("The ID of the Company that you are trying to view is in the incorrect format");
                }

                #endregion

                Guid LoggedInUserID = (Guid)Membership.GetUser(username).ProviderUserKey;

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {

                    var group = (from g in entity.QuestionGroups
                                 join s in entity.Surveys
                                 on g.SurveyID equals s.ID
                                 join p in entity.Projects
                                 on s.ProjectID equals p.ID
                                 where g.ID == GroupID && p.ProjectCompany == CompanyID
                                 select g).FirstOrDefault();

                    if (group == null)
                    {
                        return Utils.WrapError("The question group you are trying to update could not be found");
                    }

                    //check the survey's status
                    var surveyStatus = CheckSurveyStatus(group.SurveyID + "", "true", "true", "true");
                    if (Utils.IsError(surveyStatus))
                    {
                        return surveyStatus;
                    }
                    var survey = (from s in entity.Surveys
                                  join qg in entity.QuestionGroups
                                      on s.ID equals qg.SurveyID
                                  where qg.ID == GroupID
                                  select s).FirstOrDefault();

                    if (survey == null)
                    {
                        return Utils.WrapError("The survey this question group belongs to could not be found");
                    }

                    //check the project's status
                    var projectStatus = CheckProjectStatus(survey.ProjectID + "", "true", null, "true");
                    if (Utils.IsError(projectStatus))
                    {
                        return projectStatus;
                    }

                    group.GroupHeading = groupHeading;
                    group.GroupName = groupName;
                    group.UpdatedBy = LoggedInUserID;
                    group.DateUpdated = DateTime.Now;

                    entity.Entry(group).State = EntityState.Modified;
                    entity.SaveChanges();


                    //activity stream
                    AddActivity(secretKey, CompanyID + "", null, null, survey.ProjectID + "", survey.ID + "", "updated the details of a question group for", ActivityType.Survey);

                }

                dynamic returnItem = new JObject();
                returnItem.Status = "Success";
                return returnItem.ToString();
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        //get all the groups and questions that are assigned to the survey
        public string GetGroupsAndQuestionsForSurvey(string secretKey, string surveyID)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                surveyID = TrimIfNotNull(surveyID);

                var username = CheckUserHasRight(secretKey, "GetGroupsAndQuestionsForSurvey");
                if (Utils.IsError(username))
                {
                    return username;
                }
                //check if the user is an administrator
                /*var IsAdmin = CheckUserHasAdminRole(secretKey);

                //if the user is not an admin 
                if (Utils.IsError(IsAdmin))
                {
                    var userCompany = CheckUserCompany(secretKey, companyID);
                    if (Utils.IsError(userCompany))
                    {
                        return userCompany;
                    }
                }*/
                Guid SurveyID;
                if (!Guid.TryParse(surveyID, out SurveyID))
                {
                    return Utils.WrapError("Survey ID is not in the correct format");
                }

                //convert the company id received
                /*Guid CompanyID;
                if (!Guid.TryParse(companyID, out CompanyID))
                {
                    return Utils.WrapError("Company ID is not in the correct format");
                }*/

                #region Check if the logged in user is assuming a company

                //check if the user is assuming a company
                var assumeResult = CheckAssumeCompany(secretKey);
                if (Utils.IsError(assumeResult))
                {
                    return assumeResult;
                }

                //parse the company ID to a Guid
                Guid CompanyID = Guid.Empty;
                if (!Guid.TryParse(assumeResult, out CompanyID))
                {
                    return Utils.WrapError("The ID of the Company that you are trying to view is in the incorrect format");
                }

                #endregion

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    var survey = (from s in entity.Surveys
                                  join p in entity.Projects
                                  on s.ProjectID equals p.ID
                                  where s.ID == SurveyID && p.ProjectCompany == CompanyID
                                  select new
                                  {
                                      s.ID,
                                      s.ProjectID,
                                      CompanyID = p.ProjectCompany

                                  }).FirstOrDefault();

                    if (survey == null)
                    {
                        return Utils.WrapError("The survey details could not be found");
                    }

                    var questionGroups = (
                                        //get the groups that gave no parent groups
                                        from pg in entity.QuestionGroups
                                        orderby pg.Position ascending
                                        where pg.SurveyID == SurveyID && pg.ParentGroupID == null
                                        select new
                                        {
                                            GroupID = pg.ID,
                                            pg.GroupType,
                                            pg.GroupName,
                                            pg.GroupHeading,
                                            GroupPosition = pg.Position,
                                            pg.SurveyID,
                                            pg.ParentGroupID,
                                            //get the questions for the group
                                            Questions = (
                                               from q in entity.Questions
                                               where q.GroupID == pg.ID
                                               orderby q.Position ascending
                                               select new
                                               {
                                                   QuestionID = q.ID,
                                                   q.QuestionText,
                                                   q.QuestionType,
                                                   QuestionPosition = q.Position
                                               }).ToList(),
                                            Rows = (
                                                from r in entity.QuestionRows
                                                where r.GroupID == pg.ID
                                                orderby r.Position ascending
                                                select new
                                                {
                                                    RowID = r.ID,
                                                    RowName = r.RowText,
                                                    RowPosition = r.Position
                                                }
                                            ).ToList(),
                                            Piping = (
                                                from p in entity.QuestionPipings
                                                where p.GroupID == pg.ID
                                                select new
                                                {
                                                    p.ID,
                                                    pipingConditions = p.PipingConditions,
                                                    p.Show
                                                }).FirstOrDefault(),
                                            //get the subgroups for this group
                                            Subgroups = (
                                              from sg in entity.QuestionGroups
                                              orderby sg.Position ascending
                                              where sg.ParentGroupID == pg.ID
                                              select new
                                              {
                                                  GroupID = sg.ID,
                                                  sg.GroupType,
                                                  sg.GroupName,
                                                  sg.GroupHeading,
                                                  sg.Position,
                                                  sg.SurveyID,
                                                  sg.ParentGroupID,
                                                  //get the questions for the subgroup
                                                  Questions = (
                                                     from q in entity.Questions
                                                     orderby q.Position ascending
                                                     where q.GroupID == sg.ID
                                                     select new
                                                     {
                                                         QuestionID = q.ID,
                                                         q.QuestionText,
                                                         q.QuestionType,
                                                         QuestionPosition = q.Position
                                                     }
                                                  ).ToList(),
                                                  Rows = (
                                                    from r in entity.QuestionRows
                                                    where r.GroupID == sg.ID
                                                    orderby r.Position ascending
                                                    select new
                                                    {
                                                        RowID = r.ID,
                                                        RowName = r.RowText,
                                                        RowPosition = r.Position
                                                    }
                                                ).ToList(),
                                                  Piping = (
                                                    from p in entity.QuestionPipings
                                                    where p.GroupID == sg.ID
                                                    select new
                                                    {
                                                        p.ID,
                                                        pipingConditions = p.PipingConditions,
                                                        p.Show
                                                    }).FirstOrDefault()
                                              }
                                            ).ToList()
                                        }).ToList();

                    if (questionGroups == null || questionGroups.Count <= 0)
                    {
                        return "[]";
                    }
                    return Helper.SerializeToJavascriptOject(questionGroups);
                }

            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        //groupIDToMove - the ID of the group that is being moved
        //groupIDBelow - the ID of the group that is below the group that is being moved (null if the new group is moved right to the bottom)
        public string MoveQuestionGroup(string secretKey, string surveyID, string groupIDToMove, string groupIDBelow)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                groupIDToMove = TrimIfNotNull(groupIDToMove);
                groupIDBelow = TrimIfNotNull(groupIDBelow);
                surveyID = TrimIfNotNull(surveyID);

                var username = CheckUserHasRight(secretKey, "MoveQuestionGroup");
                if (Utils.IsError(username))
                {
                    return username;
                }

                //check if the user is an administrator
                /*var IsAdmin = CheckUserHasAdminRole(secretKey);

                //if the user is not an admin 
                if (Utils.IsError(IsAdmin))
                {
                    var userCompany = CheckUserCompany(secretKey, companyID);
                    if (Utils.IsError(userCompany))
                    {
                        return userCompany;
                    }
                }*/

                Guid GroupIDToMove;
                if (!Guid.TryParse(groupIDToMove, out GroupIDToMove))
                {
                    return Utils.WrapError("Group ID to move is not in the correct format");
                }

                Guid GroupIDBelow = Guid.Empty;
                if (!string.IsNullOrWhiteSpace(groupIDBelow))
                {
                    if (!Guid.TryParse(groupIDBelow, out GroupIDBelow))
                    {
                        return Utils.WrapError("Group ID is not in the correct format");
                    }
                }

                Guid SurveyID;
                if (!Guid.TryParse(surveyID, out SurveyID))
                {
                    return Utils.WrapError("Survey ID is not in the correct format");
                }

                //check the survey's status
                var surveyStatus = CheckSurveyStatus(surveyID + "", "true", "true", "true");
                if (Utils.IsError(surveyStatus))
                {
                    return surveyStatus;
                }

                #region Check if the logged in user is assuming a company

                //check if the user is assuming a company
                var assumeResult = CheckAssumeCompany(secretKey);
                if (Utils.IsError(assumeResult))
                {
                    return assumeResult;
                }

                //parse the company ID to a Guid
                Guid CompanyID = Guid.Empty;
                if (!Guid.TryParse(assumeResult, out CompanyID))
                {
                    return Utils.WrapError("The ID of the Company that you are trying to view is in the incorrect format");
                }

                #endregion

                //get the ID for the logged in user
                Guid LoggedInUserID = (Guid)Membership.GetUser(username).ProviderUserKey;

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    //check if the survey exists
                    var survey = (from s in entity.Surveys
                                  join p in entity.Projects
                                  on s.ProjectID equals p.ID
                                  where s.ID == SurveyID && p.ProjectCompany == CompanyID
                                  select s).FirstOrDefault();

                    if (survey == null)
                    {
                        return Utils.WrapError("Survey not found");
                    }

                    //check the project's status
                    var projectStatus = CheckProjectStatus(survey.ProjectID + "", "true", null, "true");
                    if (Utils.IsError(projectStatus))
                    {
                        return projectStatus;
                    }

                    //check the group that is being moved
                    var movingGroup = (from g in entity.QuestionGroups
                                       where g.ID == GroupIDToMove && g.SurveyID == SurveyID
                                       select g).FirstOrDefault();

                    if (movingGroup == null)
                    {
                        return Utils.WrapError("Group to move could not be found");
                    }

                    //get the old position of the group being moved
                    long oldPosition = movingGroup.Position;

                    //the new position to move the group to
                    long newPosition = 0;

                    #region if moving between a range i.e. the guid below id != null

                    //if moving between a range i.e. the guid below id != null
                    if (GroupIDBelow != Guid.Empty)
                    {
                        //check the group below the new position
                        var belowGroup = (from g in entity.QuestionGroups
                                          where g.ID == GroupIDBelow && g.SurveyID == SurveyID
                                          select g).FirstOrDefault();

                        if (belowGroup == null)
                        {
                            return Utils.WrapError("Group could not be found");
                        }

                        if (belowGroup.ParentGroupID != movingGroup.ParentGroupID)
                        {
                            return Utils.WrapError("You cannot move a group to a different page");
                        }

                        //get the new position of the question
                        long belowPosition = belowGroup.Position;

                        //if the group below is the first group in the list
                        if (belowPosition == 1)
                        {
                            //set the new group to the first group in the list
                            newPosition = 1;
                        }
                        else
                        {
                            //set the new group to the position that the old group was in
                            newPosition = belowPosition;
                        }

                        #region the group was moved upwards

                        //the group was moved upwards
                        if (oldPosition > newPosition)
                        {
                            //get the groups that are affected by the move
                            var affectedGroups = (from g in entity.QuestionGroups
                                                  where g.Position >= belowPosition && g.Position < oldPosition && g.SurveyID == SurveyID && g.ParentGroupID == movingGroup.ParentGroupID
                                                  select g).ToList();

                            //if there are groups
                            if (affectedGroups != null)
                            {
                                //go through each group and change its position
                                foreach (var group in affectedGroups)
                                {
                                    group.Position = group.Position + 1;
                                    entity.Entry(group).State = EntityState.Modified;
                                }
                            }

                        }

                        #endregion

                        #region the group was moved downwards

                        //the group was moved downwards
                        else if (oldPosition < newPosition)
                        {
                            //move it to the position above the below group
                            newPosition = newPosition - 1;

                            //get the groups that are affected by the move
                            var affectedGroups = (from g in entity.QuestionGroups
                                                  where g.Position > oldPosition && g.Position < belowPosition && g.SurveyID == SurveyID && g.ParentGroupID == movingGroup.ParentGroupID
                                                  select g).ToList();

                            //if there are groups
                            if (affectedGroups != null)
                            {
                                //go through each group and change its position
                                foreach (var group in affectedGroups)
                                {
                                    group.Position = group.Position - 1;
                                    entity.Entry(group).State = EntityState.Modified;
                                }
                            }

                        }

                        #endregion

                        #region the group wasn't moved

                        //the group wasn't moved
                        else
                        {
                            //do nothing
                        }

                        #endregion
                    }

                    #endregion

                    #region if moving right to the bottom

                    //if moving right to the bottom
                    else
                    {
                        //get the last group position for the survey
                        var lastGroup = (from g in entity.QuestionGroups
                                         orderby g.Position descending
                                         where g.SurveyID == SurveyID && g.ParentGroupID == movingGroup.ParentGroupID
                                         select g).Take(1).FirstOrDefault();

                        if (lastGroup == null)
                        {
                            return Utils.WrapError("Last group could not be found");
                        }

                        newPosition = lastGroup.Position;

                        //get the groups that are affected by the move
                        var affectedGroups = (from g in entity.QuestionGroups
                                              where g.Position > oldPosition && g.SurveyID == SurveyID && g.ParentGroupID == movingGroup.ParentGroupID
                                              select g).ToList();

                        //if there are groups
                        if (affectedGroups != null)
                        {
                            //go through each group and change its position
                            foreach (var group in affectedGroups)
                            {
                                group.Position = group.Position - 1;
                                entity.Entry(group).State = EntityState.Modified;
                            }
                        }
                    }

                    #endregion

                    //set the new position of group to move
                    movingGroup.Position = newPosition;
                    entity.Entry(movingGroup).State = EntityState.Modified;

                    entity.SaveChanges();

                    //activity stream
                    AddActivity(secretKey, CompanyID + "", null, null, survey.ProjectID + "", survey.ID + "", "changed the order of a question group in", ActivityType.Survey);

                    dynamic returnItem = new JObject();
                    returnItem.Status = "Success";
                    return returnItem.ToString();
                }
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        #endregion

        #region Questions

        //generate the regex pattern to save for the question
        private string GenerateRegex(string complexRegexPattern, string equalsValue, string notEqualsValue,
            string startsWithValue, string endsWithValue, string containsValue)
        {

            Helper.LogMessage("GenerateRegex : complexRegexPattern = " + complexRegexPattern + " equalsValue = " + equalsValue
                + " notEqualsValue = " + notEqualsValue + "  startsWithValue = " + startsWithValue + " endsWithValue = " + endsWithValue
                + " containsValue = " + containsValue);

            //if there is already a complex regex pattern (the user has entered their own custom regex pattern)
            if (!string.IsNullOrWhiteSpace(complexRegexPattern))
            {
                return complexRegexPattern;
            }

            //if there is a value to check "equals" against
            if (!string.IsNullOrWhiteSpace(equalsValue))
            {
                return "(" + equalsValue + ")";
            }

            //if there is a value to check "not equals" against
            if (!string.IsNullOrWhiteSpace(notEqualsValue))
            {
                return "(?!(" + notEqualsValue + ")$)\\S+.*";//".*[^(\\s*" + notEqualsValue + "\\s*)].*";
            }

            //if there is a value to check "starts with" and "contains" and "ends with" against
            if (!string.IsNullOrWhiteSpace(startsWithValue) && !string.IsNullOrWhiteSpace(endsWithValue) && !string.IsNullOrWhiteSpace(containsValue))
            {
                return "^(" + startsWithValue + ").*(" + containsValue + ").*(" + endsWithValue + ")$";
            }

            //if there is a value to check "starts with" and  "ends with" against
            if (!string.IsNullOrWhiteSpace(startsWithValue) && !string.IsNullOrWhiteSpace(endsWithValue))
            {
                return "^(" + startsWithValue + ").*(" + endsWithValue + ")$";
            }

            //if there is a value to check "contains" against
            if (!string.IsNullOrWhiteSpace(containsValue))
            {
                return ".*(" + containsValue + ").*";
            }

            //if there is a value to check "starts with" against
            if (!string.IsNullOrWhiteSpace(startsWithValue))
            {
                return "^(" + startsWithValue + ").*";
            }

            //if there is a value to check "ends with" against
            if (!string.IsNullOrWhiteSpace(endsWithValue))
            {
                return ".*(" + endsWithValue + ")$";
            }

            return "";
        }

        public string GetQuestionTypes(string secretKey)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);

                //get the ID for the logged in user
                string loggedInUserID = GetUserID(secretKey);
                if (Utils.IsError(loggedInUserID))
                {
                    return loggedInUserID;
                }
                Guid LoggedInUserID;
                if (!Guid.TryParse(loggedInUserID, out LoggedInUserID))
                {
                    return Utils.WrapError("User ID is not in the correct format");
                }

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    var types = (from t in entity.QuestionTypes
                                 select new
                                 {
                                     t.ID,
                                     t.Type,
                                     t.FriendlyName,
                                     t.Description,
                                     t.HasOptions
                                 }).ToList();

                    if (types == null || types.Count <= 0)
                    {
                        return "[]";
                    }

                    return Helper.SerializeToJavascriptOject(types);


                }
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        public string GetQuestionRegex(string secretKey)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);

                //get the ID for the logged in user
                string loggedInUserID = GetUserID(secretKey);
                if (Utils.IsError(loggedInUserID))
                {
                    return loggedInUserID;
                }
                Guid LoggedInUserID;
                if (!Guid.TryParse(loggedInUserID, out LoggedInUserID))
                {
                    return Utils.WrapError("User ID is not in the correct format");
                }

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    var types = (from r in entity.QuestionRegexes
                                 orderby r.FriendlyName ascending
                                 select new
                                 {
                                     r.ID,
                                     r.Pattern,
                                     r.FriendlyName,
                                     r.Description,
                                     r.QuestionTypeID
                                 }).ToList();

                    if (types == null || types.Count <= 0)
                    {
                        return "[]";
                    }

                    return Helper.SerializeToJavascriptOject(types);
                }
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        //get the next position for the question
        public string GetNextQuestionPosition(string groupID)
        {
            try
            {
                //remove any extra whitespaces
                groupID = TrimIfNotNull(groupID);

                Guid GroupID;
                if (!Guid.TryParse(groupID, out GroupID))
                {
                    return Utils.WrapError("Group ID is not in the correct format");
                }

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    //check that the group exists
                    var curGroup = (from g in entity.QuestionGroups
                                    where g.ID == GroupID
                                    select g).FirstOrDefault();

                    if (curGroup == null)
                    {
                        return Utils.WrapError("Group not found");
                    }

                    //get the highest position for the questions
                    var questions = (from q in entity.Questions
                                     where q.GroupID == GroupID
                                     orderby q.Position descending
                                     select q).Take(1).FirstOrDefault();


                    //if there are no questions for this group, return 1 to indicate that this is the first question
                    if (questions == null)
                    {
                        return "1";
                    }

                    //if there were questions found, return the last order number + 1
                    var nextPosition = questions.Position + 1;

                    return nextPosition.ToString();
                }
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        //create a question
        //questionvalues: JArray(name, value, isDefault)
        public string CreateQuestion(string secretKey, string questionText, string questionTypeID, string questionValues, string groupID,
            //validation
            string regexPattern, string regexError, string minimumValue, string maximumValue,
            string requiredQuestion, string containsValue, string equalsValue, string notEqualsValue,
            string startsWithValue, string endsWithValue, string lengthValue, string calculationValue, string hasSum)
        {
            try
            {
                Helper.LogMessage("CreateQuestion : complexRegexPattern = " + regexPattern + " equalsValue = " + equalsValue
               + " notEqualsValue = " + notEqualsValue + "  startsWithValue = " + startsWithValue + " endsWithValue = " + endsWithValue
               + " containsValue = " + containsValue);

                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                questionText = TrimIfNotNull(questionText);
                questionTypeID = TrimIfNotNull(questionTypeID);
                questionValues = TrimIfNotNull(questionValues);
                groupID = TrimIfNotNull(groupID);

                regexPattern = TrimIfNotNull(regexPattern);
                regexError = TrimIfNotNull(regexError);
                minimumValue = TrimIfNotNull(minimumValue);
                maximumValue = TrimIfNotNull(maximumValue);
                requiredQuestion = TrimIfNotNull(requiredQuestion);
                containsValue = TrimIfNotNull(containsValue);
                equalsValue = TrimIfNotNull(equalsValue);
                notEqualsValue = TrimIfNotNull(notEqualsValue);
                startsWithValue = TrimIfNotNull(startsWithValue);
                endsWithValue = TrimIfNotNull(endsWithValue);
                lengthValue = TrimIfNotNull(lengthValue);
                calculationValue = TrimIfNotNull(calculationValue);
                hasSum = TrimIfNotNull(hasSum);

                var username = CheckUserHasRight(secretKey, "CreateQuestion");
                if (Utils.IsError(username))
                {
                    return username;
                }
                //check if the user is an administrator
                /*var IsAdmin = CheckUserHasAdminRole(secretKey);

                //if the user is not an admin 
                if (Utils.IsError(IsAdmin))
                {
                    var userCompany = CheckUserCompany(secretKey, companyID);
                    if (Utils.IsError(userCompany))
                    {
                        return userCompany;
                    }
                }

                //convert the company id received
                Guid CompanyID;
                if (!Guid.TryParse(companyID, out CompanyID))
                {
                    return Utils.WrapError("Company ID is not in the correct format");
                }*/

                Guid GroupID;
                if (!Guid.TryParse(groupID, out GroupID))
                {
                    return Utils.WrapError("Group ID is not in the correct format");
                }

                Guid QuestionTypeID;
                if (!Guid.TryParse(questionTypeID, out QuestionTypeID))
                {
                    return Utils.WrapError("Question Type ID is not in the correct format");
                }

                if (string.IsNullOrWhiteSpace(questionText))
                {
                    return Utils.WrapError("Please ensure that you enter the question text");
                }

                Boolean RequiredQuestion;
                if (!Boolean.TryParse(requiredQuestion, out RequiredQuestion))
                {
                    return Utils.WrapError("Required Question is not in the correct format");
                }

                Boolean HasSum;
                if (!Boolean.TryParse(hasSum, out HasSum))
                {
                    return Utils.WrapError("Has Sum is not in the correct format");
                }

                //if the question type is a calculation, ensure that there is a value entered for the calculationvalue
                if (QuestionTypeID == CalculationType)
                {
                    if (string.IsNullOrWhiteSpace(calculationValue))
                    {
                        return Utils.WrapError("Please ensure that you enter a calculation");
                    }
                    if (string.IsNullOrWhiteSpace(questionText))
                    {
                        return Utils.WrapError("Please ensure that you enter a heading / name for your calculation");
                    }
                }

                int LengthValue = -1;
                if (!string.IsNullOrWhiteSpace(lengthValue))
                {
                    if (!Int32.TryParse(lengthValue, out LengthValue))
                    {
                        return Utils.WrapError("Length value is not in the correct format");
                    }
                }

                //parse all values to a json array
                JArray valuesList = null;
                if (!string.IsNullOrWhiteSpace(questionValues))
                {
                    valuesList = JArray.Parse(questionValues);
                }

                #region Check if the logged in user is assuming a company

                //check if the user is assuming a company
                var assumeResult = CheckAssumeCompany(secretKey);
                if (Utils.IsError(assumeResult))
                {
                    return assumeResult;
                }

                //parse the company ID to a Guid
                Guid CompanyID = Guid.Empty;
                if (!Guid.TryParse(assumeResult, out CompanyID))
                {
                    return Utils.WrapError("The ID of the Company that you are trying to view is in the incorrect format");
                }

                #endregion

                Guid LoggedInUserID = (Guid)Membership.GetUser(username).ProviderUserKey;
                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    var group = (from g in entity.QuestionGroups
                                 join s in entity.Surveys
                                 on g.SurveyID equals s.ID
                                 join p in entity.Projects
                                 on s.ProjectID equals p.ID
                                 where g.ID == GroupID && p.ProjectCompany == CompanyID
                                 select g).FirstOrDefault();

                    if (group == null)
                    {
                        return Utils.WrapError("Group could not be found");
                    }

                    #region Check if the company has space

                    //check if the company is allowed to add more questions
                    var packageResult = CheckCompanyPackageNoQuestions(CompanyID + "", group.SurveyID + "");
                    if (Utils.IsError(packageResult))
                    {
                        return packageResult;
                    }

                    //if the question has summing
                    if (HasSum)
                    {
                        //check if the company is allowed to use summing
                        var packageSummingResult = CheckCompanyPackageSumming(CompanyID + "");
                        if (Utils.IsError(packageSummingResult))
                        {
                            return packageSummingResult;
                        }

                        //ensure that the question is a table type
                        if (group.GroupType != GroupTypeTable)
                        {
                            return Utils.WrapError("Summing can only be used within Tables");
                        }
                    }

                    //check that the question type exists
                    var curQuestionType = (from qt in entity.QuestionTypes
                                           where qt.ID == QuestionTypeID
                                           select qt).FirstOrDefault();

                    if (curQuestionType == null)
                    {
                        return Utils.WrapError("The Question Type you are trying to use cannot be found");
                    }

                    //if the question type is a camera type
                    if (QuestionTypeID == CameraType)
                    {
                        //check if the company is allowed to use the photo/camera feature
                        var result = CheckCompanyPackagePhotoCamera(CompanyID + "");
                        if (Utils.IsError(result))
                        {
                            return result;
                        }
                    }
                    //if the question type is a location type
                    else if (QuestionTypeID == LocationType)
                    {
                        //check if the company is allowed to use the geo services feature
                        var result = CheckCompanyPackageGeoServices(CompanyID + "");
                        if (Utils.IsError(result))
                        {
                            return result;
                        }
                    }
                    //if the question type is a signature type
                    else if (QuestionTypeID == SignatureType)
                    {
                        //check if the company is allowed to use the signature feature
                        var result = CheckCompanyPackageSignatures(CompanyID + "");
                        if (Utils.IsError(result))
                        {
                            return result;
                        }
                    }

                    //check the survey's status
                    var surveyStatus = CheckSurveyStatus(group.SurveyID + "", "true", "true", "true");
                    if (Utils.IsError(surveyStatus))
                    {
                        return surveyStatus;
                    }
                    var survey = (from s in entity.Surveys
                                  join qg in entity.QuestionGroups
                                      on s.ID equals qg.SurveyID
                                  where qg.ID == GroupID
                                  select s).FirstOrDefault();

                    if (survey == null)
                    {
                        return Utils.WrapError("The survey that the question belongs to does not exist");
                    }

                    //check the project's status
                    var projectStatus = CheckProjectStatus(survey.ProjectID + "", "true", null, "true");
                    if (Utils.IsError(projectStatus))
                    {
                        return projectStatus;
                    }

                    #endregion

                    //store the ordernumber
                    /*long OrderNumber = 0;

                    //get the number of questions for the group
                    var curQuestions = (from g in entity.Questions
                                        where g.GroupID == GroupID
                                        select g).Count();

                    //if there are no questions
                    if (curQuestions == null || curQuestions <= 0)
                    {
                        //set the order number to start @ 1
                        OrderNumber = 1;
                    }
                    else
                    {
                        //add 1 to the last order number
                        OrderNumber = ++curQuestions;
                    }*/

                    //get the next questions position for the group
                    string nextPosition = GetNextQuestionPosition(groupID);
                    if (Utils.IsError(nextPosition))
                    {
                        return nextPosition;
                    }
                    long NextPosition = 0;
                    if (!long.TryParse(nextPosition, out NextPosition))
                    {
                        return Utils.WrapError("Next group position could not be determined");
                    }

                    //generate the appropriate regex pattern for the question
                    regexPattern = GenerateRegex(regexPattern, equalsValue, notEqualsValue, startsWithValue, endsWithValue, containsValue);

                    var question = new Question();
                    Guid QuestionID = Guid.NewGuid();
                    question.ID = QuestionID;
                    question.QuestionText = questionText;
                    question.QuestionType = QuestionTypeID;
                    question.Position = NextPosition;
                    question.GroupID = GroupID;
                    question.CreatedBy = LoggedInUserID;
                    question.DateCreated = DateTime.Now;
                    question.RegexPattern = regexPattern;
                    question.RegexPatternError = regexError;
                    question.MinimumValue = minimumValue;
                    question.MaximumValue = maximumValue;
                    question.RequiredQuestion = RequiredQuestion;
                    question.ContainsValue = containsValue;
                    question.EqualsValue = equalsValue;
                    question.NotEqualsValue = notEqualsValue;
                    question.StartsWithValue = startsWithValue;
                    question.EndsWithValue = endsWithValue;
                    question.CalculationValue = calculationValue;
                    question.HasSum = HasSum;

                    if (LengthValue != -1)
                    {
                        question.LengthValue = LengthValue + "";
                    }
                    else
                    {
                        question.LengthValue = null;
                    }

                    entity.Questions.Add(question);

                    //cycle through all the values(JArray: name, value, isDefault)
                    if (valuesList != null && valuesList.Count > 0)
                    {
                        foreach (JObject i in valuesList)
                        {
                            Boolean IsDefault;
                            if (!Boolean.TryParse(i.GetValue("isDefault").ToString(), out IsDefault))
                            {
                                return Utils.WrapError("Is Default is not in the correct format");
                            }

                            long Position = 0;
                            if (!Int64.TryParse(i.GetValue("order").ToString(), out Position))
                            {
                                return Utils.WrapError("Order is not in the correct format");
                            }

                            Boolean IsOther;
                            if (!Boolean.TryParse(i.GetValue("isOther").ToString(), out IsOther))
                            {
                                return Utils.WrapError("Is Other is not in the correct format");
                            }

                            var newQuestionValue = new QuestionValue();
                            newQuestionValue.ID = Guid.NewGuid();
                            newQuestionValue.QuestionID = QuestionID;
                            newQuestionValue.Position = Position;
                            newQuestionValue.Name = i.GetValue("name").ToString();
                            newQuestionValue.Value = i.GetValue("value").ToString();
                            newQuestionValue.IsDefault = IsDefault;
                            newQuestionValue.IsOther = IsOther;

                            entity.QuestionValues.Add(newQuestionValue);
                        }

                    }

                    //if there are values assigned to the question
                    /*if (QuestionValues != null)
                    {
                        //cycle through all the values to add
                        foreach (var value in QuestionValues)
                        {
                            var newQuestionValue = new QuestionValue();
                            newQuestionValue.ID = Guid.NewGuid();
                            newQuestionValue.QuestionID = QuestionID;
                            newQuestionValue.Name = value[0].ToString();
                            newQuestionValue.Value = value[1].ToString();
                            newQuestionValue.IsDefault = Boolean.Parse(value[2].ToString());

                            entity.QuestionValues.Add(newQuestionValue);
                        }

                    }*/
                    entity.SaveChanges();


                    //activity stream
                    AddActivity(secretKey, CompanyID + "", null, null, survey.ProjectID + "", survey.ID + "", "added a new question to", ActivityType.Survey);


                    dynamic returnItem = new JObject();
                    returnItem.Status = "Success";
                    returnItem.QuestionID = QuestionID;
                    returnItem.QuestionPosition = NextPosition;
                    return returnItem.ToString();
                }
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        //remove a question 
        public string RemoveQuestion(string secretKey, string questionID)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                questionID = TrimIfNotNull(questionID);

                var username = CheckUserHasRight(secretKey, "RemoveQuestion");
                if (Utils.IsError(username))
                {
                    return username;
                }
                //check if the user is an administrator
                /*var IsAdmin = CheckUserHasAdminRole(secretKey);

                //if the user is not an admin 
                if (Utils.IsError(IsAdmin))
                {
                    var userCompany = CheckUserCompany(secretKey, companyID);
                    if (Utils.IsError(userCompany))
                    {
                        return userCompany;
                    }
                }*/

                Guid QuestionID;
                if (!Guid.TryParse(questionID, out QuestionID))
                {
                    return Utils.WrapError("Question ID is not in the correct format");
                }

                //convert the company id received
                /*Guid CompanyID;
                if (!Guid.TryParse(companyID, out CompanyID))
                {
                    return Utils.WrapError("Company ID is not in the correct format");
                }*/

                #region Check if the logged in user is assuming a company

                //check if the user is assuming a company
                var assumeResult = CheckAssumeCompany(secretKey);
                if (Utils.IsError(assumeResult))
                {
                    return assumeResult;
                }

                //parse the company ID to a Guid
                Guid CompanyID = Guid.Empty;
                if (!Guid.TryParse(assumeResult, out CompanyID))
                {
                    return Utils.WrapError("The ID of the Company that you are trying to view is in the incorrect format");
                }

                #endregion

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {

                    var question = (from q in entity.Questions
                                    join qg in entity.QuestionGroups
                                    on q.GroupID equals qg.ID
                                    join s in entity.Surveys
                                    on qg.SurveyID equals s.ID
                                    join p in entity.Projects
                                    on s.ProjectID equals p.ID
                                    where q.ID == QuestionID && p.ProjectCompany == CompanyID
                                    select q).FirstOrDefault();

                    //if the question could not be found
                    if (question == null)
                    {
                        return Utils.WrapError("Question could not be found");
                    }

                    var group = (from q in entity.Questions
                                 join qg in entity.QuestionGroups
                                 on q.GroupID equals qg.ID
                                 join s in entity.Surveys
                                 on qg.SurveyID equals s.ID
                                 join p in entity.Projects
                                 on s.ProjectID equals p.ID
                                 where q.ID == QuestionID && p.ProjectCompany == CompanyID
                                 select qg).FirstOrDefault();

                    if (group == null)
                    {
                        return Utils.WrapError("Question is not assigned to a group");
                    }

                    Guid GroupID = group.ID;

                    //check the survey's status
                    var surveyStatus = CheckSurveyStatus(group.SurveyID + "", "true", "true", "true");
                    if (Utils.IsError(surveyStatus))
                    {
                        return surveyStatus;
                    }

                    var survey = (from s in entity.Surveys
                                  join qg in entity.QuestionGroups
                                  on s.ID equals qg.SurveyID
                                  join p in entity.Projects
                                  on s.ProjectID equals p.ID
                                  where qg.ID == GroupID && p.ProjectCompany == CompanyID
                                  select s).FirstOrDefault();

                    if (survey == null)
                    {
                        return Utils.WrapError("The survey that the question belongs to cannot be found");
                    }

                    //check the project's status
                    var projectStatus = CheckProjectStatus(survey.ProjectID + "", "true", null, "true");
                    if (Utils.IsError(projectStatus))
                    {
                        return projectStatus;
                    }

                    //get the questions position
                    var curQuestionPosition = question.Position;

                    entity.Questions.Remove(question);

                    //get all the questions that have a order number higher than the question that was removed
                    var remainingQuestions = (from q in entity.Questions
                                              where q.Position > curQuestionPosition && q.GroupID == GroupID
                                              select q).ToList();

                    //change the orderNumber of each of the questions that had a order number higher than the question that was removed
                    foreach (var quest in remainingQuestions)
                    {
                        quest.Position = --quest.Position;
                        entity.Entry(quest).State = EntityState.Modified;
                    }

                    //entity.Entry(remainingQuestions).State = EntityState.Modified;
                    entity.SaveChanges();

                    //activity stream
                    AddActivity(secretKey, CompanyID + "", null, null, survey.ProjectID + "", survey.ID + "", "removed a question from", ActivityType.Survey);
                }

                dynamic returnItem = new JObject();
                returnItem.Status = "Success";
                return returnItem.ToString();
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        //get specific question for the group
        public string GetSpecificQuestion(string secretKey, string questionID)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                questionID = TrimIfNotNull(questionID);

                var username = CheckUserHasRight(secretKey, "GetSpecificQuestion");
                if (Utils.IsError(username))
                {
                    return username;
                }
                //check if the user is an administrator
                /*var IsAdmin = CheckUserHasAdminRole(secretKey);

                //if the user is not an admin 
                if (Utils.IsError(IsAdmin))
                {
                    var userCompany = CheckUserCompany(secretKey, companyID);
                    if (Utils.IsError(userCompany))
                    {
                        return userCompany;
                    }
                }*/

                Guid QuestionID;
                if (!Guid.TryParse(questionID, out QuestionID))
                {
                    return Utils.WrapError("Question ID is not in the correct format");
                }

                //convert the company id received
                /*Guid CompanyID;
                if (!Guid.TryParse(companyID, out CompanyID))
                {
                    return Utils.WrapError("Company ID is not in the correct format");
                }*/

                #region Check if the logged in user is assuming a company

                //check if the user is assuming a company
                var assumeResult = CheckAssumeCompany(secretKey);
                if (Utils.IsError(assumeResult))
                {
                    return assumeResult;
                }

                //parse the company ID to a Guid
                Guid CompanyID = Guid.Empty;
                if (!Guid.TryParse(assumeResult, out CompanyID))
                {
                    return Utils.WrapError("The ID of the Company that you are trying to view is in the incorrect format");
                }

                #endregion

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    var questions = (from q in entity.Questions
                                     join qg in entity.QuestionGroups
                                     on q.GroupID equals qg.ID
                                     join s in entity.Surveys
                                     on qg.SurveyID equals s.ID
                                     join p in entity.Projects
                                     on s.ProjectID equals p.ID
                                     where q.ID == QuestionID && p.ProjectCompany == CompanyID
                                     select new
                                     {
                                         QuestionID = q.ID,
                                         q.QuestionText,
                                         q.QuestionType,
                                         q.Position,
                                         q.GroupID,
                                         q.RegexPattern,
                                         q.RegexPatternError,
                                         q.MinimumValue,
                                         q.MaximumValue,
                                         q.RequiredQuestion,
                                         q.ContainsValue,
                                         q.EqualsValue,
                                         q.NotEqualsValue,
                                         q.StartsWithValue,
                                         q.EndsWithValue,
                                         q.LengthValue,
                                         q.CalculationValue,
                                         q.HasSum,
                                         QuestionValues = (
                                             from qv in entity.QuestionValues
                                             where qv.QuestionID == q.ID
                                             orderby qv.Position
                                             select new
                                             {
                                                 qv.ID,
                                                 qv.Name,
                                                 qv.Value,
                                                 qv.IsDefault,
                                                 qv.Position,
                                                 qv.IsOther
                                             }).ToList()
                                     }).FirstOrDefault();

                    if (questions == null)
                    {
                        return Utils.WrapError("Question not found");
                    }


                    return Helper.SerializeToJavascriptOject(questions);
                }

            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        //questionvalues: JArray(order, name, value, isDefault)
        public string UpdateQuestion(string secretKey, string questionID, string questionText, string questionTypeID, string questionValues,
            //validation
            string regexPattern, string regexError, string minimumValue, string maximumValue,
            string requiredQuestion, string containsValue, string equalsValue, string notEqualsValue,
            string startsWithValue, string endsWithValue, string lengthValue, string minimumLength, string maximumLength, string calculationValue, string hasSum)
        {
            try
            {

                Helper.LogMessage("UpdateQuestion : complexRegexPattern = " + regexPattern + " equalsValue = " + equalsValue
                + " notEqualsValue = " + notEqualsValue + "  startsWithValue = " + startsWithValue + " endsWithValue = " + endsWithValue
                + " containsValue = " + containsValue);

                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                questionText = TrimIfNotNull(questionText);
                questionTypeID = TrimIfNotNull(questionTypeID);
                questionValues = TrimIfNotNull(questionValues);

                regexPattern = TrimIfNotNull(regexPattern);
                regexError = TrimIfNotNull(regexError);
                minimumValue = TrimIfNotNull(minimumValue);
                maximumValue = TrimIfNotNull(maximumValue);
                requiredQuestion = TrimIfNotNull(requiredQuestion);
                containsValue = TrimIfNotNull(containsValue);
                equalsValue = TrimIfNotNull(equalsValue);
                notEqualsValue = TrimIfNotNull(notEqualsValue);
                startsWithValue = TrimIfNotNull(startsWithValue);
                endsWithValue = TrimIfNotNull(endsWithValue);
                lengthValue = TrimIfNotNull(lengthValue);
                minimumLength = TrimIfNotNull(minimumLength);
                maximumLength = TrimIfNotNull(maximumLength);
                questionID = TrimIfNotNull(questionID);
                calculationValue = TrimIfNotNull(calculationValue);
                hasSum = TrimIfNotNull(hasSum);

                var username = CheckUserHasRight(secretKey, "UpdateQuestion");
                if (Utils.IsError(username))
                {
                    return username;
                }

                //check if the user is an administrator
                /*var IsAdmin = CheckUserHasAdminRole(secretKey);

                //if the user is not an admin 
                if (Utils.IsError(IsAdmin))
                {
                    var userCompany = CheckUserCompany(secretKey, companyID);
                    if (Utils.IsError(userCompany))
                    {
                        return userCompany;
                    }
                }*/

                if (string.IsNullOrWhiteSpace(questionText))
                {
                    return Utils.WrapError("Please ensure that you enter the question text");
                }

                //convert the company id received
                /*Guid CompanyID;
                if (!Guid.TryParse(companyID, out CompanyID))
                {
                    return Utils.WrapError("Company ID is not in the correct format");
                }*/

                Guid QuestionTypeID;
                if (!Guid.TryParse(questionTypeID, out QuestionTypeID))
                {
                    return Utils.WrapError("Question Type ID is not in the correct format");
                }

                Guid QuestionID;
                if (!Guid.TryParse(questionID, out QuestionID))
                {
                    return Utils.WrapError("Question ID is not in the correct format");
                }

                Boolean RequiredQuestion;
                if (!Boolean.TryParse(requiredQuestion, out RequiredQuestion))
                {
                    return Utils.WrapError("Required Question is not in the correct format");
                }

                Boolean HasSum;
                if (!Boolean.TryParse(hasSum, out HasSum))
                {
                    return Utils.WrapError("Has Sum is not in the correct format");
                }

                //if the question type is a calculation, ensure that there is a value entered for the calculationvalue
                if (QuestionTypeID == CalculationType)
                {
                    if (string.IsNullOrWhiteSpace(calculationValue))
                    {
                        return Utils.WrapError("Please ensure that you enter a calculation");
                    }
                    if (string.IsNullOrWhiteSpace(questionText))
                    {
                        return Utils.WrapError("Please ensure that you enter a heading / name for your calculation");
                    }
                }


                int LengthValue = -1;
                if (!string.IsNullOrWhiteSpace(lengthValue))
                {
                    if (!Int32.TryParse(lengthValue, out LengthValue))
                    {
                        return Utils.WrapError("Length value is not in the correct format");
                    }
                }


                int MinLength = -1;
                if (!string.IsNullOrWhiteSpace(minimumLength))
                {
                    if (!int.TryParse(minimumLength, out MinLength))
                    {
                        return Utils.WrapError("Minimum Length is not in the correct format");
                    }
                }


                int MaxLength = -1;
                if (!string.IsNullOrWhiteSpace(maximumLength))
                {
                    if (!int.TryParse(maximumLength, out MaxLength))
                    {
                        return Utils.WrapError("Maximum Length is not in the correct format");
                    }
                }

                //parse all values to a json array
                JArray valuesList = null;
                if (!string.IsNullOrWhiteSpace(questionValues))
                {
                    valuesList = JArray.Parse(questionValues);
                }

                #region Check if the logged in user is assuming a company

                //check if the user is assuming a company
                var assumeResult = CheckAssumeCompany(secretKey);
                if (Utils.IsError(assumeResult))
                {
                    return assumeResult;
                }

                //parse the company ID to a Guid
                Guid CompanyID = Guid.Empty;
                if (!Guid.TryParse(assumeResult, out CompanyID))
                {
                    return Utils.WrapError("The ID of the Company that you are trying to view is in the incorrect format");
                }

                #endregion

                Guid LoggedInUserID = (Guid)Membership.GetUser(username).ProviderUserKey;

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    //check that the question type exists
                    var curQuestionType = (from qt in entity.QuestionTypes
                                           where qt.ID == QuestionTypeID
                                           select qt).FirstOrDefault();

                    if (curQuestionType == null)
                    {
                        return Utils.WrapError("The Question Type you are trying to use cannot be found");
                    }

                    //if the question type is a camera type
                    if (QuestionTypeID == CameraType)
                    {
                        //check if the company is allowed to use the photo/camera feature
                        var result = CheckCompanyPackagePhotoCamera(CompanyID + "");
                        if (Utils.IsError(result))
                        {
                            return result;
                        }
                    }
                    //if the question type is a location type
                    else if (QuestionTypeID == LocationType)
                    {
                        //check if the company is allowed to use the geo services feature
                        var result = CheckCompanyPackageGeoServices(CompanyID + "");
                        if (Utils.IsError(result))
                        {
                            return result;
                        }
                    }
                    //if the question type is a signature type
                    else if (QuestionTypeID == SignatureType)
                    {
                        //check if the company is allowed to use the signature feature
                        var result = CheckCompanyPackageSignatures(CompanyID + "");
                        if (Utils.IsError(result))
                        {
                            return result;
                        }
                    }

                    var question = (from q in entity.Questions
                                    join qg in entity.QuestionGroups
                                    on q.GroupID equals qg.ID
                                    join s in entity.Surveys
                                    on qg.SurveyID equals s.ID
                                    join p in entity.Projects
                                    on s.ProjectID equals p.ID
                                    where q.ID == QuestionID && p.ProjectCompany == CompanyID
                                    select q).FirstOrDefault();

                    if (question == null)
                    {
                        return Utils.WrapError("The question you are trying to update does not exist");
                    }

                    var group = (from q in entity.Questions
                                 join g in entity.QuestionGroups
                                 on q.GroupID equals g.ID
                                 join s in entity.Surveys
                                 on g.SurveyID equals s.ID
                                 join p in entity.Projects
                                 on s.ProjectID equals p.ID
                                 where q.ID == QuestionID && p.ProjectCompany == CompanyID
                                 select g).FirstOrDefault();

                    if (group == null)
                    {
                        return Utils.WrapError("Group could not be found");
                    }

                    //if the question has summing
                    if (HasSum)
                    {
                        //check if the company is allowed to use summing
                        var packageSummingResult = CheckCompanyPackageSumming(CompanyID + "");
                        if (Utils.IsError(packageSummingResult))
                        {
                            return packageSummingResult;
                        }

                        //ensure that the question is a table type
                        if (group.GroupType != GroupTypeTable)
                        {
                            return Utils.WrapError("Summing can only be used within Tables");
                        }
                    }

                    Guid GroupID = group.ID;


                    //check the survey's status
                    var surveyStatus = CheckSurveyStatus(group.SurveyID + "", "true", "true", "true");
                    if (Utils.IsError(surveyStatus))
                    {
                        return surveyStatus;
                    }
                    var survey = (from s in entity.Surveys
                                  join qg in entity.QuestionGroups
                                      on s.ID equals qg.SurveyID
                                  join p in entity.Projects
                                  on s.ProjectID equals p.ID
                                  where qg.ID == GroupID && p.ProjectCompany == CompanyID
                                  select s).FirstOrDefault();

                    if (survey == null)
                    {
                        return Utils.WrapError("The survey that the question belongs to does not exist");
                    }

                    //check the project's status
                    var projectStatus = CheckProjectStatus(survey.ProjectID + "", "true", null, "true");
                    if (Utils.IsError(projectStatus))
                    {
                        return projectStatus;
                    }

                    //generate the appropriate regex pattern for the question
                    regexPattern = GenerateRegex(regexPattern, equalsValue, notEqualsValue, startsWithValue, endsWithValue, containsValue);

                    question.QuestionText = questionText;
                    question.QuestionType = QuestionTypeID;
                    question.UpdatedBy = LoggedInUserID;
                    question.DateUpdated = DateTime.Now;
                    question.RegexPattern = regexPattern;
                    question.RegexPatternError = regexError;
                    question.MinimumValue = minimumValue;
                    question.MaximumValue = maximumValue;
                    question.RequiredQuestion = RequiredQuestion;
                    question.ContainsValue = containsValue;
                    question.EqualsValue = equalsValue;
                    question.NotEqualsValue = notEqualsValue;
                    question.StartsWithValue = startsWithValue;
                    question.EndsWithValue = endsWithValue;
                    question.CalculationValue = calculationValue;
                    question.HasSum = HasSum;

                    if (LengthValue != -1)
                    {
                        question.LengthValue = LengthValue + "";
                    }
                    else
                    {
                        question.LengthValue = null;
                    }

                    if (MinLength != -1)
                    {
                        question.MinimumLength = MinLength + "";
                        //ZIBA
                    }
                    else
                    {
                        question.MinimumLength = null;
                    }

                    if (MaxLength != -1)
                    {
                        question.MaximumLength = MaxLength + "";
                    }
                    else
                    {
                        question.MaximumLength = null;
                    }

                    entity.Entry(question).State = EntityState.Modified;

                    //cycle through all the values(JArray: name, value, isDefault)
                    if (valuesList != null && valuesList.Count > 0)
                    {
                        //remove all old question values
                        var oldQuestionValues = (from q in entity.QuestionValues
                                                 where q.QuestionID == QuestionID
                                                 select q).ToList();

                        foreach (var value in oldQuestionValues)
                        {
                            entity.QuestionValues.Remove(value);
                        }
                        //add new values
                        foreach (JObject i in valuesList)
                        {
                            Boolean IsDefault;
                            if (!Boolean.TryParse(i.GetValue("isDefault").ToString(), out IsDefault))
                            {
                                return Utils.WrapError("Is Default is not in the correct format");
                            }

                            long Position = 0;
                            if (!Int64.TryParse(i.GetValue("order").ToString(), out Position))
                            {
                                return Utils.WrapError("Order is not in the correct format");
                            }

                            Boolean IsOther;
                            if (!Boolean.TryParse(i.GetValue("isOther").ToString(), out IsOther))
                            {
                                return Utils.WrapError("Is Other is not in the correct format");
                            }

                            var newQuestionValue = new QuestionValue();
                            newQuestionValue.ID = Guid.NewGuid();
                            newQuestionValue.QuestionID = QuestionID;
                            newQuestionValue.Position = Position;
                            newQuestionValue.Name = i.GetValue("name").ToString();
                            newQuestionValue.Value = i.GetValue("value").ToString();
                            newQuestionValue.IsDefault = IsDefault;
                            newQuestionValue.IsOther = IsOther;

                            entity.QuestionValues.Add(newQuestionValue);
                        }

                    }

                    entity.SaveChanges();


                    //activity stream
                    AddActivity(secretKey, CompanyID + "", null, null, survey.ProjectID + "", survey.ID + "", "updated a question in", ActivityType.Survey);

                }
                dynamic returnItem = new JObject();
                returnItem.Status = "Success";
                return returnItem.ToString();
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        //questionIDToMove - the ID of the question that is being moved
        //questionIDBelow - the ID of the question that is below the question that is being moved (null if the new question is moved right to the bottom)
        public string MoveQuestion(string secretKey, string groupID, string questionIDToMove, string questionIDBelow)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                questionIDToMove = TrimIfNotNull(questionIDToMove);
                questionIDBelow = TrimIfNotNull(questionIDBelow);
                groupID = TrimIfNotNull(groupID);

                var username = CheckUserHasRight(secretKey, "MoveQuestion");
                if (Utils.IsError(username))
                {
                    return username;
                }

                Guid QuestionIDToMove;
                if (!Guid.TryParse(questionIDToMove, out QuestionIDToMove))
                {
                    return Utils.WrapError("Question ID to move is not in the correct format");
                }

                Guid QuestionIDBelow = Guid.Empty;
                if (!string.IsNullOrWhiteSpace(questionIDBelow))
                {
                    if (!Guid.TryParse(questionIDBelow, out QuestionIDBelow))
                    {
                        return Utils.WrapError("Question ID is not in the correct format");
                    }
                }

                Guid GroupID;
                if (!Guid.TryParse(groupID, out GroupID))
                {
                    return Utils.WrapError("Group ID is not in the correct format");
                }

                #region Check if the logged in user is assuming a company

                //check if the user is assuming a company
                var assumeResult = CheckAssumeCompany(secretKey);
                if (Utils.IsError(assumeResult))
                {
                    return assumeResult;
                }

                //parse the company ID to a Guid
                Guid CompanyID = Guid.Empty;
                if (!Guid.TryParse(assumeResult, out CompanyID))
                {
                    return Utils.WrapError("The ID of the Company that you are trying to view is in the incorrect format");
                }

                #endregion

                //get the ID for the logged in user
                Guid LoggedInUserID = (Guid)Membership.GetUser(username).ProviderUserKey;

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    //check if the survey exists
                    var survey = (from g in entity.QuestionGroups
                                  join s in entity.Surveys
                                  on g.SurveyID equals s.ID
                                  join p in entity.Projects
                                  on s.ProjectID equals p.ID
                                  where g.ID == GroupID && p.ProjectCompany == CompanyID
                                  select s).FirstOrDefault();

                    if (survey == null)
                    {
                        return Utils.WrapError("Group / Survey not found");
                    }

                    //check the survey's status
                    var surveyStatus = CheckSurveyStatus(survey.ID + "", "true", "true", "true");
                    if (Utils.IsError(surveyStatus))
                    {
                        return surveyStatus;
                    }

                    //check the project's status
                    var projectStatus = CheckProjectStatus(survey.ProjectID + "", "true", null, "true");
                    if (Utils.IsError(projectStatus))
                    {
                        return projectStatus;
                    }

                    //check the question that is being moved
                    var movingQuestion = (from g in entity.Questions
                                          where g.ID == QuestionIDToMove && g.GroupID == GroupID
                                          select g).FirstOrDefault();

                    if (movingQuestion == null)
                    {
                        return Utils.WrapError("Question to move could not be found");
                    }

                    //get the old position of the question being moved
                    long oldPosition = movingQuestion.Position;
                    //the new position to move the question to
                    long newPosition = 0;

                    #region if moving between a range i.e. the question below id != null

                    //if moving between a range i.e. the question below id != null
                    if (QuestionIDBelow != Guid.Empty)
                    {
                        //check the question below the new question
                        var belowQuestion = (from q in entity.Questions
                                             where q.ID == QuestionIDBelow && q.GroupID == GroupID
                                             select q).FirstOrDefault();

                        if (belowQuestion == null)
                        {
                            return Utils.WrapError("Question could not be found");
                        }

                        //get the new position of the question
                        long belowPosition = belowQuestion.Position;

                        //if the question below is the first question in the list
                        if (belowPosition == 1)
                        {
                            //set the new question to the first question in the list
                            newPosition = 1;
                        }
                        else
                        {
                            //set the new question to the position that the old question was in
                            newPosition = belowPosition;
                        }

                        #region the question was moved upwards

                        //the question was moved upwards
                        if (oldPosition > newPosition)
                        {
                            //get the questions that are affected by the move
                            var affectedQuestions = (from q in entity.Questions
                                                     where q.Position >= belowPosition && q.Position < oldPosition && q.GroupID == GroupID
                                                     select q).ToList();



                            //if there are questions
                            if (affectedQuestions != null)
                            {
                                //go through each question and change its position
                                foreach (var question in affectedQuestions)
                                {
                                    question.Position = question.Position + 1;
                                    entity.Entry(question).State = EntityState.Modified;
                                }
                            }

                        }

                        #endregion

                        #region the group was moved downwards

                        //the group was moved downwards
                        else if (oldPosition < newPosition)
                        {
                            //move it to the position above the received below question id
                            newPosition = newPosition - 1;

                            //get the question that are affected by the move
                            var affectedQuestions = (from q in entity.Questions
                                                     where q.Position > oldPosition && q.Position < belowPosition && q.GroupID == GroupID
                                                     select q).ToList();

                            //if there are question
                            if (affectedQuestions != null)
                            {
                                //go through each question and change its position
                                foreach (var question in affectedQuestions)
                                {
                                    question.Position = question.Position - 1;
                                    entity.Entry(question).State = EntityState.Modified;
                                }
                            }

                        }

                        #endregion

                        #region the group wasn't moved
                        //the group wasn't moved
                        else
                        {
                            //do nothing
                        }

                        #endregion

                    }

                    #endregion

                    #region if moving right to the bottom

                    //if moving right to the bottom
                    else
                    {

                        //get the last question position for the survey
                        var lastQuestion = (from q in entity.Questions
                                            orderby q.Position descending
                                            where q.GroupID == GroupID
                                            select q).Take(1).FirstOrDefault();

                        if (lastQuestion == null)
                        {
                            return Utils.WrapError("Last group could not be found");
                        }

                        newPosition = lastQuestion.Position;

                        //get the question that are affected by the move
                        var affectedQuestions = (from q in entity.Questions
                                                 where q.Position > oldPosition && q.GroupID == GroupID
                                                 select q).ToList();

                        //if there are question
                        if (affectedQuestions != null)
                        {
                            //go through each question and change its position
                            foreach (var question in affectedQuestions)
                            {
                                question.Position = question.Position - 1;
                                entity.Entry(question).State = EntityState.Modified;
                            }
                        }
                    }

                    #endregion

                    //set the new position of question to move
                    movingQuestion.Position = newPosition;
                    entity.Entry(movingQuestion).State = EntityState.Modified;

                    entity.SaveChanges();

                    //activity stream
                    AddActivity(secretKey, CompanyID + "", null, null, survey.ProjectID + "", survey.ID + "", "changed the order of a question in", ActivityType.Survey);

                    dynamic returnItem = new JObject();
                    returnItem.Status = "Success";
                    return returnItem.ToString();
                }
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        //get all the questions that are not in this group
        public string GetAllSurveyQuestions(string secretKey, string surveyID)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                surveyID = TrimIfNotNull(surveyID);

                var username = CheckUserHasRight(secretKey, "GetGroupsAndQuestionsForSurvey");
                if (Utils.IsError(username))
                {
                    return username;
                }

                Guid SurveyID;
                if (!Guid.TryParse(surveyID, out SurveyID))
                {
                    return Utils.WrapError("Survey ID is not in the correct format");
                }

                #region Check if the logged in user is assuming a company

                //check if the user is assuming a company
                var assumeResult = CheckAssumeCompany(secretKey);
                if (Utils.IsError(assumeResult))
                {
                    return assumeResult;
                }

                //parse the company ID to a Guid
                Guid CompanyID = Guid.Empty;
                if (!Guid.TryParse(assumeResult, out CompanyID))
                {
                    return Utils.WrapError("The ID of the Company that you are trying to view is in the incorrect format");
                }

                #endregion

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    var survey = (from s in entity.Surveys
                                  join p in entity.Projects
                                  on s.ProjectID equals p.ID
                                  where s.ID == SurveyID && p.ProjectCompany == CompanyID
                                  select new
                                  {
                                      s.ID,
                                      s.ProjectID,
                                      CompanyID = p.ProjectCompany
                                  }).FirstOrDefault();

                    if (survey == null)
                    {
                        return Utils.WrapError("The survey details could not be found");
                    }

                    var curQuestions = (from qg in entity.QuestionGroups
                                        join q in entity.Questions
                                        on qg.ID equals q.GroupID
                                        join qt in entity.QuestionTypes
                                        on q.QuestionType equals qt.ID
                                        orderby q.QuestionText
                                        where qg.SurveyID == SurveyID
                                        select new
                                        {
                                            //get group info
                                            GroupID = qg.ID,
                                            GroupName = qg.GroupName,
                                            qg.GroupHeading,
                                            //get question info
                                            QuestionID = q.ID,
                                            q.QuestionText,
                                            //get question type
                                            QuestionTypeID = qt.ID,
                                            QuestionType = qt.Type,
                                            //get question values
                                            QuestionValues = (
                                                from qv in entity.QuestionValues
                                                where q.ID == qv.QuestionID
                                                select new
                                                {
                                                    qv.ID,
                                                    qv.Name,
                                                    qv.Value,
                                                    qv.IsDefault,
                                                    qv.Position,
                                                    qv.IsOther
                                                }
                                            ).ToList()
                                        }).ToList();

                    if (curQuestions == null || curQuestions.Count <= 0)
                    {
                        return "[]";
                    }
                    return Helper.SerializeToJavascriptOject(curQuestions);
                }

            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        #endregion

        #region Question Group Rows

        //get the next position for the row
        public string GetNextRowPosition(string groupID)
        {
            try
            {
                //remove any extra whitespaces
                groupID = TrimIfNotNull(groupID);

                Guid GroupID;
                if (!Guid.TryParse(groupID, out GroupID))
                {
                    return Utils.WrapError("Group ID is not in the correct format");
                }

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    //check that the group exists
                    var curGroup = (from g in entity.QuestionGroups
                                    where g.ID == GroupID
                                    select g).FirstOrDefault();

                    if (curGroup == null)
                    {
                        return Utils.WrapError("Group not found");
                    }

                    //get the highest position for the rows
                    var rows = (from q in entity.QuestionRows
                                where q.GroupID == GroupID
                                orderby q.Position descending
                                select q).Take(1).FirstOrDefault();


                    //if there are no rows for this group, return 1 to indicate that this is the first row
                    if (rows == null)
                    {
                        Helper.LogMessage("First row in group " + groupID);
                        return "1";
                    }
                    Helper.LogMessage("Group " + groupID + " Row " + rows.ID + " " + rows.RowText + " has a order number of " + rows.Position);

                    //if there were rows found, return the last order number + 1
                    var nextPosition = rows.Position + 1;
                    Helper.LogMessage("Group " + groupID + ": Next position " + nextPosition);

                    return nextPosition.ToString();
                }
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        //create a row
        public string CreateQuestionRow(string secretKey, string groupID, string rowText)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                groupID = TrimIfNotNull(groupID);
                rowText = TrimIfNotNull(rowText);

                var username = CheckUserHasRight(secretKey, "CreateQuestion");
                if (Utils.IsError(username))
                {
                    return username;
                }

                Guid GroupID;
                if (!Guid.TryParse(groupID, out GroupID))
                {
                    return Utils.WrapError("Group ID is not in the correct format");
                }

                if (string.IsNullOrWhiteSpace(rowText))
                {
                    return Utils.WrapError("Please ensure that you enter a name for your row");
                }

                //check if the user is an administrator
                /*var IsAdmin = CheckUserHasAdminRole(secretKey);

                //if the user is not an admin 
                if (Utils.IsError(IsAdmin))
                {
                    var userCompany = CheckUserCompany(secretKey, companyID);
                    if (Utils.IsError(userCompany))
                    {
                        return userCompany;
                    }
                }

                //convert the company id received
                Guid CompanyID;
                if (!Guid.TryParse(companyID, out CompanyID))
                {
                    return Utils.WrapError("Company ID is not in the correct format");
                }*/

                #region Check if the logged in user is assuming a company

                //check if the user is assuming a company
                var assumeResult = CheckAssumeCompany(secretKey);
                if (Utils.IsError(assumeResult))
                {
                    return assumeResult;
                }

                //parse the company ID to a Guid
                Guid CompanyID = Guid.Empty;
                if (!Guid.TryParse(assumeResult, out CompanyID))
                {
                    return Utils.WrapError("The ID of the Company that you are trying to view is in the incorrect format");
                }

                #endregion

                Guid LoggedInUserID = (Guid)Membership.GetUser(username).ProviderUserKey;

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    var group = (from g in entity.QuestionGroups
                                 join s in entity.Surveys
                                 on g.SurveyID equals s.ID
                                 join p in entity.Projects
                                 on s.ProjectID equals p.ID
                                 where g.ID == GroupID && p.ProjectCompany == CompanyID
                                 select g).FirstOrDefault();

                    if (group == null)
                    {
                        return Utils.WrapError("Group could not be found");
                    }

                    //check the survey's status
                    var surveyStatus = CheckSurveyStatus(group.SurveyID + "", "true", "true", "true");
                    if (Utils.IsError(surveyStatus))
                    {
                        return surveyStatus;
                    }
                    var survey = (from s in entity.Surveys
                                  join qg in entity.QuestionGroups
                                      on s.ID equals qg.SurveyID
                                  join p in entity.Projects
                                  on s.ProjectID equals p.ID
                                  where qg.ID == GroupID && p.ProjectCompany == CompanyID
                                  select s).FirstOrDefault();

                    if (survey == null)
                    {
                        return Utils.WrapError("The survey that the question belongs to does not exist");
                    }

                    //check the project's status
                    var projectStatus = CheckProjectStatus(survey.ProjectID + "", "true", null, "true");
                    if (Utils.IsError(projectStatus))
                    {
                        return projectStatus;
                    }

                    //get the next questions position for the row
                    string nextPosition = GetNextRowPosition(groupID);
                    if (Utils.IsError(nextPosition))
                    {
                        return nextPosition;
                    }

                    long NextPosition = 0;
                    if (!long.TryParse(nextPosition, out NextPosition))
                    {
                        return Utils.WrapError("Next group position could not be determined");
                    }

                    var newRow = new QuestionRow();
                    Guid RowID = Guid.NewGuid();
                    newRow.ID = RowID;
                    newRow.RowText = rowText;
                    newRow.GroupID = GroupID;
                    newRow.Position = NextPosition;
                    newRow.DateCreated = DateTime.Now;
                    newRow.CreatedBy = LoggedInUserID;
                    entity.QuestionRows.Add(newRow);
                    entity.SaveChanges();

                    //activity stream
                    AddActivity(secretKey, CompanyID + "", null, null, survey.ProjectID + "", survey.ID + "", "added a new table row to", ActivityType.Survey);


                    dynamic returnItem = new JObject();
                    returnItem.Status = "Success";
                    returnItem.RowID = RowID;
                    returnItem.RowPosition = NextPosition;
                    return returnItem.ToString();
                }
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        //remove a question 
        public string RemoveQuestionRow(string secretKey, string rowID)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                rowID = TrimIfNotNull(rowID);

                var username = CheckUserHasRight(secretKey, "RemoveQuestion");
                if (Utils.IsError(username))
                {
                    return username;
                }
                //check if the user is an administrator
                /*var IsAdmin = CheckUserHasAdminRole(secretKey);

                //if the user is not an admin 
                if (Utils.IsError(IsAdmin))
                {
                    var userCompany = CheckUserCompany(secretKey, companyID);
                    if (Utils.IsError(userCompany))
                    {
                        return userCompany;
                    }
                }*/

                Guid RowID;
                if (!Guid.TryParse(rowID, out RowID))
                {
                    return Utils.WrapError("Row ID is not in the correct format");
                }

                //convert the company id received
                /*Guid CompanyID;
                if (!Guid.TryParse(companyID, out CompanyID))
                {
                    return Utils.WrapError("Company ID is not in the correct format");
                }*/

                #region Check if the logged in user is assuming a company

                //check if the user is assuming a company
                var assumeResult = CheckAssumeCompany(secretKey);
                if (Utils.IsError(assumeResult))
                {
                    return assumeResult;
                }

                //parse the company ID to a Guid
                Guid CompanyID = Guid.Empty;
                if (!Guid.TryParse(assumeResult, out CompanyID))
                {
                    return Utils.WrapError("The ID of the Company that you are trying to view is in the incorrect format");
                }

                #endregion

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    var row = (from q in entity.QuestionRows
                               join qg in entity.QuestionGroups
                               on q.GroupID equals qg.ID
                               join s in entity.Surveys
                               on qg.SurveyID equals s.ID
                               join p in entity.Projects
                               on s.ProjectID equals p.ID
                               where q.ID == RowID && p.ProjectCompany == CompanyID
                               select q).FirstOrDefault();

                    //if the question row could not be found
                    if (row == null)
                    {
                        return Utils.WrapError("Question could not be found");
                    }

                    var group = (from q in entity.QuestionRows
                                 join qg in entity.QuestionGroups
                                 on q.GroupID equals qg.ID
                                 join s in entity.Surveys
                                 on qg.SurveyID equals s.ID
                                 join p in entity.Projects
                                 on s.ProjectID equals p.ID
                                 where q.ID == RowID && p.ProjectCompany == CompanyID
                                 select qg).FirstOrDefault();

                    if (group == null)
                    {
                        return Utils.WrapError("Question Row is not assigned to a group");
                    }

                    Guid GroupID = group.ID;

                    //check the survey's status
                    var surveyStatus = CheckSurveyStatus(group.SurveyID + "", "true", "true", "true");
                    if (Utils.IsError(surveyStatus))
                    {
                        return surveyStatus;
                    }

                    var survey = (from s in entity.Surveys
                                  join qg in entity.QuestionGroups
                                      on s.ID equals qg.SurveyID
                                  join p in entity.Projects
                                  on s.ProjectID equals p.ID
                                  where qg.ID == GroupID && p.ProjectCompany == CompanyID
                                  select s).FirstOrDefault();

                    if (survey == null)
                    {
                        return Utils.WrapError("The survey that the question belongs to cannot be found");
                    }

                    //check the project's status
                    var projectStatus = CheckProjectStatus(survey.ProjectID + "", "true", null, "true");
                    if (Utils.IsError(projectStatus))
                    {
                        return projectStatus;
                    }

                    //get the rows position
                    var curPosition = row.Position;

                    entity.QuestionRows.Remove(row);

                    //get all the rows that have a order number higher than the row that was removed
                    var remainingRows = (from q in entity.QuestionRows
                                         where q.Position > curPosition && q.GroupID == GroupID
                                         select q).ToList();

                    //change the position of each of the rows that had a order number higher than the row that was removed
                    foreach (var r in remainingRows)
                    {
                        r.Position = --r.Position;
                        entity.Entry(r).State = EntityState.Modified;
                    }

                    //entity.Entry(remainingQuestions).State = EntityState.Modified;
                    entity.SaveChanges();

                    //activity stream
                    AddActivity(secretKey, CompanyID + "", null, null, survey.ProjectID + "", survey.ID + "", "removed a question row from", ActivityType.Survey);
                }

                dynamic returnItem = new JObject();
                returnItem.Status = "Success";
                return returnItem.ToString();
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        //update a row
        public string UpdateQuestionRow(string secretKey, string rowID, string rowText)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                rowID = TrimIfNotNull(rowID);
                rowText = TrimIfNotNull(rowText);

                var username = CheckUserHasRight(secretKey, "UpdateQuestion");
                if (Utils.IsError(username))
                {
                    return username;
                }

                Guid RowID;
                if (!Guid.TryParse(rowID, out RowID))
                {
                    return Utils.WrapError("Row ID is not in the correct format");
                }

                if (string.IsNullOrWhiteSpace(rowText))
                {
                    return Utils.WrapError("Please ensure that you enter a name for your row");
                }

                //check if the user is an administrator
                /*var IsAdmin = CheckUserHasAdminRole(secretKey);

                //if the user is not an admin 
                if (Utils.IsError(IsAdmin))
                {
                    var userCompany = CheckUserCompany(secretKey, companyID);
                    if (Utils.IsError(userCompany))
                    {
                        return userCompany;
                    }
                }

                //convert the company id received
                Guid CompanyID;
                if (!Guid.TryParse(companyID, out CompanyID))
                {
                    return Utils.WrapError("Company ID is not in the correct format");
                }*/

                #region Check if the logged in user is assuming a company

                //check if the user is assuming a company
                var assumeResult = CheckAssumeCompany(secretKey);
                if (Utils.IsError(assumeResult))
                {
                    return assumeResult;
                }

                //parse the company ID to a Guid
                Guid CompanyID = Guid.Empty;
                if (!Guid.TryParse(assumeResult, out CompanyID))
                {
                    return Utils.WrapError("The ID of the Company that you are trying to view is in the incorrect format");
                }

                #endregion

                Guid LoggedInUserID = (Guid)Membership.GetUser(username).ProviderUserKey;

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    var row = (from q in entity.QuestionRows
                               join qg in entity.QuestionGroups
                               on q.GroupID equals qg.ID
                               join s in entity.Surveys
                               on qg.SurveyID equals s.ID
                               join p in entity.Projects
                               on s.ProjectID equals p.ID
                               where q.ID == RowID && p.ProjectCompany == CompanyID
                               select q).FirstOrDefault();

                    if (row == null)
                    {
                        return Utils.WrapError("The row you are trying to update does not exist");
                    }

                    var group = (from q in entity.QuestionRows
                                 join g in entity.QuestionGroups
                                 on q.GroupID equals g.ID
                                 join s in entity.Surveys
                                 on g.SurveyID equals s.ID
                                 join p in entity.Projects
                                 on s.ProjectID equals p.ID
                                 where q.ID == RowID && p.ProjectCompany == CompanyID
                                 select g).FirstOrDefault();

                    if (group == null)
                    {
                        return Utils.WrapError("Group could not be found");
                    }

                    Guid GroupID = group.ID;

                    //check the survey's status
                    var surveyStatus = CheckSurveyStatus(group.SurveyID + "", "true", "true", "true");
                    if (Utils.IsError(surveyStatus))
                    {
                        return surveyStatus;
                    }
                    var survey = (from s in entity.Surveys
                                  join qg in entity.QuestionGroups
                                      on s.ID equals qg.SurveyID
                                  join p in entity.Projects
                                  on s.ProjectID equals p.ID
                                  where qg.ID == GroupID && p.ProjectCompany == CompanyID
                                  select s).FirstOrDefault();

                    if (survey == null)
                    {
                        return Utils.WrapError("The survey that the question belongs to does not exist");
                    }

                    //check the project's status
                    var projectStatus = CheckProjectStatus(survey.ProjectID + "", "true", null, "true");
                    if (Utils.IsError(projectStatus))
                    {
                        return projectStatus;
                    }


                    row.UpdatedBy = LoggedInUserID;
                    row.DateUpdated = DateTime.Now;
                    row.RowText = rowText;

                    entity.Entry(row).State = EntityState.Modified;

                    entity.SaveChanges();


                    //activity stream
                    AddActivity(secretKey, CompanyID + "", null, null, survey.ProjectID + "", survey.ID + "", "updated a question row in", ActivityType.Survey);

                }
                dynamic returnItem = new JObject();
                returnItem.Status = "Success";
                return returnItem.ToString();
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        //rowIDToMove - the ID of the row that is being moved
        //rowIDBelow - the ID of the row that is below the row that is being moved (null if the new row is moved right to the bottom)
        public string MoveQuestionRow(string secretKey, string groupID, string rowIDToMove, string rowIDBelow)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                rowIDToMove = TrimIfNotNull(rowIDToMove);
                rowIDBelow = TrimIfNotNull(rowIDBelow);
                groupID = TrimIfNotNull(groupID);

                var username = CheckUserHasRight(secretKey, "MoveQuestion");
                if (Utils.IsError(username))
                {
                    return username;
                }

                //check if the user is an administrator
                /*var IsAdmin = CheckUserHasAdminRole(secretKey);

                //if the user is not an admin 
                if (Utils.IsError(IsAdmin))
                {
                    var userCompany = CheckUserCompany(secretKey, companyID);
                    if (Utils.IsError(userCompany))
                    {
                        return userCompany;
                    }
                }*/

                Guid RowIDToMove;
                if (!Guid.TryParse(rowIDToMove, out RowIDToMove))
                {
                    return Utils.WrapError("Row ID to move is not in the correct format");
                }

                Guid RowIDBelow = Guid.Empty;
                if (!string.IsNullOrWhiteSpace(rowIDBelow))
                {
                    if (!Guid.TryParse(rowIDBelow, out RowIDBelow))
                    {
                        return Utils.WrapError("Row ID is not in the correct format");
                    }
                }

                Guid GroupID;
                if (!Guid.TryParse(groupID, out GroupID))
                {
                    return Utils.WrapError("Group ID is not in the correct format");
                }

                #region Check if the logged in user is assuming a company

                //check if the user is assuming a company
                var assumeResult = CheckAssumeCompany(secretKey);
                if (Utils.IsError(assumeResult))
                {
                    return assumeResult;
                }

                //parse the company ID to a Guid
                Guid CompanyID = Guid.Empty;
                if (!Guid.TryParse(assumeResult, out CompanyID))
                {
                    return Utils.WrapError("The ID of the Company that you are trying to view is in the incorrect format");
                }

                #endregion

                //get the ID for the logged in user
                Guid LoggedInUserID = (Guid)Membership.GetUser(username).ProviderUserKey;

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    //check if the survey exists
                    var survey = (from g in entity.QuestionGroups
                                  join s in entity.Surveys
                                  on g.SurveyID equals s.ID
                                  join p in entity.Projects
                                  on s.ProjectID equals p.ID
                                  where g.ID == GroupID && p.ProjectCompany == CompanyID
                                  select s).FirstOrDefault();

                    if (survey == null)
                    {
                        return Utils.WrapError("Group / Survey not found");
                    }

                    //check the survey's status
                    var surveyStatus = CheckSurveyStatus(survey.ID + "", "true", "true", "true");
                    if (Utils.IsError(surveyStatus))
                    {
                        return surveyStatus;
                    }

                    //check the project's status
                    var projectStatus = CheckProjectStatus(survey.ProjectID + "", "true", null, "true");
                    if (Utils.IsError(projectStatus))
                    {
                        return projectStatus;
                    }

                    //check the row that is being moved
                    var movingRow = (from g in entity.QuestionRows
                                     join qg in entity.QuestionGroups
                                     on g.GroupID equals qg.ID
                                     join s in entity.Surveys
                                     on qg.SurveyID equals s.ID
                                     join p in entity.Projects
                                     on s.ProjectID equals p.ID
                                     where g.ID == RowIDToMove && g.GroupID == GroupID && p.ProjectCompany == CompanyID
                                     select g).FirstOrDefault();

                    if (movingRow == null)
                    {
                        return Utils.WrapError("Row to move could not be found");
                    }

                    //get the old position of the row being moved
                    long oldPosition = movingRow.Position;
                    //the new position to move the row to
                    long newPosition = 0;

                    #region if moving between a range i.e. the row below id != null

                    //if moving between a range i.e. the row below id != null
                    if (RowIDBelow != Guid.Empty)
                    {
                        //check the row below the new position
                        var belowRow = (from q in entity.QuestionRows
                                        where q.ID == RowIDBelow && q.GroupID == GroupID
                                        select q).FirstOrDefault();

                        if (belowRow == null)
                        {
                            return Utils.WrapError("Row could not be found");
                        }

                        //get the new position of the row
                        long belowPosition = belowRow.Position;

                        //if the row below is the first row in the list
                        if (belowPosition == 1)
                        {
                            //set the new row to the first row in the list
                            newPosition = 1;
                        }
                        else
                        {
                            //set the new row to the position that the old row was in
                            newPosition = belowPosition;
                        }

                        #region the row was moved upwards

                        //the row was moved upwards
                        if (oldPosition > newPosition)
                        {
                            //get the rows that are affected by the move
                            var affectedRows = (from q in entity.QuestionRows
                                                where q.Position >= belowPosition && q.Position < oldPosition && q.GroupID == GroupID
                                                select q).ToList();

                            //if there are rows
                            if (affectedRows != null)
                            {
                                //go through each row and change its position
                                foreach (var r in affectedRows)
                                {
                                    r.Position = r.Position + 1;
                                    entity.Entry(r).State = EntityState.Modified;
                                }
                            }

                        }

                        #endregion

                        #region the group was moved downwards

                        //the group was moved downwards
                        else if (oldPosition < newPosition)
                        {
                            //move it to the position above the received row id
                            newPosition = newPosition - 1;

                            //get the row that are affected by the move
                            var affectedRows = (from q in entity.QuestionRows
                                                where q.Position > oldPosition && q.Position < belowPosition && q.GroupID == GroupID
                                                select q).ToList();

                            //if there are rows
                            if (affectedRows != null)
                            {
                                //go through each row and change its position
                                foreach (var r in affectedRows)
                                {
                                    r.Position = r.Position - 1;
                                    entity.Entry(r).State = EntityState.Modified;
                                }
                            }

                        }
                        #endregion

                        #region the row wasn't moved

                        //the row wasn't moved
                        else
                        {
                            //do nothing
                        }

                        #endregion
                    }
                    #endregion

                    #region if moving right to the bottom

                    //if moving right to the bottom
                    else
                    {

                        //get the last row position for the survey
                        var lastRow = (from q in entity.QuestionRows
                                       orderby q.Position descending
                                       where q.GroupID == GroupID
                                       select q).Take(1).FirstOrDefault();

                        if (lastRow == null)
                        {
                            return Utils.WrapError("Last group could not be found");
                        }


                        newPosition = lastRow.Position;

                        //get the rows that are affected by the move
                        var affectedRows = (from q in entity.QuestionRows
                                            where q.Position > oldPosition && q.GroupID == GroupID
                                            select q).ToList();

                        //if there are rows
                        if (affectedRows != null)
                        {
                            //go through each row and change its position
                            foreach (var r in affectedRows)
                            {
                                r.Position = r.Position - 1;
                                entity.Entry(r).State = EntityState.Modified;
                            }
                        }
                    }

                    #endregion

                    //set the new position of row to move
                    movingRow.Position = newPosition;
                    entity.Entry(movingRow).State = EntityState.Modified;

                    entity.SaveChanges();

                    //activity stream
                    AddActivity(secretKey, CompanyID + "", null, null, survey.ProjectID + "", survey.ID + "", "changed the order of a question row in", ActivityType.Survey);

                    dynamic returnItem = new JObject();
                    returnItem.Status = "Success";
                    return returnItem.ToString();
                }
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        #endregion

        #region Question Group Piping

        //pipingConditions = JArray (order, type, value)
        public string AddPiping(string secretKey, string surveyID, string groupID, string pipingConditions, string show)
        {
            try
            {

                //for type I have: symbol, bitwise, and condition
                //for types symbol and bitwise, their values will be text but condition will be the inner obj

                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                groupID = TrimIfNotNull(groupID);
                pipingConditions = TrimIfNotNull(pipingConditions);
                show = TrimIfNotNull(show);
                surveyID = TrimIfNotNull(surveyID);

                var username = CheckUserHasRight(secretKey, "AddPiping");
                if (Utils.IsError(username))
                {
                    return username;
                }

                /*string companyID = GetUserCompanyID(secretKey);
                Guid CompanyID;
                if (!Guid.TryParse(companyID, out CompanyID))
                {
                    return Utils.WrapError("Company ID is not in the correct format");
                }*/

                Guid GroupID;
                if (!Guid.TryParse(groupID, out GroupID))
                {
                    return Utils.WrapError("Group ID is not in the correct format");
                }
                Guid SurveyID;
                if (!Guid.TryParse(surveyID, out SurveyID))
                {
                    return Utils.WrapError("Survey ID is not in the correct format");
                }

                if (string.IsNullOrWhiteSpace(pipingConditions) || pipingConditions == "[]")
                {
                    return Utils.WrapError("Please ensure that you enter piping conditions");
                }

                Boolean Show;
                if (!Boolean.TryParse(show, out Show))
                {
                    return Utils.WrapError("Show is not in the correct format");
                }

                #region Check if the logged in user is assuming a company

                //check if the user is assuming a company
                var assumeResult = CheckAssumeCompany(secretKey);
                if (Utils.IsError(assumeResult))
                {
                    return assumeResult;
                }

                //parse the company ID to a Guid
                Guid CompanyID = Guid.Empty;
                if (!Guid.TryParse(assumeResult, out CompanyID))
                {
                    return Utils.WrapError("The ID of the Company that you are trying to view is in the incorrect format");
                }

                #endregion

                //get the ID for the logged in user
                Guid LoggedInUserID = (Guid)Membership.GetUser(username).ProviderUserKey;

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    //check if the company is allowed to use piping
                    var packageResult = CheckCompanyPackagePiping(CompanyID + "");
                    if (Utils.IsError(packageResult))
                    {
                        return packageResult;
                    }

                    //check the survey's status
                    var surveyStatus = CheckSurveyStatus(surveyID + "", "true", "true", "true");
                    if (Utils.IsError(surveyStatus))
                    {
                        return surveyStatus;
                    }

                    var survey = (from s in entity.Surveys
                                  join p in entity.Projects
                                  on s.ProjectID equals p.ID
                                  where s.ID == SurveyID && p.ProjectCompany == CompanyID
                                  select new
                                  {
                                      s.ID,
                                      s.ProjectID,
                                      CompanyID = p.ProjectCompany

                                  }).FirstOrDefault();

                    if (survey == null)
                    {
                        return Utils.WrapError("The survey details could not be found");
                    }

                    //check the project's status
                    var projectStatus = CheckProjectStatus(survey.ProjectID + "", "true", null, "true");
                    if (Utils.IsError(projectStatus))
                    {
                        return projectStatus;
                    }

                    var newPipe = new QuestionPiping();
                    newPipe.ID = Guid.NewGuid();
                    newPipe.GroupID = GroupID;
                    newPipe.PipingConditions = pipingConditions;
                    newPipe.Show = Show;
                    entity.QuestionPipings.Add(newPipe);
                    entity.SaveChanges();

                }

                dynamic returnItem = new JObject();
                returnItem.Status = "Success";
                return returnItem.ToString();
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        public string DeletePiping(string secretKey, string surveyID, string pipingID)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                pipingID = TrimIfNotNull(pipingID);
                surveyID = TrimIfNotNull(surveyID);

                var username = CheckUserHasRight(secretKey, "DeletePiping");
                if (Utils.IsError(username))
                {
                    return username;
                }

                /*string companyID = GetUserCompanyID(secretKey);
                Guid CompanyID;
                if (!Guid.TryParse(companyID, out CompanyID))
                {
                    return Utils.WrapError("Company ID is not in the correct format");
                }*/

                Guid PipingID;
                if (!Guid.TryParse(pipingID, out PipingID))
                {
                    return Utils.WrapError("Piping ID is not in the correct format");
                }
                Guid SurveyID;
                if (!Guid.TryParse(surveyID, out SurveyID))
                {
                    return Utils.WrapError("Survey ID is not in the correct format");
                }

                #region Check if the logged in user is assuming a company

                //check if the user is assuming a company
                var assumeResult = CheckAssumeCompany(secretKey);
                if (Utils.IsError(assumeResult))
                {
                    return assumeResult;
                }

                //parse the company ID to a Guid
                Guid CompanyID = Guid.Empty;
                if (!Guid.TryParse(assumeResult, out CompanyID))
                {
                    return Utils.WrapError("The ID of the Company that you are trying to view is in the incorrect format");
                }

                #endregion

                //get the ID for the logged in user
                Guid LoggedInUserID = (Guid)Membership.GetUser(username).ProviderUserKey;

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    //check if the company is allowed to use piping
                    /*var packageResult = CheckCompanyPackagePiping(companyID);
                    if (Utils.IsError(packageResult))
                    {
                        return packageResult;
                    }*/

                    //check the survey's status
                    var surveyStatus = CheckSurveyStatus(surveyID + "", "true", "true", "true");
                    if (Utils.IsError(surveyStatus))
                    {
                        return surveyStatus;
                    }

                    var survey = (from s in entity.Surveys
                                  join p in entity.Projects
                                  on s.ProjectID equals p.ID
                                  where s.ID == SurveyID && p.ProjectCompany == CompanyID
                                  select new
                                  {
                                      s.ID,
                                      s.ProjectID,
                                      CompanyID = p.ProjectCompany

                                  }).FirstOrDefault();

                    if (survey == null)
                    {
                        return Utils.WrapError("The survey details could not be found");
                    }

                    //check the project's status
                    var projectStatus = CheckProjectStatus(survey.ProjectID + "", "true", null, "true");
                    if (Utils.IsError(projectStatus))
                    {
                        return projectStatus;
                    }

                    var curPiping = (from p in entity.QuestionPipings
                                     join qg in entity.QuestionGroups
                                     on p.GroupID equals qg.ID
                                     join s in entity.Surveys
                                     on qg.SurveyID equals s.ID
                                     join pr in entity.Projects
                                     on s.ProjectID equals pr.ID
                                     where p.ID == PipingID && pr.ProjectCompany == CompanyID
                                     select p).FirstOrDefault();

                    if (curPiping == null)
                    {
                        return Utils.WrapError("The Piping equation you are trying to delete does not exist");
                    }

                    entity.QuestionPipings.Remove(curPiping);
                    entity.SaveChanges();
                }

                dynamic returnItem = new JObject();
                returnItem.Status = "Success";
                return returnItem.ToString();
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        public string UpdatePiping(string secretKey, string surveyID, string pipingID, string groupID, string pipingConditions, string show)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                pipingID = TrimIfNotNull(pipingID);
                groupID = TrimIfNotNull(groupID);
                pipingConditions = TrimIfNotNull(pipingConditions);
                show = TrimIfNotNull(show);
                surveyID = TrimIfNotNull(surveyID);

                var username = CheckUserHasRight(secretKey, "UpdatePiping");
                if (Utils.IsError(username))
                {
                    return username;
                }

                /*string companyID = GetUserCompanyID(secretKey);
                Guid CompanyID;
                if (!Guid.TryParse(companyID, out CompanyID))
                {
                    return Utils.WrapError("Company ID is not in the correct format");
                }*/

                Guid PipingID;
                if (!Guid.TryParse(pipingID, out PipingID))
                {
                    return Utils.WrapError("Piping ID is not in the correct format");
                }

                Guid GroupID;
                if (!Guid.TryParse(groupID, out GroupID))
                {
                    return Utils.WrapError("Group ID is not in the correct format");
                }
                Guid SurveyID;
                if (!Guid.TryParse(surveyID, out SurveyID))
                {
                    return Utils.WrapError("Survey ID is not in the correct format");
                }
                if (string.IsNullOrWhiteSpace(pipingConditions))
                {
                    return Utils.WrapError("Please ensure that you enter piping conditions");
                }

                Boolean Show;
                if (!Boolean.TryParse(show, out Show))
                {
                    return Utils.WrapError("Show is not in the correct format");
                }

                #region Check if the logged in user is assuming a company

                //check if the user is assuming a company
                var assumeResult = CheckAssumeCompany(secretKey);
                if (Utils.IsError(assumeResult))
                {
                    return assumeResult;
                }

                //parse the company ID to a Guid
                Guid CompanyID = Guid.Empty;
                if (!Guid.TryParse(assumeResult, out CompanyID))
                {
                    return Utils.WrapError("The ID of the Company that you are trying to view is in the incorrect format");
                }

                #endregion

                //get the ID for the logged in user
                Guid LoggedInUserID = (Guid)Membership.GetUser(username).ProviderUserKey;

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    //check if the company is allowed to use piping
                    var packageResult = CheckCompanyPackagePiping(CompanyID + "");
                    if (Utils.IsError(packageResult))
                    {
                        return packageResult;
                    }

                    //check the survey's status
                    var surveyStatus = CheckSurveyStatus(surveyID + "", "true", "true", "true");
                    if (Utils.IsError(surveyStatus))
                    {
                        return surveyStatus;
                    }

                    var survey = (from s in entity.Surveys
                                  join p in entity.Projects
                                  on s.ProjectID equals p.ID
                                  where s.ID == SurveyID && p.ProjectCompany == CompanyID
                                  select new
                                  {
                                      s.ID,
                                      s.ProjectID,
                                      CompanyID = p.ProjectCompany

                                  }).FirstOrDefault();

                    if (survey == null)
                    {
                        return Utils.WrapError("The survey details could not be found");
                    }

                    //check the project's status
                    var projectStatus = CheckProjectStatus(survey.ProjectID + "", "true", null, "true");
                    if (Utils.IsError(projectStatus))
                    {
                        return projectStatus;
                    }

                    //get the piping that needs to be changed
                    var curPipe = (from p in entity.QuestionPipings
                                   join qg in entity.QuestionGroups
                                   on p.GroupID equals qg.ID
                                   join s in entity.Surveys
                                   on qg.SurveyID equals s.ID
                                   join pr in entity.Projects
                                   on s.ProjectID equals pr.ID
                                   where p.ID == PipingID && pr.ProjectCompany == CompanyID
                                   select p).FirstOrDefault();

                    if (curPipe == null)
                    {
                        return Utils.WrapError("The Piping equation you are trying to update does not exist");
                    }

                    //Remove piping if `PipingConditions` is an empty array
                    if (pipingConditions == "[]")
                    {
                        entity.QuestionPipings.Remove(curPipe);
                    }
                    else
                    {
                        curPipe.GroupID = GroupID;
                        curPipe.PipingConditions = pipingConditions;
                        curPipe.Show = Show;
                        entity.QuestionPipings.Add(curPipe);
                        entity.Entry(curPipe).State = EntityState.Modified;
                    }

                    entity.SaveChanges();

                }

                dynamic returnItem = new JObject();
                returnItem.Status = "Success";
                return returnItem.ToString();
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        public string GetGroupPiping(string secretKey, string groupID)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                groupID = TrimIfNotNull(groupID);

                var username = CheckUserHasRight(secretKey, "GetGroupsAndQuestionsForSurvey");
                if (Utils.IsError(username))
                {
                    return username;
                }

                Guid GroupID;
                if (!Guid.TryParse(groupID, out GroupID))
                {
                    return Utils.WrapError("Group ID is not in the correct format");
                }

                #region Check if the logged in user is assuming a company

                //check if the user is assuming a company
                var assumeResult = CheckAssumeCompany(secretKey);
                if (Utils.IsError(assumeResult))
                {
                    return assumeResult;
                }

                //parse the company ID to a Guid
                Guid CompanyID = Guid.Empty;
                if (!Guid.TryParse(assumeResult, out CompanyID))
                {
                    return Utils.WrapError("The ID of the Company that you are trying to view is in the incorrect format");
                }

                #endregion

                //get the ID for the logged in user
                Guid LoggedInUserID = (Guid)Membership.GetUser(username).ProviderUserKey;

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    var curPiping = (from p in entity.QuestionPipings
                                     join qg in entity.QuestionGroups
                                     on p.GroupID equals qg.ID
                                     join s in entity.Surveys
                                     on qg.SurveyID equals s.ID
                                     join pr in entity.Projects
                                     on s.ProjectID equals pr.ID
                                     where p.GroupID == GroupID && pr.ProjectCompany == CompanyID
                                     select new
                                     {
                                         p.ID,
                                         p.GroupID,
                                         p.Show,
                                         p.PipingConditions
                                     }).FirstOrDefault();

                    if (curPiping == null)
                    {
                        return null;
                    }

                    return Helper.SerializeToJavascriptOject(curPiping);
                }
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        public string GetAllPiping(string secretKey, string surveyID)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                surveyID = TrimIfNotNull(surveyID);

                var username = CheckUserHasRight(secretKey, "GetGroupsAndQuestionsForSurvey");
                if (Utils.IsError(username))
                {
                    return username;
                }

                Guid SurveyID;
                if (!Guid.TryParse(surveyID, out SurveyID))
                {
                    return Utils.WrapError("Survey ID is not in the correct format");
                }

                #region Check if the logged in user is assuming a company

                //check if the user is assuming a company
                var assumeResult = CheckAssumeCompany(secretKey);
                if (Utils.IsError(assumeResult))
                {
                    return assumeResult;
                }

                //parse the company ID to a Guid
                Guid CompanyID = Guid.Empty;
                if (!Guid.TryParse(assumeResult, out CompanyID))
                {
                    return Utils.WrapError("The ID of the Company that you are trying to view is in the incorrect format");
                }

                #endregion

                //get the ID for the logged in user
                Guid LoggedInUserID = (Guid)Membership.GetUser(username).ProviderUserKey;

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    var curPiping = (from s in entity.Surveys
                                     join g in entity.QuestionGroups
                                     on s.ID equals g.SurveyID
                                     join p in entity.QuestionPipings
                                     on g.ID equals p.GroupID
                                     join pr in entity.Projects
                                     on s.ProjectID equals pr.ID
                                     where s.ID == SurveyID && pr.ProjectCompany == CompanyID
                                     select new
                                     {
                                         p.ID,
                                         p.GroupID,
                                         p.Show,
                                         p.PipingConditions
                                     }).ToList();

                    if (curPiping == null || curPiping.Count() <= 0)
                    {
                        return "[]";
                    }

                    return Helper.SerializeToJavascriptOject(curPiping);
                }
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        //get all the questions that are not in this group
        public string GetSurveyQuestionNotInGroup(string secretKey, string surveyID, string groupID)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                surveyID = TrimIfNotNull(surveyID);
                groupID = TrimIfNotNull(groupID);

                var username = CheckUserHasRight(secretKey, "GetGroupsAndQuestionsForSurvey");
                if (Utils.IsError(username))
                {
                    return username;
                }

                Guid SurveyID;
                if (!Guid.TryParse(surveyID, out SurveyID))
                {
                    return Utils.WrapError("Survey ID is not in the correct format");
                }

                //convert the company id received
                /*Guid CompanyID;
                if (!Guid.TryParse(companyID, out CompanyID))
                {
                    return Utils.WrapError("Company ID is not in the correct format");
                }*/

                Guid GroupID;
                if (!Guid.TryParse(groupID, out GroupID))
                {
                    return Utils.WrapError("Group ID is not in the correct format");
                }

                #region Check if the logged in user is assuming a company

                //check if the user is assuming a company
                var assumeResult = CheckAssumeCompany(secretKey);
                if (Utils.IsError(assumeResult))
                {
                    return assumeResult;
                }

                //parse the company ID to a Guid
                Guid CompanyID = Guid.Empty;
                if (!Guid.TryParse(assumeResult, out CompanyID))
                {
                    return Utils.WrapError("The ID of the Company that you are trying to view is in the incorrect format");
                }

                #endregion

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    var survey = (from s in entity.Surveys
                                  join p in entity.Projects
                                  on s.ProjectID equals p.ID
                                  where s.ID == SurveyID && p.ProjectCompany == CompanyID
                                  select new
                                  {
                                      s.ID,
                                      s.ProjectID,
                                      CompanyID = p.ProjectCompany
                                  }).FirstOrDefault();

                    if (survey == null)
                    {
                        return Utils.WrapError("The survey details could not be found");
                    }



                    var curQuestions = (from qg in entity.QuestionGroups
                                        join q in entity.Questions
                                        on qg.ID equals q.GroupID
                                        join qt in entity.QuestionTypes
                                        on q.QuestionType equals qt.ID
                                        join s in entity.Surveys
                                        on qg.SurveyID equals s.ID
                                        join pr in entity.Projects
                                        on s.ProjectID equals pr.ID
                                        orderby q.QuestionText
                                        where qg.SurveyID == SurveyID && (qg.ID != GroupID && qg.ParentGroupID != GroupID) && (pr.ProjectCompany == CompanyID) &&
                                        //don't show questions of type: camera, location, or signature
                                        (qt.ID != CameraType && qt.ID != SignatureType && qt.ID != LocationType)
                                        select new
                                        {
                                            //get group info
                                            GroupID = qg.ID,
                                            //get question info
                                            QuestionID = q.ID,
                                            q.QuestionText,
                                            //get question type
                                            QuestionTypeID = qt.ID,
                                            QuestionType = qt.Type,
                                            //get question values
                                            QuestionValues = (
                                                from qv in entity.QuestionValues
                                                where q.ID == qv.QuestionID
                                                select new
                                                {
                                                    qv.ID,
                                                    qv.Name,
                                                    qv.Value,
                                                    qv.IsDefault,
                                                    qv.Position,
                                                    qv.IsOther
                                                }
                                            ).ToList()
                                        }).ToList();

                    if (curQuestions == null || curQuestions.Count <= 0)
                    {
                        return "[]";
                    }
                    return Helper.SerializeToJavascriptOject(curQuestions);
                }

            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        //get all the numerical / calculation questions
        public string GetSurveyQuestionNumerical(string secretKey, string surveyID)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                surveyID = TrimIfNotNull(surveyID);

                var username = CheckUserHasRight(secretKey, "GetGroupsAndQuestionsForSurvey");
                if (Utils.IsError(username))
                {
                    return username;
                }

                Guid SurveyID;
                if (!Guid.TryParse(surveyID, out SurveyID))
                {
                    return Utils.WrapError("Survey ID is not in the correct format");
                }

                //convert the company id received
                /*Guid CompanyID;
                if (!Guid.TryParse(companyID, out CompanyID))
                {
                    return Utils.WrapError("Company ID is not in the correct format");
                }*/

                #region Check if the logged in user is assuming a company

                //check if the user is assuming a company
                var assumeResult = CheckAssumeCompany(secretKey);
                if (Utils.IsError(assumeResult))
                {
                    return assumeResult;
                }

                //parse the company ID to a Guid
                Guid CompanyID = Guid.Empty;
                if (!Guid.TryParse(assumeResult, out CompanyID))
                {
                    return Utils.WrapError("The ID of the Company that you are trying to view is in the incorrect format");
                }

                #endregion

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    var survey = (from s in entity.Surveys
                                  join p in entity.Projects
                                  on s.ProjectID equals p.ID
                                  where s.ID == SurveyID && p.ProjectCompany == CompanyID
                                  select new
                                  {
                                      s.ID,
                                      s.ProjectID,
                                      CompanyID = p.ProjectCompany
                                  }).FirstOrDefault();

                    if (survey == null)
                    {
                        return Utils.WrapError("The survey details could not be found");
                    }

                    var curQuestions = (from qg in entity.QuestionGroups
                                        join q in entity.Questions
                                        on qg.ID equals q.GroupID
                                        join qt in entity.QuestionTypes
                                        on q.QuestionType equals qt.ID
                                        join s in entity.Surveys
                                        on qg.SurveyID equals s.ID
                                        join p in entity.Projects
                                        on s.ProjectID equals p.ID
                                        orderby q.QuestionText
                                        where (qg.SurveyID == SurveyID) && (p.ProjectCompany == CompanyID) &&
                                        // show questions of type: numerical / calculation / rating
                                        (qt.ID == NumericalType || qt.ID == CalculationType || qt.ID == RatingType)
                                        select new
                                        {
                                            //get group info
                                            GroupID = qg.ID,
                                            //get question info
                                            QuestionID = q.ID,
                                            q.QuestionText,
                                            //get question type
                                            QuestionTypeID = qt.ID,
                                            QuestionType = qt.Type
                                        }).ToList();

                    if (curQuestions == null || curQuestions.Count <= 0)
                    {
                        return "[]";
                    }
                    return Helper.SerializeToJavascriptOject(curQuestions);
                }

            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        #endregion

        #region Activity Stream

        private enum ActivityType
        {
            User,
            Document,
            Video,
            Photo,
            Project,
            Survey,
        }

        //add a new item to the activity stream
        private string AddActivity(string secretKey, string companyID,
            string affectedUserID,
            string link,
            string projectID,
            string surveyID,
            string activityMessage, ActivityType activityType, string loggedInUserID = null)
        {
            try
            {
                //remove any extra whitespaces
                affectedUserID = TrimIfNotNull(affectedUserID);
                companyID = TrimIfNotNull(companyID);
                secretKey = TrimIfNotNull(secretKey);
                link = TrimIfNotNull(link);
                projectID = TrimIfNotNull(projectID);
                surveyID = TrimIfNotNull(surveyID);
                activityMessage = TrimIfNotNull(activityMessage);

                string username = ValidateUser(secretKey);
                if (Utils.IsError(username))
                {
                    return username;
                }

                Guid CompanyID;
                if (!Guid.TryParse(companyID, out CompanyID))
                {
                    return Utils.WrapError("Company ID is not in the correct format");
                }

                Guid AffectedUserID = Guid.Empty;
                if (!string.IsNullOrWhiteSpace(affectedUserID))
                {
                    if (!Guid.TryParse(affectedUserID, out AffectedUserID))
                    {
                        return Utils.WrapError("Affected ID is not in the correct format");
                    }
                }

                Guid ProjectID = Guid.Empty;
                if (!string.IsNullOrWhiteSpace(projectID))
                {
                    if (!Guid.TryParse(projectID, out ProjectID))
                    {
                        return Utils.WrapError("Project ID is not in the correct format");
                    }
                }

                Guid SurveyID = Guid.Empty;
                if (!string.IsNullOrWhiteSpace(surveyID))
                {
                    if (!Guid.TryParse(surveyID, out SurveyID))
                    {
                        return Utils.WrapError("Survey ID is not in the correct format");
                    }
                }

                //get the ID for the logged in user
                Guid LoggedInUserID;
                if (string.IsNullOrWhiteSpace(loggedInUserID) || !Guid.TryParse(loggedInUserID, out LoggedInUserID))
                {
                    LoggedInUserID = (Guid)Membership.GetUser(username).ProviderUserKey;
                }

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    var LoggedInUserDetails = (from m in entity.aspnet_Membership
                                               where m.UserId == LoggedInUserID
                                               select m).FirstOrDefault();

                    if (LoggedInUserDetails == null)
                    {
                        return Utils.WrapError("Logged in user could not be found");
                    }

                    var newActivity = new ActivityStream();
                    newActivity.ID = Guid.NewGuid();
                    newActivity.CompanyID = CompanyID;


                    //user that was affected by the change
                    if (AffectedUserID != Guid.Empty)
                    {
                        var AffectedUserDetails = (from m in entity.aspnet_Membership
                                                   where m.UserId == AffectedUserID
                                                   select m).FirstOrDefault();

                        if (AffectedUserDetails == null)
                        {
                            return Utils.WrapError("Affected user could not be found");
                        }

                        Helper.LogMessage("AddActivity: Affected user ID: " + AffectedUserID);
                        newActivity.AffectedUserID = AffectedUserID;

                        //if the user does not have a firstname or surname in the database then only use their email address
                        if (string.IsNullOrWhiteSpace(AffectedUserDetails.Firstnames) || string.IsNullOrWhiteSpace(AffectedUserDetails.Lastname))
                        {
                            newActivity.AffectedUserFullName = AffectedUserDetails.Email;

                            Helper.LogMessage("AddActivity: Affected user email: " + AffectedUserDetails.Email);
                        }
                        else
                        {
                            newActivity.AffectedUserFullName = AffectedUserDetails.Firstnames + " " + AffectedUserDetails.Lastname + " (" + AffectedUserDetails.Email + ")";

                            Helper.LogMessage("AddActivity: Affected user email: " + newActivity.AffectedUserFullName);
                        }
                    }
                    else
                    {
                        Helper.LogMessage("AddActivity: No Affected user. affectedUserID: " + newActivity.AffectedUserFullName);
                    }

                    //user that performed the activty
                    newActivity.PerformedByUserID = LoggedInUserID;

                    //if the user does not have a firstname or surname in the database then only use their email address
                    if (string.IsNullOrWhiteSpace(LoggedInUserDetails.Firstnames) || string.IsNullOrWhiteSpace(LoggedInUserDetails.Lastname))
                    {

                        newActivity.PerformedByUserFullName = LoggedInUserDetails.Email;
                    }
                    else
                    {
                        newActivity.PerformedByUserFullName = LoggedInUserDetails.Firstnames + " " + LoggedInUserDetails.Lastname + " (" + LoggedInUserDetails.Email + ")";
                    }

                    //link to any document uploaded
                    newActivity.link = link;

                    //project that was affected by the change
                    if (ProjectID != Guid.Empty)
                    {
                        var ProjectDetails = (from p in entity.Projects
                                              where p.ID == ProjectID && p.ProjectCompany == CompanyID
                                              select p).FirstOrDefault();

                        if (ProjectDetails == null)
                        {
                            return Utils.WrapError("Project could not be found");
                        }

                        newActivity.ProjectID = ProjectID;
                        newActivity.ProjectName = ProjectDetails.ProjectName;
                    }

                    //survey that was affected by the change
                    if (SurveyID != Guid.Empty)
                    {
                        var SurveyDetails = (from s in entity.Surveys
                                             join p in entity.Projects
                                             on s.ProjectID equals p.ID
                                             where s.ID == SurveyID && p.ProjectCompany == CompanyID
                                             select s).FirstOrDefault();

                        if (SurveyDetails == null)
                        {
                            return Utils.WrapError("Survey could not be found");
                        }

                        newActivity.SurveyID = SurveyID;
                        newActivity.SurveyName = SurveyDetails.SurveyTitle;
                    }

                    //the activity that was performed and its details
                    newActivity.ActivityDate = DateTime.Now;
                    newActivity.ActivityMessage = activityMessage;

                    //get the name that is stored in the enum (have to use the index of type)
                    newActivity.ActivityType = Enum.GetName(typeof(ActivityType), (int)activityType);

                    entity.ActivityStreams.Add(newActivity);
                    entity.SaveChanges();

                }

                dynamic returnItem = new JObject();
                returnItem.Status = "Success";
                return returnItem.ToString();
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        //view the activity stream for the user - only user related items
        public string ViewUserActivityStream(string secretKey, string dateToViewFrom)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                dateToViewFrom = TrimIfNotNull(dateToViewFrom);

                //validate that the user is logged in
                var username = ValidateUser(secretKey);
                if (Utils.IsError(username))
                {
                    return username;
                }

                DateTime DateToViewFrom;
                if (!DateTime.TryParse(dateToViewFrom, out DateToViewFrom))
                {
                    return Utils.WrapError("Date to view from is not in the correct format");
                }

                //get the ID for the logged in user
                Guid LoggedInUserID = (Guid)Membership.GetUser(username).ProviderUserKey;

                //get the company that the user belongs to
                /*string companyID = GetUserCompanyID(secretKey);
                if (Utils.IsError(companyID))
                {
                    return companyID;
                }

                Guid CompanyID;
                if (!Guid.TryParse(companyID, out CompanyID))
                {
                    return Utils.WrapError("Company ID is not in the correct format");
                }*/

                #region Check if the logged in user is assuming a company

                //check if the user is assuming a company
                var assumeResult = CheckAssumeCompany(secretKey);
                if (Utils.IsError(assumeResult))
                {
                    return assumeResult;
                }

                //parse the company ID to a Guid
                Guid CompanyID = Guid.Empty;
                if (!Guid.TryParse(assumeResult, out CompanyID))
                {
                    return Utils.WrapError("The ID of the Company that you are trying to view is in the incorrect format");
                }

                #endregion

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    //get the activities for the user
                    var activity = (from a in entity.ActivityStreams
                                    where (
                                            // if the user was in the activity stream
                                            a.PerformedByUserID == LoggedInUserID || a.AffectedUserID == LoggedInUserID
                                        )
                                    //the activity date is 
                                    && a.ActivityDate < DateToViewFrom
                                    && a.CompanyID == CompanyID
                                    orderby a.ActivityDate descending
                                    select new
                                    {
                                        a.ID,
                                        a.CompanyID,
                                        a.AffectedUserID,
                                        a.AffectedUserFullName,
                                        a.PerformedByUserID,
                                        a.PerformedByUserFullName,
                                        a.link,
                                        a.ProjectID,
                                        a.ProjectName,
                                        a.SurveyID,
                                        a.SurveyName,
                                        a.ActivityMessage,
                                        a.ActivityDate,
                                        a.ActivityType,
                                        IsYours = (a.PerformedByUserID == LoggedInUserID) ? true : false,
                                        a.DocumentID
                                    }).Take(8).ToList();

                    if (activity == null || activity.Count <= 0)
                    {
                        return "[]";
                    }

                    return Helper.SerializeToJavascriptOject(activity);
                }
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        //view the activity stream for the project
        public string ViewProjectActivityStream(string secretKey, string projectID, string dateToViewFrom)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                dateToViewFrom = TrimIfNotNull(dateToViewFrom);
                projectID = TrimIfNotNull(projectID);

                //validate that the user is logged in
                var username = CheckUserHasRight(secretKey, "ViewProjectActivityStream");
                if (Utils.IsError(username))
                {
                    return username;
                }

                DateTime DateToViewFrom;
                if (!DateTime.TryParse(dateToViewFrom, out DateToViewFrom))
                {
                    return Utils.WrapError("Date to view from is not in the correct format");
                }

                Helper.LogMessage("Date to view from " + DateToViewFrom);

                Guid ProjectID;
                if (!Guid.TryParse(projectID, out ProjectID))
                {
                    return Utils.WrapError("Project ID is not in the correct format");
                }

                //get the ID for the logged in user
                Guid LoggedInUserID = (Guid)Membership.GetUser(username).ProviderUserKey;

                //get the company that the user belongs to
                /*string companyID = GetUserCompanyID(secretKey);
                if (Utils.IsError(companyID))
                {
                    return companyID;
                }

                Guid CompanyID;
                if (!Guid.TryParse(companyID, out CompanyID))
                {
                    return Utils.WrapError("Company ID is not in the correct format");
                }*/

                #region Check if the logged in user is assuming a company

                //check if the user is assuming a company
                var assumeResult = CheckAssumeCompany(secretKey);
                if (Utils.IsError(assumeResult))
                {
                    return assumeResult;
                }

                //parse the company ID to a Guid
                Guid CompanyID = Guid.Empty;
                if (!Guid.TryParse(assumeResult, out CompanyID))
                {
                    return Utils.WrapError("The ID of the Company that you are trying to view is in the incorrect format");
                }

                #endregion

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    //check if the project exists
                    var project = (from p in entity.Projects
                                   where p.ID == ProjectID && p.ProjectCompany == CompanyID
                                   select p).FirstOrDefault();

                    if (project == null)
                    {
                        return Utils.WrapError("Project does not exist");
                    }

                    //get the activities for the project
                    var activity = (from a in entity.ActivityStreams
                                    where
                                    // if the project is in the activity stream
                                    a.ProjectID == ProjectID
                                    //the activity date is 
                                    && a.ActivityDate < DateToViewFrom
                                    && a.CompanyID == CompanyID
                                    orderby a.ActivityDate descending
                                    select new
                                    {
                                        a.ID,
                                        a.CompanyID,
                                        a.AffectedUserID,
                                        a.AffectedUserFullName,
                                        a.PerformedByUserID,
                                        a.PerformedByUserFullName,
                                        a.link,
                                        a.ProjectID,
                                        a.ProjectName,
                                        a.SurveyID,
                                        a.SurveyName,
                                        a.ActivityMessage,
                                        a.ActivityDate,
                                        a.ActivityType,
                                        a.DocumentID
                                    }).Take(20).ToList();

                    if (activity == null || activity.Count <= 0)
                    {
                        return "[]";
                    }

                    return Helper.SerializeToJavascriptOject(activity);
                }
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        //get the users list that you can use to filter by
        public string GetUsersFilter(string secretKey)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);

                var username = CheckUserHasRight(secretKey, "ViewActivityStream");
                if (Utils.IsError(username))
                {
                    return username;
                }

                //get the ID for the logged in user
                Guid LoggedInUserID = (Guid)Membership.GetUser(username).ProviderUserKey;

                //get the company that the user belongs to
                /*string companyID = GetUserCompanyID(secretKey);
                if (Utils.IsError(companyID))
                {
                    return companyID;
                }

                Guid CompanyID;
                if (!Guid.TryParse(companyID, out CompanyID))
                {
                    return Utils.WrapError("Company ID is not in the correct format");
                }*/

                #region Check if the logged in user is assuming a company

                //check if the user is assuming a company
                var assumeResult = CheckAssumeCompany(secretKey);
                if (Utils.IsError(assumeResult))
                {
                    return assumeResult;
                }

                //parse the company ID to a Guid
                Guid CompanyID = Guid.Empty;
                if (!Guid.TryParse(assumeResult, out CompanyID))
                {
                    return Utils.WrapError("The ID of the Company that you are trying to view is in the incorrect format");
                }

                #endregion

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {

                    var curUsers = (from u in entity.aspnet_Membership
                                    join cu in entity.CompanyUsers
                                        on u.UserId equals cu.UserID
                                    where cu.CompanyID == CompanyID /*&& u.IsActive == true*/
                                    select new
                                    {
                                        u.UserId,
                                        Firstnames = u.Firstnames != null ? u.Firstnames : "",
                                        Lastname = u.Lastname != null ? u.Lastname : "",
                                        u.Email
                                    }).ToList();

                    if (curUsers == null || curUsers.Count() <= 0)
                    {
                        return "[]";
                    }

                    return Helper.SerializeToJavascriptOject(curUsers);
                }
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        //get the project list that you can use to filter by
        public string GetProjectsFilter(string secretKey)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);

                var username = CheckUserHasRight(secretKey, "ViewActivityStream");
                if (Utils.IsError(username))
                {
                    return username;
                }

                //get the ID for the logged in user
                Guid LoggedInUserID = (Guid)Membership.GetUser(username).ProviderUserKey;

                //get the company that the user belongs to
                /* string companyID = GetUserCompanyID(secretKey);
                 if (Utils.IsError(companyID))
                 {
                     return companyID;
                 }

                 Guid CompanyID;
                 if (!Guid.TryParse(companyID, out CompanyID))
                 {
                     return Utils.WrapError("Company ID is not in the correct format");
                 }*/

                #region Check if the logged in user is assuming a company

                //check if the user is assuming a company
                var assumeResult = CheckAssumeCompany(secretKey);
                if (Utils.IsError(assumeResult))
                {
                    return assumeResult;
                }

                //parse the company ID to a Guid
                Guid CompanyID = Guid.Empty;
                if (!Guid.TryParse(assumeResult, out CompanyID))
                {
                    return Utils.WrapError("The ID of the Company that you are trying to view is in the incorrect format");
                }

                #endregion

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {

                    var curProjects = (from p in entity.Projects
                                       where p.ProjectCompany == CompanyID
                                       select new
                                       {
                                           p.ID,
                                           p.ProjectName
                                       }).ToList();

                    if (curProjects == null || curProjects.Count() <= 0)
                    {
                        return "[]";
                    }

                    return Helper.SerializeToJavascriptOject(curProjects);
                }
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        //get the surveys list that you can use to filter by
        public string GetSurveysFilter(string secretKey)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);

                var username = CheckUserHasRight(secretKey, "ViewActivityStream");
                if (Utils.IsError(username))
                {
                    return username;
                }

                //get the ID for the logged in user
                Guid LoggedInUserID = (Guid)Membership.GetUser(username).ProviderUserKey;

                //get the company that the user belongs to
                /*string companyID = GetUserCompanyID(secretKey);
                if (Utils.IsError(companyID))
                {
                    return companyID;
                }

                Guid CompanyID;
                if (!Guid.TryParse(companyID, out CompanyID))
                {
                    return Utils.WrapError("Company ID is not in the correct format");
                }*/

                #region Check if the logged in user is assuming a company

                //check if the user is assuming a company
                var assumeResult = CheckAssumeCompany(secretKey);
                if (Utils.IsError(assumeResult))
                {
                    return assumeResult;
                }

                //parse the company ID to a Guid
                Guid CompanyID = Guid.Empty;
                if (!Guid.TryParse(assumeResult, out CompanyID))
                {
                    return Utils.WrapError("The ID of the Company that you are trying to view is in the incorrect format");
                }

                #endregion

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {

                    var curSurveys = (from s in entity.Surveys
                                      join p in entity.Projects
                                      on s.ProjectID equals p.ID
                                      where p.ProjectCompany == CompanyID
                                      select new
                                      {
                                          ProjectID = p.ID,
                                          SurveyID = s.ID,
                                          s.SurveyTitle
                                      }).ToList();

                    if (curSurveys == null || curSurveys.Count() <= 0)
                    {
                        return "[]";
                    }

                    return Helper.SerializeToJavascriptOject(curSurveys);
                }
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        public string FilterActivityStream(string secretKey, string dateToViewFrom, string userID, string projectID, string surveyID)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);

                var username = CheckUserHasRight(secretKey, "ViewActivityStream");
                if (Utils.IsError(username))
                {
                    return username;
                }

                DateTime DateToViewFrom;
                if (!DateTime.TryParse(dateToViewFrom, out DateToViewFrom))
                {
                    return Utils.WrapError("Date to view from is not in the correct format");
                }

                //get the ID for the logged in user
                Guid LoggedInUserID = (Guid)Membership.GetUser(username).ProviderUserKey;

                //get the company that the user belongs to
                /*string companyID = GetUserCompanyID(secretKey);
                if (Utils.IsError(companyID))
                {
                    return companyID;
                }

                Guid CompanyID;
                if (!Guid.TryParse(companyID, out CompanyID))
                {
                    return Utils.WrapError("Company ID is not in the correct format");
                }*/

                Guid UserID = Guid.Empty;
                if (!string.IsNullOrWhiteSpace(userID))
                {
                    if (!Guid.TryParse(userID, out UserID))
                    {
                        return Utils.WrapError("User ID is not in the corrrect format");
                    }
                }
                Guid ProjectID = Guid.Empty;
                if (!string.IsNullOrWhiteSpace(projectID))
                {
                    if (!Guid.TryParse(projectID, out ProjectID))
                    {
                        return Utils.WrapError("Project ID is not in the corrrect format");
                    }
                }
                Guid SurveyID = Guid.Empty;
                if (!string.IsNullOrWhiteSpace(surveyID))
                {
                    if (!Guid.TryParse(surveyID, out SurveyID))
                    {
                        return Utils.WrapError("Survey ID is not in the corrrect format");
                    }
                }

                #region Check if the logged in user is assuming a company

                //check if the user is assuming a company
                var assumeResult = CheckAssumeCompany(secretKey);
                if (Utils.IsError(assumeResult))
                {
                    return assumeResult;
                }

                //parse the company ID to a Guid
                Guid CompanyID = Guid.Empty;
                if (!Guid.TryParse(assumeResult, out CompanyID))
                {
                    return Utils.WrapError("The ID of the Company that you are trying to view is in the incorrect format");
                }

                #endregion

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {

                    //execute the procedure
                    var activity = entity.FilterActivityStream(UserID, ProjectID, SurveyID, DateToViewFrom, CompanyID).ToList();
                    if (activity == null || activity.Count <= 0)
                    {
                        return "[]";
                    }

                    return Helper.SerializeToJavascriptOject(activity);
                }
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        #endregion

        #region Emails

        private enum EmailPurpose
        {
            NewTeamMember,
            NewProject,
            NewSurveyTeamMember,
            UpdateCompanyUserPackage,
            AddCompanyUserPackage,
            AddUser,
            UpdateUser,
            PasswordReset,
            ForgotMyPassword,
            RequestProjectDocuments,
            UpdateProject,
            RemoveProjectUser,
            NewUserSignUp,
            ResetMyPassword,
            GenerateInvoice,
            VerifiedEmailAddress,
            VerifyEmailRequest,
            WelcomeProjectTeam,
            NewUserSignUpSurveya,
            AuthorizeLogin
        }

        //send a welcome email to the new team member that was added to a project
        private string SendEmail(EmailPurpose purpose, string emailAddress, string companyID, string projectName, string requestingUserName, string password, string surveyTitle, string roleID, string roleName, string resetID, Attachment mailAttachment = null)
        {
            try
            {
                //get the details for the email
                var curDetails = GetCompanyDetailsForEmail(companyID);
                if (Utils.IsError(curDetails))
                {
                    return curDetails;
                }

                //get the company's logo
                string companyLogo = ConfigurationManager.AppSettings["emailImage"].ToString() + companyID;

                JObject userDetails = JObject.Parse(curDetails);
                string companyName = userDetails["CompanyName"] + "";
                //string companyPackageName = userDetails["PackageName"] + "";

                //setup details based on which email is being sent
                string baseEmail = Helper.RetrieveMailTemplate("EmailTemplate.html");
                string link = "";
                string contentEmail = "";
                string appName = "Surveya";
                string headerText = "";
                string subject = "";
                string verifyEmailLink = "";

                switch (purpose)
                {
                    case EmailPurpose.NewTeamMember:
                        link = ConfigurationManager.AppSettings["baseLinkPathLogin"].ToString();
                        contentEmail = Helper.RetrieveMailTemplate("NewProjectTeamMember.html");
                        headerText = "You have been added as a(n) " + roleName + " on the " + projectName + " Project";
                        subject = "Surveya: New Project - " + projectName;

                        //if there is a ID to verify the email
                        if (!resetID.Equals(""))
                        {
                            verifyEmailLink = "Please verify your email address: <a href='" + ConfigurationManager.AppSettings["baseLinkPathVerifyEmail"].ToString() + resetID + "'>" + ConfigurationManager.AppSettings["baseLinkPathVerifyEmail"].ToString() + resetID + "</a>. Please note that this link expires in 7 days.";
                        }
                        break;

                    case EmailPurpose.NewProject:
                        link = ConfigurationManager.AppSettings["baseLinkPathLogin"].ToString();
                        contentEmail = Helper.RetrieveMailTemplate("NewProject.html");
                        headerText = "You have been added as a(n) " + roleName + " on the " + projectName + " Project";
                        subject = "Surveya: New Project - " + projectName;

                        break;

                    case EmailPurpose.NewSurveyTeamMember:
                        link = ConfigurationManager.AppSettings["baseLinkPathLogin"].ToString();
                        contentEmail = Helper.RetrieveMailTemplate("NewSurveyTeamMember.html");
                        headerText = "You have been added as a(n) " + roleName + " on the " + surveyTitle + " Survey";
                        subject = "Surveya: New Survey - " + surveyTitle;
                        break;

                    case EmailPurpose.UpdateCompanyUserPackage:
                        link = ConfigurationManager.AppSettings["baseLinkPathLogin"].ToString();
                        contentEmail = Helper.RetrieveMailTemplate("UpdateCompanyUserPackage.html");
                        headerText = "Your account profile has been updated";
                        subject = "Surveya: Account Profile Updated";
                        break;

                    case EmailPurpose.AddCompanyUserPackage:
                        link = ConfigurationManager.AppSettings["baseLinkPathLogin"].ToString();
                        contentEmail = Helper.RetrieveMailTemplate("NewCompanyUserPackage.html");
                        headerText = "You have been added as a(n) " + roleName + " for " + companyName;
                        subject = "Welcome to Surveya";
                        break;

                    case EmailPurpose.AddUser:
                        link = ConfigurationManager.AppSettings["baseLinkPathLogin"].ToString();
                        contentEmail = Helper.RetrieveMailTemplate("NewUser.html");
                        headerText = "You have been added as a(n) " + roleName + " for " + companyName;
                        subject = "Welcome to Surveya";
                        verifyEmailLink = "Please verify your email address: <a href='" + ConfigurationManager.AppSettings["baseLinkPathVerifyEmail"].ToString() + resetID + "'>" + ConfigurationManager.AppSettings["baseLinkPathVerifyEmail"].ToString() + resetID + "</a>. Please note that this link expires in 7 days.";
                        break;

                    case EmailPurpose.UpdateUser:
                        link = ConfigurationManager.AppSettings["baseLinkPathProfile"].ToString();
                        contentEmail = Helper.RetrieveMailTemplate("UpdateUser.html");
                        headerText = "Your information has been updated";
                        subject = "Surveya: Profile Updated";
                        break;
                    case EmailPurpose.PasswordReset:
                        link = ConfigurationManager.AppSettings["baseLinkPathLogin"].ToString();
                        contentEmail = Helper.RetrieveMailTemplate("PasswordReset.html");
                        headerText = "Password Reset";
                        subject = "Surveya: Password Reset";
                        break;
                    case EmailPurpose.ForgotMyPassword:
                        link = ConfigurationManager.AppSettings["baseLinkPathForgotPassword"].ToString() + resetID;
                        contentEmail = Helper.RetrieveMailTemplate("ForgotPassword.html");
                        headerText = "Password Reset";
                        subject = "Surveya: Password Reset Request";
                        break;
                    case EmailPurpose.ResetMyPassword:
                        link = ConfigurationManager.AppSettings["baseLinkPathProfile"].ToString();
                        contentEmail = Helper.RetrieveMailTemplate("ResetPassword.html");
                        headerText = "Password Reset";
                        subject = "Surveya: Your password has been reset";
                        break;
                    case EmailPurpose.RequestProjectDocuments:
                        link = ConfigurationManager.AppSettings["baseLinkPathLogin"].ToString();
                        contentEmail = Helper.RetrieveMailTemplate("RequestProjectDocuments.html");
                        headerText = "Missing Project Documents";
                        subject = "Surveya: Missing Project Documents";
                        break;

                    case EmailPurpose.UpdateProject:
                        link = ConfigurationManager.AppSettings["baseLinkPathLogin"].ToString();
                        contentEmail = Helper.RetrieveMailTemplate("UpdateProject.html");
                        headerText = "Project Details were updated";
                        subject = "Surveya: Project Details Updated";
                        break;

                    case EmailPurpose.RemoveProjectUser:
                        link = ConfigurationManager.AppSettings["baseLinkPathLogin"].ToString();
                        contentEmail = Helper.RetrieveMailTemplate("RemoveProjectTeamMember.html");
                        headerText = "You have been removed as a(n) " + roleName + " on the " + projectName + " Project";
                        subject = "Surveya: Removed from Project - " + projectName;
                        break;
                    case EmailPurpose.NewUserSignUp:
                        link = ConfigurationManager.AppSettings["baseLinkPathPayment"].ToString();
                        contentEmail = Helper.RetrieveMailTemplate("NewUserSignUp.html");
                        headerText = "You have been added as the Account Owner for " + companyName;
                        subject = "Welcome to Surveya";
                        verifyEmailLink = "Please verify your email address: <a href='" + ConfigurationManager.AppSettings["baseLinkPathVerifyEmail"].ToString() + resetID + "'>" + ConfigurationManager.AppSettings["baseLinkPathVerifyEmail"].ToString() + resetID + "</a>. Please note that this link expires in 7 days.";
                        break;
                    case EmailPurpose.GenerateInvoice:
                        link = ConfigurationManager.AppSettings["baseLinkPathLogin"].ToString();
                        contentEmail = Helper.RetrieveMailTemplate("GenerateInvoice.html");
                        headerText = "An Invoice has been generated on your account";
                        subject = "Surveya: Invoice";
                        break;
                    case EmailPurpose.VerifiedEmailAddress:
                        contentEmail = Helper.RetrieveMailTemplate("VerifiedEmailAddress.html");
                        headerText = "Your email address has been verified";
                        subject = "Surveya: Email Verified";
                        break;
                    case EmailPurpose.VerifyEmailRequest:
                        contentEmail = Helper.RetrieveMailTemplate("VerifyEmailAddress.html");
                        headerText = "Please verify your email address";
                        subject = "Surveya: Verify Email Address";
                        verifyEmailLink = "Please verify your email address using this link <a href='" + ConfigurationManager.AppSettings["baseLinkPathVerifyEmail"].ToString() + resetID + "'>" + ConfigurationManager.AppSettings["baseLinkPathVerifyEmail"].ToString() + resetID + "</a>. Please note that this link expires in 7 days.";
                        break;
                    case EmailPurpose.AuthorizeLogin:
                        contentEmail = Helper.RetrieveMailTemplate("ValidateLoginAttempt.html");
                        headerText = "Please authorize login attempt";
                        subject = "Surveya: Authorize Login Attempt";
                        contentEmail = contentEmail.Replace("[CODE]", password);
                        contentEmail = contentEmail.Replace("[IPADDRESS]", resetID);
                        password = "";
                        break;
                    case EmailPurpose.WelcomeProjectTeam:
                        link = ConfigurationManager.AppSettings["baseLinkPathLogin"].ToString();
                        contentEmail = Helper.RetrieveMailTemplate("WelcomeProjectTeam.html");
                        headerText = "You have been added to the " + projectName + " Project";
                        subject = "Surveya: New Project - " + projectName;
                        break;
                    case EmailPurpose.NewUserSignUpSurveya:
                        baseEmail = Helper.RetrieveMailTemplate("EmailTemplate.html");
                        contentEmail = Helper.RetrieveMailTemplate("NewUserSignUpSurveya.html");
                        headerText = "A new account has been created";
                        subject = "New Account";
                        companyLogo = ConfigurationManager.AppSettings["defaultLogoPath"].ToString();
                        break;
                }

                DateTime CurrentDate = DateTime.Now;
                baseEmail = baseEmail.Replace("[Content]", contentEmail);
                baseEmail = baseEmail.Replace("[PrivacyPolicy]", ConfigurationManager.AppSettings["baseLinkPathPrivacyPolicy"].ToString());
                baseEmail = baseEmail.Replace("[PCIPOPIPolicyLink]", ConfigurationManager.AppSettings["baseLinkPathPCIPOPIPolicy"].ToString());
                baseEmail = baseEmail.Replace("[AppName]", appName);
                baseEmail = baseEmail.Replace("[HeaderText]", headerText);
                baseEmail = baseEmail.Replace("[ProjectName]", projectName);
                baseEmail = baseEmail.Replace("[EmailAddress]", emailAddress);
                baseEmail = baseEmail.Replace("[Username]", emailAddress);
                baseEmail = baseEmail.Replace("[Link]", link);
                baseEmail = baseEmail.Replace("[CompanyName]", companyName);
                baseEmail = baseEmail.Replace("[TheRequestingUser]", requestingUserName);
                baseEmail = baseEmail.Replace("[MaintenanceLink]", ConfigurationManager.AppSettings["baseLinkPathMaintenance"].ToString());
                baseEmail = baseEmail.Replace("[UsersLink]", ConfigurationManager.AppSettings["baseLinkPathAddCompanyUsers"].ToString());
                //baseEmail = baseEmail.Replace("[UserManualLink]", ConfigurationManager.AppSettings["baseLinkPathUserManual"].ToString());
                baseEmail = baseEmail.Replace("[VerifyEmailLink]", verifyEmailLink);
                baseEmail = baseEmail.Replace("[CurrentYear]", CurrentDate.Year + "");

                //check if there is a logo to display
                if (companyLogo != null && !string.IsNullOrWhiteSpace(companyLogo))
                {
                    baseEmail = baseEmail.Replace("[CompanyLogo]", "<img src=" + companyLogo + " title=" + companyName + " style='display: inline-block; vertical-align: middle;' height='60px' /><br />");
                }
                else
                {
                    baseEmail = baseEmail.Replace("[CompanyLogo]", "");
                }
                //baseEmail = baseEmail.Replace("[CompanyLogo]", companyLogo);
                baseEmail = baseEmail.Replace("[SurveyaLogo]", surveyaThumbLogo);
                baseEmail = baseEmail.Replace("[SurveyName]", surveyTitle);

                //check if the user should not receive the PCI/POPI Links, remove the link from the email template
                if (!PCIPOPIEmailRoles.Contains(roleID))
                {
                    //get the starting and ending indexes of the policy text
                    int initialIndex = baseEmail.IndexOf("[PCIPOPIPolicy]");
                    int endIndex = baseEmail.IndexOf("[/PCIPOPIPolicy]");

                    if (initialIndex > 0)
                    {
                        //calculate the length of the text to remove
                        int length = (endIndex + 17) - initialIndex;

                        //get the text to remove
                        string stringToReplace = baseEmail.Substring(initialIndex, length);

                        //replace the text with ""
                        baseEmail = baseEmail.Replace(stringToReplace, "");
                    }


                }
                //if the person is supposed to receive the email, only remove the tags 
                else
                {
                    //get the starting and ending indexes of the policy text
                    int initialIndex = baseEmail.IndexOf("[PCIPOPIPolicy]");
                    int endIndex = baseEmail.IndexOf("[/PCIPOPIPolicy]");

                    if (initialIndex > 0)
                    {
                        //get the text to remove
                        string stringToReplace1 = baseEmail.Substring(initialIndex, 15);
                        //get the text to remove
                        string stringToReplace2 = baseEmail.Substring(endIndex, 16);

                        //replace the text with ""
                        baseEmail = baseEmail.Replace(stringToReplace1, "");
                        //replace the text with ""
                        baseEmail = baseEmail.Replace(stringToReplace2, "");
                    }
                }

                //check if the password was sent and display appropriate message
                if (string.IsNullOrWhiteSpace(password))
                {
                    baseEmail = baseEmail.Replace("[Password]", "The password you chose, use forgot password if you do not remember it");
                }
                else
                {
                    baseEmail = baseEmail.Replace("[Password]", password);
                }

                //send the email
                string sendmail = Helper.SendMail(emailAddress, subject, baseEmail, true, null, mailAttachment);

                //if there were errors sending the email
                if (Utils.IsError(sendmail))
                {
                    return Utils.WrapError("The email could not be sent. Please try again later.");
                }

                dynamic returnItem = new JObject();
                returnItem.Status = "Success";
                return returnItem.ToString();

            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        //get the users details for the email
        private string GetCompanyDetailsForEmail(string companyID)
        {
            try
            {
                Guid CompanyID;
                if (!Guid.TryParse(companyID, out CompanyID))
                {
                    return Utils.WrapError("Company ID is not in the correct format");
                }

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    //get the package that the company is on
                    //get the company details
                    var curPackage = (from cp in entity.CompanyPackages
                                      join c in entity.Companies
                                      on cp.CompanyID equals c.ID
                                      where cp.CompanyID == CompanyID
                                      select new
                                      {
                                          c.CompanyName
                                      }).FirstOrDefault();

                    if (curPackage == null)
                    {
                        return Utils.WrapError("Company package not found");
                    }

                    dynamic returnItem = new JObject();
                    returnItem.CompanyName = curPackage.CompanyName;
                    return returnItem.ToString();
                }

            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }

        }

        #endregion

        #region Payments and Invoices

        //capture payment and package
        public string CompletePurchase(string secretKey, string companyPackageID, string dateStart, string paymentMethod)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                companyPackageID = TrimIfNotNull(companyPackageID);

                //ensure that the user is valid
                var username = CheckUserHasRight(secretKey, "Payment");
                if (Utils.IsError(username))
                {
                    return username;
                }

                //convert the id received
                Guid CompanyPackageID;
                if (!Guid.TryParse(companyPackageID, out CompanyPackageID))
                {
                    return Utils.WrapError("Company Package ID is not in the correct format");
                }

                DateTime DateStart;
                if (!DateTime.TryParse(dateStart, out DateStart))
                {
                    return Utils.WrapError("Date Start is not in the correct format");
                }

                if (string.IsNullOrWhiteSpace(paymentMethod))
                {
                    return Utils.WrapError("Please provide a payment method: EFT or CC");
                }

                if (!paymentMethod.Equals("CC") && !paymentMethod.Equals("EFT"))
                {
                    return Utils.WrapError("Please provide a payment method: EFT or CC");
                }

                Guid LoggedInUserID = (Guid)Membership.GetUser(username).ProviderUserKey;

                #region Check if the logged in user is assuming a company

                //check if the user is assuming a company
                var assumeResult = CheckAssumeCompany(secretKey);
                if (Utils.IsError(assumeResult))
                {
                    return assumeResult;
                }

                //parse the company ID to a Guid
                Guid CompanyID = Guid.Empty;
                if (!Guid.TryParse(assumeResult, out CompanyID))
                {
                    return Utils.WrapError("The ID of the Company that you are trying to view is in the incorrect format");
                }

                #endregion
                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    /*var curUser = (from u in entity.aspnet_Membership
                                   join cu in entity.CompanyUsers
                                   on u.UserId equals cu.UserID
                                   where u.UserId == LoggedInUserID && cu.CompanyID == CompanyID
                                   select u).FirstOrDefault();*/

                    // the companies package
                    var curCompanyPackage = (from cp in entity.CompanyPackages
                                             where cp.ID == CompanyPackageID && cp.CompanyID == CompanyID
                                             select cp).FirstOrDefault();

                    if (curCompanyPackage == null)
                    {
                        return Utils.WrapError("Your package could not be found");
                    }

                    var curInvoice = (from i in entity.Invoices
                                      where i.CompanyPackageID == curCompanyPackage.ID && i.CompanyID == CompanyID
                                      select i).FirstOrDefault();

                    if (curInvoice == null)
                    {
                        return Utils.WrapError("An invoice has not been generated for this purchase. Please ensure that you checkout your cart");
                    }

                    //the original package signed up for
                    var curPackage = (from p in entity.Packages
                                      where p.ID == curCompanyPackage.PackageID
                                      select p).FirstOrDefault();

                    if (curPackage == null)
                    {
                        return Utils.WrapError("Package could not be found");
                    }

                    //get the features for the selected package from the cart
                    PackageFeaturesResult pfResult = GetCartPackageFeatures(curPackage.ID + "", curCompanyPackage.ID + "");
                    if (pfResult.IsError)
                    {
                        return Utils.WrapError(pfResult.ErrorMessage);
                    }

                    //get the features returned for the package
                    ArrayList OptionalFeatures = pfResult.OptionalFeatures;
                    ArrayList MandatoryFeatures = pfResult.MandatoryFeatures;


                    //set defaults for the features
                    bool Summing = false;
                    bool Piping = false;
                    bool GeoServices = false;
                    bool Signatures = false;
                    bool PhotoCamera = false;
                    bool WhiteLabelling = false;
                    bool PDF = false;
                    bool CSV = false;
                    bool Excel = false;
                    bool BasicReporting = false;
                    bool AdvancedReporting = false;
                    bool UniqueID = false;

                    //cycle through all the optional features selected by the user
                    //if there are extra features selected
                    if (OptionalFeatures != null && OptionalFeatures.Count > 0)
                    {
                        foreach (PackageFeatureDetails feature in OptionalFeatures)
                        {
                            //switch through the names of the features, if the optional feature matches one of these names,
                            //set the feature to true
                            switch (feature.Name)
                            {

                                case "Summing":
                                    Summing = true;
                                    break;

                                case "Piping":
                                    Piping = true;
                                    break;

                                case "GeoServices":
                                    GeoServices = true;
                                    break;

                                case "Excel":
                                    Excel = true;
                                    break;

                                case "AdvancedReporting":
                                    AdvancedReporting = true;
                                    break;

                                case "PDF":
                                    PDF = true;
                                    break;

                                case "CSV":
                                    CSV = true;
                                    break;

                                case "WhiteLabelling":
                                    WhiteLabelling = true;
                                    break;

                                case "PhotoCamera":
                                    PhotoCamera = true;
                                    break;

                                case "BasicReporting":
                                    BasicReporting = true;
                                    break;

                                case "Signatures":
                                    Signatures = true;
                                    break;

                                case "UniqueID":
                                    UniqueID = true;
                                    break;
                            }
                        }
                    }


                    //cycle through all the mandatory features for the package
                    if (MandatoryFeatures != null && MandatoryFeatures.Count > 0)
                    {

                        foreach (PackageFeatureDetails feature in MandatoryFeatures)
                        {
                            //switch through the names of the features, if the optional feature matches one of these names,
                            //set the feature to true
                            switch (feature.Name)
                            {

                                case "Summing":
                                    Summing = true;
                                    break;

                                case "Piping":
                                    Piping = true;
                                    break;

                                case "GeoServices":
                                    GeoServices = true;
                                    break;

                                case "Excel":
                                    Excel = true;
                                    break;

                                case "AdvancedReporting":
                                    AdvancedReporting = true;
                                    break;

                                case "PDF":
                                    PDF = true;
                                    break;

                                case "CSV":
                                    CSV = true;
                                    break;

                                case "WhiteLabelling":
                                    WhiteLabelling = true;
                                    break;

                                case "PhotoCamera":
                                    PhotoCamera = true;
                                    break;

                                case "BasicReporting":
                                    BasicReporting = true;
                                    break;

                                case "Signatures":
                                    Signatures = true;
                                    break;

                                case "UniqueID":
                                    UniqueID = true;
                                    break;
                            }
                        }
                    }

                    //calculate the expiry date of the package
                    DateTime CurDate = DateTime.Now;

                    //update the package that the company is on
                    curCompanyPackage.IsCompleted = true;

                    curCompanyPackage.DateUpdated = CurDate;
                    curCompanyPackage.ActivatedBy = null;
                    curCompanyPackage.PaymentType = paymentMethod;
                    curCompanyPackage.NumberOfSurveys = curPackage.NumberOfSurveys;
                    curCompanyPackage.NumberOfQuestions = curPackage.NumberOfQuestions;
                    curCompanyPackage.NumberOfUsers = curPackage.NumberOfUsers;
                    curCompanyPackage.NumberOfResponses = curPackage.NumberOfResponses;
                    curCompanyPackage.PackageName = curPackage.PackageName;
                    curCompanyPackage.Description = curPackage.Description;
                    curCompanyPackage.NumberOfProjects = curPackage.NumberOfProjects;
                    curCompanyPackage.Summing = Summing;
                    curCompanyPackage.Piping = Piping;
                    curCompanyPackage.GeoServices = GeoServices;
                    curCompanyPackage.Signatures = Signatures;
                    curCompanyPackage.PhotoCamera = PhotoCamera;
                    curCompanyPackage.WhiteLabelling = WhiteLabelling;
                    curCompanyPackage.PDF = PDF;
                    curCompanyPackage.CSV = CSV;
                    curCompanyPackage.Excel = Excel;
                    curCompanyPackage.BasicReporting = BasicReporting;
                    curCompanyPackage.AdvancedReporting = AdvancedReporting;
                    curCompanyPackage.UniqueID = UniqueID;
                    curCompanyPackage.PaymentStatus = "Payment Started";
                    curCompanyPackage.PaymentErrorStatus = "Payment Started";

                    //get the price and discount amounts
                    decimal PackagePrice = curCompanyPackage.Price.Value;
                    decimal OptionalFeaturesPrice = curCompanyPackage.OptionalFeaturesPrice.HasValue ? curCompanyPackage.OptionalFeaturesPrice.Value : 0;
                    decimal StartingPrice = curCompanyPackage.PackageStartingPrice.HasValue ? curCompanyPackage.PackageStartingPrice.Value : 0;

                    decimal Discount = 0;
                    if (curCompanyPackage.HasDiscount.Value && curCompanyPackage.DiscountValue.Value > 0)
                    {
                        Discount = curCompanyPackage.DiscountValue.Value;
                    }

                    decimal FinalPrice = PackagePrice - Discount;

                    //if the package is free update the status of the company package
                    if (FinalPrice <= 0)
                    {
                        curCompanyPackage.PaymentStatus = "Payment Successful";
                        curCompanyPackage.PaymentErrorStatus = "Payment Successful";
                        curCompanyPackage.PaymentPending = false;
                        curCompanyPackage.IsActive = true;
                        curCompanyPackage.DateActivated = CurDate;
                    }

                    entity.CompanyPackages.Add(curCompanyPackage);
                    entity.Entry(curCompanyPackage).State = EntityState.Modified;

                    //if the package is free or the payment method is EFT
                    if (FinalPrice <= 0 || paymentMethod.Equals("EFT"))
                    {
                        //get the cart for the users package, this cart contains all optional features selected by the user
                        var curCart = (from c in entity.CompanyCarts
                                       where c.CompanyPackageID == CompanyPackageID
                                       select c).ToList();

                        //remove the details from the cart,if there are any
                        if (curCart != null && curCart.Count > 0)
                        {
                            entity.CompanyCarts.RemoveRange(curCart);
                        }

                    }
                    entity.SaveChanges();

                    //if its free, save the payment
                    if (FinalPrice <= 0)
                    {
                        //save the payment
                        SavePayment(LoggedInUserID + "", curCompanyPackage.ID + "", CurDate + "", "0", paymentMethod);
                    }

                    dynamic returnItem = new JObject();
                    returnItem.Status = "Success";
                    returnItem.TotalCost = FinalPrice;
                    returnItem.StartingPrice = StartingPrice;
                    returnItem.OptionalFeaturesPrice = OptionalFeaturesPrice;
                    returnItem.Discount = Discount;
                    returnItem.InvoiceID = curInvoice.ID;
                    return returnItem.ToString();

                }
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        //generate an invoice
        public string GenerateInvoice(string secretKey, string companyPackageID, string numberMonthsSignedUpFor)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                companyPackageID = TrimIfNotNull(companyPackageID);
                numberMonthsSignedUpFor = TrimIfNotNull(numberMonthsSignedUpFor);

                //ensure that the user is valid
                var username = CheckUserHasRight(secretKey, "Payment");
                if (Utils.IsError(username))
                {
                    return username;
                }

                //convert the id received
                Guid CompanyPackageID;
                if (!Guid.TryParse(companyPackageID, out CompanyPackageID))
                {
                    return Utils.WrapError("Company Package ID is not in the correct format");
                }

                /*Int32 NumberMonthsSignedUpFor;
                if (!Int32.TryParse(numberMonthsSignedUpFor, out NumberMonthsSignedUpFor))
                {
                    return Utils.WrapError("Please ensure that you enter the number of months you are signing up for");
                }

                if (NumberMonthsSignedUpFor <= 0)
                {
                    return Utils.WrapError("Please ensure that you sign up for 1 or more months");
                }*/

                #region Check if the logged in user is assuming a company

                //check if the user is assuming a company
                var assumeResult = CheckAssumeCompany(secretKey);
                if (Utils.IsError(assumeResult))
                {
                    return assumeResult;
                }

                //parse the company ID to a Guid
                Guid CompanyID = Guid.Empty;
                if (!Guid.TryParse(assumeResult, out CompanyID))
                {
                    return Utils.WrapError("The ID of the Company that you are trying to view is in the incorrect format");
                }

                #endregion

                Guid LoggedInUserID = (Guid)Membership.GetUser(username).ProviderUserKey;

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    //the the company the user belongs to
                    /*var userCompany = (from c in entity.Companies
                                       join cu in entity.CompanyUsers
                                           on c.ID equals cu.CompanyID.Value
                                       where cu.UserID == LoggedInUserID
                                       select c).FirstOrDefault();

                    if (userCompany == null)
                    {
                        return Utils.WrapError("The users company could not be found");
                    }*/

                    var curCompany = (from c in entity.Companies
                                      where c.ID == CompanyID
                                      select c).FirstOrDefault();

                    if (curCompany == null)
                    {
                        return Utils.WrapError("Your company cannot be found");
                    }

                    // the companies package
                    var curCompanyPackage = (from cp in entity.CompanyPackages
                                             where cp.CompanyID == CompanyID &&
                                             cp.ID == CompanyPackageID
                                             select cp).FirstOrDefault();

                    if (curCompanyPackage == null)
                    {
                        return Utils.WrapError("Your package could not be found");
                    }

                    //the original package signed up for
                    var curPackage = (from p in entity.Packages
                                      where p.ID == curCompanyPackage.PackageID
                                      select p).FirstOrDefault();

                    if (curPackage == null)
                    {
                        return Utils.WrapError("Package could not be found");
                    }

                    if (!curPackage.IsActive.HasValue || (curPackage.IsActive.HasValue && !curPackage.IsActive.Value))
                    {
                        return Utils.WrapError("This package is no longer available. Please signup for another package");
                    }

                    //if the package has been updated after the user added the package to their cart
                    //clear the cart and give error
                    if (curPackage.DateUpdated > curCompanyPackage.DateSignedUp)
                    {
                        //get the cart for the users package, this cart contains all optional features selected by the user
                        /*var curCart = (from c in entity.CompanyCarts
                                       where c.CompanyPackageID == CompanyPackageID
                                       select c).ToList();

                        //remove the details from the cart,if there are any
                        if (curCart != null && curCart.Count > 0)
                        {
                            entity.CompanyCarts.RemoveRange(curCart);
                        }
                        entity.SaveChanges();*/

                        //call the method to clear the cart and company package
                        var result = ClearCartForCompanyPackage(curPackage.ID + "");
                        if (Utils.IsError(result))
                        {
                            Helper.LogMessage("GenerateInvoie() ClearCartForCompanyPackage: " + result);
                        }

                        return Utils.WrapError("This package has changed since you signed up for it. Please signup for a new package");
                    }

                    //get the features for the selected package from the cart
                    PackageFeaturesResult pfResult = GetCartPackageFeatures(curPackage.ID + "", curCompanyPackage.ID + "");
                    if (pfResult.IsError)
                    {
                        return Utils.WrapError(pfResult.ErrorMessage);
                    }

                    //get the features returned for the package
                    ArrayList OptionalFeatures = pfResult.OptionalFeatures;
                    ArrayList MandatoryFeatures = pfResult.MandatoryFeatures;


                    /* var optionalFeatures = (from c in entity.CompanyCarts
                                             join cp in entity.CompanyPackages
                                             on c.CompanyPackageID equals cp.ID
                                             join pf in entity.PackageFeatures
                                             on new { c.FeatureID, cp.PackageID } equals new { pf.FeatureID, pf.PackageID }
                                             join f in entity.Features
                                             on pf.FeatureID equals f.ID
                                             where c.CompanyPackageID == CompanyPackageID && pf.OptionalFeature == true
                                             select new
                                             {
                                                 CartID = c.ID,
                                                 FeatureID = c.FeatureID,
                                                 pf.OptionalFeature,
                                                 pf.OptionalPrice,
                                                 f.FriendlyName
                                             }).ToList();*/

                    //calculate the expiry date of the package
                    //DateTime SignUpDate = DateTime.Now;
                    //DateTime ExpiryDate = SignUpDate.AddMonths(curCompanyPackage.NumberMonthsSignedUpFor.Value);

                    DateTime CurDate = DateTime.Now;

                    //create a new invoice for the signup
                    var newInvoice = new Invoice();
                    Guid InvoiceID = Guid.NewGuid();
                    newInvoice.ID = InvoiceID;
                    newInvoice.InvoiceDate = CurDate;
                    newInvoice.CompanyID = CompanyID;
                    newInvoice.CompanyName = curCompany.CompanyName;
                    newInvoice.RegistrationNumber = curCompany.RegistrationNumber;
                    newInvoice.VatNumber = curCompany.VatNumber;
                    newInvoice.PhysicalAddress = curCompany.PhysicalAddress;
                    newInvoice.PackageID = curPackage.ID;
                    newInvoice.PackageName = curPackage.PackageName;
                    newInvoice.CompanyPackageID = curCompanyPackage.ID;
                    newInvoice.PurchaseOrderNumber = curCompanyPackage.PurchaseOrderNumber;
                    entity.Invoices.Add(newInvoice);

                    string initialPackage = curPackage.PackageName + " package";

                    //retrieve all mandatory features
                    /*var curFeatures = (from pf in entity.PackageFeatures
                                       join f in entity.Features
                                       on pf.FeatureID equals f.ID
                                       where pf.PackageID == curPackage.ID && pf.OptionalFeature == false
                                       select new
                                       {
                                           pf.FeatureID,
                                           f.FriendlyName
                                       }).ToList();*/

                    //if there are mandatory features included in the package
                    if (MandatoryFeatures != null && MandatoryFeatures.Count > 0)
                    {
                        initialPackage = initialPackage + "  including features:";

                        //append them to the initial package line item
                        foreach (PackageFeatureDetails f in MandatoryFeatures)
                        {
                            if (!string.IsNullOrWhiteSpace(f.FriendlyName))
                            {
                                initialPackage = initialPackage + " " + f.FriendlyName;
                            }
                        }
                    }

                    //determine the starting price of the package
                    decimal StartingPrice = curCompanyPackage.PackageStartingPrice.HasValue ? curCompanyPackage.PackageStartingPrice.Value : curPackage.Price.Value;

                    //calculated optional features price
                    decimal OptionalFeaturesPrice = 0;

                    //determine the discount of the package
                    decimal Discount = 0;

                    //create the initial line item for the package and its mandatory features
                    var newLineItem = new InvoiceLineItem();
                    newLineItem.ID = Guid.NewGuid();
                    newLineItem.LineItem = initialPackage;
                    newLineItem.Quantity = curCompanyPackage.NumberMonthsSignedUpFor.HasValue ? curCompanyPackage.NumberMonthsSignedUpFor.Value : 1;
                    newLineItem.Price = StartingPrice;
                    newLineItem.InvoiceID = InvoiceID;
                    entity.InvoiceLineItems.Add(newLineItem);

                    //cycle through all the optional features selected by the user
                    //if there are extra features selected
                    if (OptionalFeatures != null && OptionalFeatures.Count > 0)
                    {
                        //append each optional feature
                        foreach (PackageFeatureDetails f in OptionalFeatures)
                        {
                            string featureItem = "";
                            if (!string.IsNullOrWhiteSpace(f.FriendlyName))
                            {
                                featureItem = "Optional Feature Selected : " + f.FriendlyName;
                            }

                            OptionalFeaturesPrice += f.OptionalPrice;

                            var newFeatureLineItem = new InvoiceLineItem();
                            Guid ItemID = Guid.NewGuid();

                            newFeatureLineItem.ID = ItemID;
                            newFeatureLineItem.LineItem = featureItem;
                            newFeatureLineItem.Quantity = curCompanyPackage.NumberMonthsSignedUpFor.HasValue ? curCompanyPackage.NumberMonthsSignedUpFor.Value : 1;
                            newFeatureLineItem.InvoiceID = InvoiceID;
                            newFeatureLineItem.Price = f.OptionalPrice;
                            entity.InvoiceLineItems.Add(newFeatureLineItem);

                        }
                    }


                    //if the package has discount
                    if (curCompanyPackage.HasDiscount.Value && curCompanyPackage.DiscountValue.Value > 0)
                    {
                        //discount is saved as a negative value
                        Discount = (curCompanyPackage.DiscountValue.Value * -1);

                        //create the line item for the discount
                        var newDiscountLineItem = new InvoiceLineItem();
                        newDiscountLineItem.ID = Guid.NewGuid();
                        newDiscountLineItem.LineItem = curCompanyPackage.DiscountDescription == null ? "Discount" : curCompanyPackage.DiscountDescription;
                        newDiscountLineItem.Quantity = 1;
                        newDiscountLineItem.Price = Discount;
                        newDiscountLineItem.InvoiceID = InvoiceID;
                        entity.InvoiceLineItems.Add(newDiscountLineItem);

                    }

                    //calculate the initial price of the package
                    Decimal Price = (StartingPrice + OptionalFeaturesPrice) * (curCompanyPackage.NumberMonthsSignedUpFor.HasValue ? curCompanyPackage.NumberMonthsSignedUpFor.Value : 1);

                    entity.SaveChanges();

                    //calculate the final price of the package
                    decimal FinalPrice = Price + Discount;

                    /****** INCLUDE THE INVOICE IN THE EMAIL *****/

                    var curInvoice = (from i in entity.Invoices
                                      where i.ID == InvoiceID
                                      select i).FirstOrDefault();

                    if (curInvoice == null)
                    {
                        return Utils.WrapError("The Invoice you are trying to email could not be found");
                    }

                    var reportViewerUrl = ConfigurationManager.AppSettings["baseLinkPathReportViewer"].ToString();
                    HttpWebRequest request = WebRequest.Create(reportViewerUrl + "?report=PackageInvoice&type=pdf&id=" + InvoiceID) as HttpWebRequest;
                    HttpWebResponse response = request.GetResponse() as HttpWebResponse;
                    Stream stream = response.GetResponseStream();
                    Attachment attach = new Attachment(stream, "Invoice " + curInvoice.InvoiceNumber + ".PDF");

                    //get the correct email address to use for billing
                    string BillEmail = GetBillingEmailAddress(CompanyID + "");
                    if (Utils.IsError(BillEmail))
                    {
                        return BillEmail;
                    }

                    //Send the email to the correct address
                    SendEmail(EmailPurpose.GenerateInvoice, BillEmail, CompanyID + "", "", "", "", "", "", "", "", attach);

                    dynamic returnItem = new JObject();
                    returnItem.Status = "Success";
                    returnItem.TotalCost = FinalPrice;
                    returnItem.StartingPrice = StartingPrice;
                    returnItem.OptionalFeaturesPrice = OptionalFeaturesPrice;
                    returnItem.Discount = Discount;
                    returnItem.InvoiceID = InvoiceID;
                    return returnItem.ToString();

                }
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                if (ex.InnerException != null)
                {
                    Helper.LogError("Inner exception", ex.InnerException.ToString());
                }
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                if (ee.InnerException != null)
                {
                    Helper.LogError("Inner exception", ee.InnerException.ToString());
                }
                return Utils.WrapError(ee.Message);
            }
        }

        //view all my invoices
        public string ViewMyInvoices(string secretKey)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);

                //ensure that the user is valid
                var username = CheckUserHasRight(secretKey, "Payment");
                if (Utils.IsError(username))
                {
                    return username;
                }

                #region Check if the logged in user is assuming a company

                //check if the user is assuming a company
                var assumeResult = CheckAssumeCompany(secretKey);
                if (Utils.IsError(assumeResult))
                {
                    return assumeResult;
                }

                //parse the company ID to a Guid
                Guid CompanyID = Guid.Empty;
                if (!Guid.TryParse(assumeResult, out CompanyID))
                {
                    return Utils.WrapError("The ID of the Company that you are trying to view is in the incorrect format");
                }

                #endregion

                Guid LoggedInUserID = (Guid)Membership.GetUser(username).ProviderUserKey;

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    //the the company the user belongs to
                    /*var userCompany = (from c in entity.Companies
                                       join cu in entity.CompanyUsers
                                           on c.ID equals cu.CompanyID
                                       where cu.UserID == LoggedInUserID
                                       select c).FirstOrDefault();

                    if (userCompany == null)
                    {
                        return Utils.WrapError("The users company could not be found");
                    }*/

                    var curCompany = (from c in entity.Companies
                                      where c.ID == CompanyID
                                      select c).FirstOrDefault();

                    if (curCompany == null)
                    {
                        return Utils.WrapError("Your company cannot be found");
                    }

                    var curInvoices = (from i in entity.Invoices
                                       where i.CompanyID == CompanyID
                                       orderby i.InvoiceDate descending
                                       select new
                                       {
                                           i.ID,
                                           i.InvoiceNumber,
                                           i.InvoiceDate,
                                           i.PackageName
                                       }).ToList();

                    if (curInvoices == null || curInvoices.Count() <= 0)
                    {
                        return "[]";
                    }

                    return Helper.SerializeToJavascriptOject(curInvoices);

                }
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        //validate the payment for the package
        public string ValidatePayment(string secretKey, string companyPackageID)
        {
            try
            {
                secretKey = TrimIfNotNull(secretKey);
                companyPackageID = TrimIfNotNull(companyPackageID);

                //ensure that the user is valid
                var username = CheckUserHasRight(secretKey, "Payment");
                if (Utils.IsError(username))
                {
                    return username;
                }

                Guid CompanyPackageID;
                if (!Guid.TryParse(companyPackageID, out CompanyPackageID))
                {
                    return Utils.WrapError("Company Package ID is not in the correct format");
                }

                //get the logged in user
                Guid UserID = (Guid)Membership.GetUser(username).ProviderUserKey;

                #region Check if the logged in user is assuming a company

                //check if the user is assuming a company
                var assumeResult = CheckAssumeCompany(secretKey);
                if (Utils.IsError(assumeResult))
                {
                    return assumeResult;
                }

                //parse the company ID to a Guid
                Guid CompanyID = Guid.Empty;
                if (!Guid.TryParse(assumeResult, out CompanyID))
                {
                    return Utils.WrapError("The ID of the Company that you are trying to view is in the incorrect format");
                }

                #endregion

                //store any error that can occur
                string error = "";

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    //check the received package id
                    var curPackage = (from p in entity.CompanyPackages
                                      where p.ID == CompanyPackageID && p.CompanyID == CompanyID
                                      select p).FirstOrDefault();

                    if (curPackage == null)
                    {
                        error = "The package you are trying to validate could not be found";
                        curPackage.PaymentErrorStatus = error;

                        entity.CompanyPackages.Add(curPackage);
                        entity.Entry(curPackage).State = EntityState.Modified;
                        entity.SaveChanges();

                        return Utils.WrapError(error);
                    }

                    /*var curComp = (from c in entity.Companies
                                   where c.ID == curPackage.CompanyID
                                   select c).FirstOrDefault();

                    if (curComp == null)
                    {
                        error = "The company that this package is assigned to cannot be found";
                        curPackage.PaymentErrorStatus = error;

                        entity.CompanyPackages.Add(curPackage);
                        entity.Entry(curPackage).State = EntityState.Modified;
                        entity.SaveChanges();

                        return Utils.WrapError(error);
                    }*/

                    if (curPackage.PaymentStatus == "Payment Successful")
                    {
                        error = "This package has already been paid for";
                        curPackage.PaymentErrorStatus = error;

                        entity.CompanyPackages.Add(curPackage);
                        entity.Entry(curPackage).State = EntityState.Modified;
                        entity.SaveChanges();

                        return Utils.WrapError(error);
                    }

                    curPackage.PaymentStatus = "Payment Started";
                    curPackage.PaymentErrorStatus = "Payment Started";

                    entity.CompanyPackages.Add(curPackage);
                    entity.Entry(curPackage).State = EntityState.Modified;

                    entity.SaveChanges();

                    /*string BillEmail = "";

                    //if there is a bill email, use it
                    if (curComp.billEmail != null)
                    {
                        BillEmail = curComp.billEmail;
                    }

                    //if there is a alt email, use it
                    else if (curComp.alternateBillEmail != null)
                    {
                        BillEmail = curComp.alternateBillEmail;
                    }
                    
                    //if there are no bill email / alt bill email specified, send to the owner
                    else
                    {
                        
                        //get the company owner role
                        var compOwner = (from r in entity.Roles
                                         where r.LoweredRoleName == "company owner"
                                         select r).FirstOrDefault();

                        if (compOwner == null)
                        {
                            return Utils.WrapError("The role company owner could not be found, the invoice could not be emailed");
                        }

                        //get the details for the company owner
                        var companyOwnerEmail = (from cu in entity.CompanyUsers
                                                 join u in entity.aspnet_Membership
                                                 on cu.UserID equals u.UserId
                                                 where cu.CompanyID == curComp.ID && cu.RoleID == compOwner.RoleId
                                                 select u.Email).FirstOrDefault();

                        if (companyOwnerEmail == null)
                        {
                            return Utils.WrapError("The email address for the company owner could not be found, there is no email available to use");
                        }

                        BillEmail = companyOwnerEmail;
                    }
                    */

                    //get the correct email address to use for billing
                    string BillEmail = GetBillingEmailAddress(curPackage.CompanyID + "");
                    if (Utils.IsError(BillEmail))
                    {
                        return BillEmail;
                    }

                    var Price = curPackage.Price.Value;
                    decimal Discount = 0;
                    if (curPackage.HasDiscount.Value && curPackage.DiscountValue.Value > 0)
                    {
                        Discount = curPackage.DiscountValue.Value;
                    }

                    var FinalPrice = Price - Discount;

                    dynamic returnItem = new JObject();
                    returnItem.Status = "Success";
                    returnItem.BillEmail = BillEmail;
                    returnItem.PurchaseAmount = FinalPrice;
                    returnItem.PaymentStatus = "Payment Started";
                    returnItem.Locale = "en-za";
                    returnItem.Country = "ZAF";
                    returnItem.Currency = "ZAR";
                    return returnItem.ToString();
                }
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        //get the email address for the specified company that invoices / receipts should be sent to
        private string GetBillingEmailAddress(string companyID)
        {
            try
            {
                companyID = TrimIfNotNull(companyID);

                Guid CompanyID;
                if (!Guid.TryParse(companyID, out CompanyID))
                {
                    return Utils.WrapError("Company ID is not in the correct format");
                }

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    var curComp = (from c in entity.Companies
                                   where c.ID == CompanyID
                                   select c).FirstOrDefault();

                    if (curComp == null)
                    {
                        return Utils.WrapError("Company could not be found");
                    }

                    string BillEmail = "";

                    //if there is a bill email, use it
                    if (curComp.billEmail != null)
                    {
                        BillEmail = curComp.billEmail;
                    }

                    //if there is a alt email, use it
                    else if (curComp.alternateBillEmail != null)
                    {
                        BillEmail = curComp.alternateBillEmail;
                    }

                    //if there are no bill email / alt bill email specified, send to the owner
                    else
                    {

                        //get the company owner role
                        var compOwner = (from r in entity.Roles
                                         where r.LoweredRoleName == "company owner"
                                         select r).FirstOrDefault();

                        if (compOwner == null)
                        {
                            return Utils.WrapError("The role company owner could not be found, the invoice could not be emailed");
                        }

                        //get the details for the company owner
                        var companyOwnerEmail = (from cu in entity.CompanyUsers
                                                 join u in entity.aspnet_Membership
                                                 on cu.UserID equals u.UserId
                                                 where cu.CompanyID == curComp.ID && cu.RoleID == compOwner.RoleId
                                                 select u.Email).FirstOrDefault();

                        if (companyOwnerEmail == null)
                        {
                            return Utils.WrapError("The email address for the company owner could not be found, there is no email available to use");
                        }

                        BillEmail = companyOwnerEmail;
                    }

                    return BillEmail;
                }
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        //capture payment on a package that the company had already made a payment on
        public string CompletePurchaseOnPendingPackage(string secretKey, string companyPackageID, string dateStart, string paymentMethod)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                companyPackageID = TrimIfNotNull(companyPackageID);
                dateStart = TrimIfNotNull(dateStart);
                paymentMethod = TrimIfNotNull(paymentMethod);

                //ensure that the user is valid
                var username = CheckUserHasRight(secretKey, "Payment");
                if (Utils.IsError(username))
                {
                    return username;
                }

                //convert the id received
                Guid CompanyPackageID;
                if (!Guid.TryParse(companyPackageID, out CompanyPackageID))
                {
                    return Utils.WrapError("Company Package ID is not in the correct format");
                }

                DateTime DateStart;
                if (!DateTime.TryParse(dateStart, out DateStart))
                {
                    return Utils.WrapError("Date Start is not in the correct format");
                }

                if (string.IsNullOrWhiteSpace(paymentMethod))
                {
                    return Utils.WrapError("Please provide a payment method: EFT or CC");
                }

                if (!paymentMethod.Equals("CC") && !paymentMethod.Equals("EFT"))
                {
                    return Utils.WrapError("Please provide a payment method: EFT or CC");
                }

                Guid LoggedInUserID = (Guid)Membership.GetUser(username).ProviderUserKey;

                #region Check if the logged in user is assuming a company

                //check if the user is assuming a company
                var assumeResult = CheckAssumeCompany(secretKey);
                if (Utils.IsError(assumeResult))
                {
                    return assumeResult;
                }

                //parse the company ID to a Guid
                Guid CompanyID = Guid.Empty;
                if (!Guid.TryParse(assumeResult, out CompanyID))
                {
                    return Utils.WrapError("The ID of the Company that you are trying to view is in the incorrect format");
                }

                #endregion
                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {

                    // the companies package
                    var curCompanyPackage = (from cp in entity.CompanyPackages
                                             where cp.ID == CompanyPackageID && cp.CompanyID == CompanyID
                                             select cp).FirstOrDefault();

                    if (curCompanyPackage == null)
                    {
                        return Utils.WrapError("Your package could not be found");
                    }

                    var curInvoice = (from i in entity.Invoices
                                      where i.CompanyPackageID == curCompanyPackage.ID && i.CompanyID == CompanyID
                                      select i).FirstOrDefault();

                    if (curInvoice == null)
                    {
                        return Utils.WrapError("The invoice for this purchase cannot be found");
                    }

                    //calculate the expiry date of the package
                    DateTime CurDate = DateTime.Now;

                    //calculate the expiry date of the package
                    DateTime ExpiryDate = DateStart.AddMonths(curCompanyPackage.NumberMonthsSignedUpFor.HasValue ? curCompanyPackage.NumberMonthsSignedUpFor.Value : 1);
                    ExpiryDate = ExpiryDate.AddDays(-1);

                    //reset the start date and date expires to the date selected 
                    curCompanyPackage.DateStart = DateStart;
                    curCompanyPackage.DateExpires = ExpiryDate;

                    curCompanyPackage.DateUpdated = CurDate;
                    curCompanyPackage.ActivatedBy = null;
                    curCompanyPackage.PaymentType = paymentMethod;
                    curCompanyPackage.PaymentStatus = "Payment Started";
                    curCompanyPackage.PaymentErrorStatus = "Payment Started";

                    //get the price and discount amounts
                    decimal PackagePrice = curCompanyPackage.Price.Value;
                    decimal OptionalFeaturesPrice = curCompanyPackage.OptionalFeaturesPrice.HasValue ? curCompanyPackage.OptionalFeaturesPrice.Value : 0;
                    decimal StartingPrice = curCompanyPackage.PackageStartingPrice.HasValue ? curCompanyPackage.PackageStartingPrice.Value : 0;

                    decimal Discount = 0;
                    if (curCompanyPackage.HasDiscount.Value && curCompanyPackage.DiscountValue.Value > 0)
                    {
                        Discount = curCompanyPackage.DiscountValue.Value;
                    }

                    decimal FinalPrice = PackagePrice - Discount;

                    //if the package is free update the status of the company package
                    if (FinalPrice <= 0)
                    {
                        curCompanyPackage.PaymentStatus = "Payment Successful";
                        curCompanyPackage.PaymentErrorStatus = "Payment Successful";
                        curCompanyPackage.PaymentPending = false;
                        curCompanyPackage.IsActive = true;
                        curCompanyPackage.DateActivated = CurDate;
                    }

                    entity.CompanyPackages.Add(curCompanyPackage);
                    entity.Entry(curCompanyPackage).State = EntityState.Modified;

                    entity.SaveChanges();

                    //if its free, save the payment
                    if (FinalPrice <= 0)
                    {
                        //save the payment
                        SavePayment(LoggedInUserID + "", curCompanyPackage.ID + "", CurDate + "", "0", paymentMethod);
                    }

                    dynamic returnItem = new JObject();
                    returnItem.Status = "Success";
                    returnItem.TotalCost = FinalPrice;
                    returnItem.StartingPrice = StartingPrice;
                    returnItem.OptionalFeaturesPrice = OptionalFeaturesPrice;
                    returnItem.Discount = Discount;
                    returnItem.InvoiceID = curInvoice.ID;
                    return returnItem.ToString();

                }
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        #endregion

        #region Cart

        //user can view the items in the cart
        public string GetMyCart(string secretKey)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);

                var username = CheckUserHasRight(secretKey, "GetMyCart");
                if (Utils.IsError(username))
                {
                    return username;
                }

                /*string loggedInUserCompanyID = GetUserCompanyID(secretKey);

                //get the question id
                Guid LoggedInUserCompanyID;
                if (!Guid.TryParse(loggedInUserCompanyID, out LoggedInUserCompanyID))
                {
                    return Utils.WrapError("Company ID is not in the correct format");
                }*/

                #region Check if the logged in user is assuming a company

                //check if the user is assuming a company
                var assumeResult = CheckAssumeCompany(secretKey);
                if (Utils.IsError(assumeResult))
                {
                    return assumeResult;
                }

                //parse the company ID to a Guid
                Guid CompanyID = Guid.Empty;
                if (!Guid.TryParse(assumeResult, out CompanyID))
                {
                    return Utils.WrapError("The ID of the Company that you are trying to view is in the incorrect format");
                }

                #endregion

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    var curPackageCheck = (from cp in entity.CompanyPackages
                                           where cp.CompanyID == CompanyID && cp.IsActive == false && cp.IsCompleted == false
                                           && !cp.DateActivated.HasValue && !cp.DateDeactivated.HasValue
                                           select cp).FirstOrDefault();

                    if (curPackageCheck == null)
                    {
                        return "[]";
                    }

                    //get the new package that the user signed up for
                    var curPackage = (from cp in entity.CompanyPackages
                                      join p in entity.Packages
                                      on cp.PackageID equals p.ID
                                      where cp.CompanyID == CompanyID && cp.IsActive == false && cp.IsCompleted == false
                                           && !cp.DateActivated.HasValue && !cp.DateDeactivated.HasValue
                                      select new
                                      {
                                          CompanyPackageID = cp.ID,
                                          PackageID = p.ID,
                                          cp.PackageName,
                                          cp.Description,
                                          cp.DateSignedUp,
                                          cp.IsActive,
                                          cp.IsCompleted,
                                          Price = p.Price == null ? 0 : p.Price.Value,
                                          cp.NumberMonthsSignedUpFor,
                                          DateStart = cp.DateStart == null ? null : cp.DateStart,
                                          CompanyPackagePrice = cp.Price == null ? 0 : cp.Price.Value,
                                          p.NumberOfProjects,
                                          p.NumberOfQuestions,
                                          p.NumberOfResponses,
                                          p.NumberOfSurveys,
                                          p.NumberOfUsers,
                                          PackageDateUpdated = p.DateUpdated,
                                          CompanyPackageDateSignedUp = cp.DateSignedUp,
                                          CompanyPackageOptionalFeaturesPrice = cp.OptionalFeaturesPrice == null ? 0 : cp.OptionalFeaturesPrice,
                                          CompanyPackageDiscount = cp.DiscountValue == null ? 0 : cp.DiscountValue.Value
                                      }).FirstOrDefault();

                    if (curPackage == null)
                    {
                        return "[]";
                    }

                    //if the package has been updated after the user added the package to their cart
                    //clear the cart and give error
                    if (curPackage.PackageDateUpdated > curPackage.CompanyPackageDateSignedUp)
                    {
                        //get the cart for the users package, this cart contains all optional features selected by the user
                        /*var curCart = (from c in entity.CompanyCarts
                                       where c.CompanyPackageID == curPackage.CompanyPackageID
                                       select c).ToList();

                        //remove the details from the cart,if there are any
                        if (curCart != null && curCart.Count > 0)
                        {
                            entity.CompanyCarts.RemoveRange(curCart);
                        }

                        //get the current package and change its date deactivated
                        var currentPack = (from c in entity.CompanyPackages
                                           where c.ID == curPackage.CompanyPackageID
                                           select c).FirstOrDefault();

                        if (currentPack != null)
                        {
                            currentPack.DateDeactivated = DateTime.Now;
                            entity.CompanyPackages.Add(currentPack);
                            entity.Entry(currentPack).State = EntityState.Modified;
                        }

                        entity.SaveChanges();*/

                        //call the method to clear the cart and company package
                        var result = ClearCartForCompanyPackage(curPackage.CompanyPackageID + "");
                        if (Utils.IsError(result))
                        {
                            Helper.LogMessage("GetMyCart() ClearCartForCompanyPackage: " + result);
                        }

                        return Utils.WrapError("This package has changed since you signed up for it. Please signup for a new package");
                    }


                    //get the features for the selected package from the cart
                    PackageFeaturesResult pfResult = GetCartPackageFeatures(curPackage.PackageID + "", curPackage.CompanyPackageID + "");
                    if (pfResult.IsError)
                    {
                        return Utils.WrapError(pfResult.ErrorMessage);
                    }

                    //get the features returned for the package
                    ArrayList OptionalFeatures = pfResult.OptionalFeatures;
                    ArrayList MandatoryFeatures = pfResult.MandatoryFeatures;

                    var curInvoices = (from i in entity.Invoices
                                       where i.CompanyPackageID == curPackage.CompanyPackageID && i.CompanyID == CompanyID
                                       select i).FirstOrDefault();

                    bool HasInvoice = false;
                    if (curInvoices != null)
                    {
                        HasInvoice = true;
                    }


                    //store status
                    string paymentStatus = "No Payments made";

                    //if there is an invoice, get the payments for the invoice
                    if (HasInvoice)
                    {
                        //get the payments
                        /*var curPayments = (from p in entity.Payments
                                           where p.InvoiceID == curInvoices.ID
                                           select p).ToList();

                        //if there are payments change the status
                        if (curPayments != null || curPayments.Count() > 0)
                        {
                            paymentStatus = "Partial Payments made";
                        }*/

                        //get the payments
                        var curPayments = (from p in entity.PaymentHistories
                                           where p.InvoiceID == curInvoices.ID && p.PaymentStatus == "Payment Successful"
                                           select p).ToList();

                        //if there are payments change the status
                        if (curPayments != null || curPayments.Count() > 0)
                        {
                            paymentStatus = "Partial Payments made";
                        }

                    }


                    //set defaults for the features
                    bool Summing = false;
                    bool Piping = false;
                    bool GeoServices = false;
                    bool Signatures = false;
                    bool PhotoCamera = false;
                    bool WhiteLabelling = false;
                    bool PDF = false;
                    bool CSV = false;
                    bool Excel = false;
                    bool BasicReporting = false;
                    bool AdvancedReporting = false;
                    bool UniqueID = false;

                    //cycle through all the optional features selected by the user
                    //if there are extra features selected
                    if (OptionalFeatures != null && OptionalFeatures.Count > 0)
                    {
                        foreach (PackageFeatureDetails feature in OptionalFeatures)
                        {
                            //switch through the names of the features, if the optional feature matches one of these names,
                            //set the feature to true
                            switch (feature.Name)
                            {

                                case "Summing":
                                    Summing = true;
                                    break;

                                case "Piping":
                                    Piping = true;
                                    break;

                                case "GeoServices":
                                    GeoServices = true;
                                    break;

                                case "Excel":
                                    Excel = true;
                                    break;

                                case "AdvancedReporting":
                                    AdvancedReporting = true;
                                    break;

                                case "PDF":
                                    PDF = true;
                                    break;

                                case "CSV":
                                    CSV = true;
                                    break;

                                case "WhiteLabelling":
                                    WhiteLabelling = true;
                                    break;

                                case "PhotoCamera":
                                    PhotoCamera = true;
                                    break;

                                case "BasicReporting":
                                    BasicReporting = true;
                                    break;

                                case "Signatures":
                                    Signatures = true;
                                    break;

                                case "UniqueID":
                                    UniqueID = true;
                                    break;
                            }
                        }
                    }


                    //cycle through all the mandatory features for the package
                    if (MandatoryFeatures != null && MandatoryFeatures.Count > 0)
                    {
                        foreach (PackageFeatureDetails feature in MandatoryFeatures)
                        {
                            //switch through the names of the features, if the optional feature matches one of these names,
                            //set the feature to true
                            switch (feature.Name)
                            {

                                case "Summing":
                                    Summing = true;
                                    break;

                                case "Piping":
                                    Piping = true;
                                    break;

                                case "GeoServices":
                                    GeoServices = true;
                                    break;

                                case "Excel":
                                    Excel = true;
                                    break;

                                case "AdvancedReporting":
                                    AdvancedReporting = true;
                                    break;

                                case "PDF":
                                    PDF = true;
                                    break;

                                case "CSV":
                                    CSV = true;
                                    break;

                                case "WhiteLabelling":
                                    WhiteLabelling = true;
                                    break;

                                case "PhotoCamera":
                                    PhotoCamera = true;
                                    break;

                                case "BasicReporting":
                                    BasicReporting = true;
                                    break;

                                case "Signatures":
                                    Signatures = true;
                                    break;

                                case "UniqueID":
                                    UniqueID = true;
                                    break;
                            }
                        }
                    }

                    dynamic returnItem = new JObject();
                    returnItem.PackageID = curPackage.CompanyPackageID;
                    returnItem.PackageName = curPackage.PackageName;
                    returnItem.PackageDescription = curPackage.Description;
                    returnItem.DateSignedUp = curPackage.DateSignedUp;
                    returnItem.IsActive = curPackage.IsActive;
                    returnItem.IsCompleted = curPackage.IsCompleted;
                    returnItem.PackagePrice = curPackage.CompanyPackagePrice;
                    returnItem.SelectedFeaturesPrice = curPackage.CompanyPackageOptionalFeaturesPrice;
                    returnItem.HasInvoice = HasInvoice;
                    returnItem.NumberOfMonths = curPackage.NumberMonthsSignedUpFor;
                    returnItem.CompanyPackageDiscount = curPackage.CompanyPackageDiscount;
                    returnItem.CompanyPackageFinalPrice = (curPackage.CompanyPackagePrice - curPackage.CompanyPackageDiscount);
                    returnItem.StartDate = curPackage.DateStart;
                    returnItem.PaymentStatus = paymentStatus;
                    returnItem.NumberOfSurveys = curPackage.NumberOfSurveys;
                    returnItem.NumberOfQuestions = curPackage.NumberOfQuestions;
                    returnItem.NumberOfUsers = curPackage.NumberOfUsers;
                    returnItem.NumberOfResponses = curPackage.NumberOfResponses;
                    returnItem.PackageName = curPackage.PackageName;
                    returnItem.Description = curPackage.Description;
                    returnItem.NumberOfProjects = curPackage.NumberOfProjects;
                    returnItem.Summing = Summing;
                    returnItem.Piping = Piping;
                    returnItem.GeoServices = GeoServices;
                    returnItem.Signatures = Signatures;
                    returnItem.PhotoCamera = PhotoCamera;
                    returnItem.WhiteLabelling = WhiteLabelling;
                    returnItem.PDF = PDF;
                    returnItem.CSV = CSV;
                    returnItem.Excel = Excel;
                    returnItem.BasicReporting = BasicReporting;
                    returnItem.AdvancedReporting = AdvancedReporting;
                    returnItem.UniqueID = UniqueID;
                    return returnItem.ToString();
                }

            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        //user can view the details of a package in the cart
        public string GetMyCartDetails(string secretKey, string companyPackageID)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                companyPackageID = TrimIfNotNull(companyPackageID);

                var username = CheckUserHasRight(secretKey, "GetMyCart");
                if (Utils.IsError(username))
                {
                    return username;
                }

                Guid CompanyPackageID;
                if (!Guid.TryParse(companyPackageID, out CompanyPackageID))
                {
                    return Utils.WrapError("Package ID is not in the correct format");
                }

                /*string loggedInUserCompanyID = GetUserCompanyID(secretKey);

                //get the question id
                Guid LoggedInUserCompanyID;
                if (!Guid.TryParse(loggedInUserCompanyID, out LoggedInUserCompanyID))
                {
                    return Utils.WrapError("Company ID is not in the correct format");
                }*/

                #region Check if the logged in user is assuming a company

                //check if the user is assuming a company
                var assumeResult = CheckAssumeCompany(secretKey);
                if (Utils.IsError(assumeResult))
                {
                    return assumeResult;
                }

                //parse the company ID to a Guid
                Guid CompanyID = Guid.Empty;
                if (!Guid.TryParse(assumeResult, out CompanyID))
                {
                    return Utils.WrapError("The ID of the Company that you are trying to view is in the incorrect format");
                }

                #endregion

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    //get the new package that the user signed up for
                    var curPackage = (from cp in entity.CompanyPackages
                                      join p in entity.Packages
                                      on cp.PackageID equals p.ID
                                      where cp.ID == CompanyPackageID && cp.IsActive == false && cp.IsCompleted == false && cp.CompanyID == CompanyID
                                      select new
                                      {
                                          CompanyPackageID = cp.ID,
                                          cp.PackageName,
                                          cp.Description,
                                          cp.DateSignedUp,
                                          cp.IsActive,
                                          cp.IsCompleted,
                                          PackagePrice = p.Price,
                                          cp.NumberMonthsSignedUpFor,
                                          CompanyPackagePrice = cp.Price == null ? 0 : cp.Price.Value,
                                          CompanyPackageDiscount = cp.DiscountValue == null ? 0 : cp.DiscountValue.Value
                                      }).FirstOrDefault();

                    if (curPackage == null)
                    {
                        return "[]";
                    }

                    //get the cart for the package
                    var curCart = (from c in entity.CompanyCarts
                                   join f in entity.PackageFeatures
                                   on c.FeatureID equals f.FeatureID
                                   where c.CompanyPackageID == curPackage.CompanyPackageID
                                   select new
                                   {
                                       CartID = c.ID,
                                       FeatureID = c.FeatureID,
                                       f.OptionalFeature,
                                       f.OptionalPrice
                                   }).ToList();

                    //calculate the price
                    decimal Price = 0;
                    if (curCart != null && curCart.Count > 0)
                    {
                        foreach (var item in curCart)
                        {
                            if (item.OptionalFeature)
                            {
                                Price += item.OptionalPrice.Value;
                            }
                        }
                    }

                    dynamic returnItem = new JObject();
                    returnItem.PackageID = curPackage.CompanyPackageID;
                    returnItem.PackageName = curPackage.PackageName;
                    returnItem.PackageDescription = curPackage.Description;
                    returnItem.DateSignedUp = curPackage.DateSignedUp;
                    returnItem.IsActive = curPackage.IsActive;
                    returnItem.IsCompleted = curPackage.IsCompleted;
                    returnItem.PackagePrice = curPackage.PackagePrice;
                    returnItem.SelectedFeaturesPrice = Price;
                    returnItem.NumberOfMonths = curPackage.NumberMonthsSignedUpFor;
                    returnItem.CompanyPackagePrice = curPackage.CompanyPackagePrice;
                    returnItem.CompanyPackageDiscount = curPackage.CompanyPackageDiscount;
                    returnItem.CompanyPackageFinalPrice = (curPackage.CompanyPackagePrice - curPackage.CompanyPackageDiscount);
                    returnItem.SelectedFeatures = Helper.SerializeToJavascriptOject(curCart);
                    return returnItem.ToString();
                }

            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        //user can clear their cart
        public string ClearMyCart(string secretKey)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);

                var username = CheckUserHasRight(secretKey, "GetMyCart");
                if (Utils.IsError(username))
                {
                    return username;
                }

                #region Check if the logged in user is assuming a company

                //check if the user is assuming a company
                var assumeResult = CheckAssumeCompany(secretKey);
                if (Utils.IsError(assumeResult))
                {
                    return assumeResult;
                }

                //parse the company ID to a Guid
                Guid CompanyID = Guid.Empty;
                if (!Guid.TryParse(assumeResult, out CompanyID))
                {
                    return Utils.WrapError("The ID of the Company that you are trying to view is in the incorrect format");
                }

                #endregion

                Guid LoggedInUser = (Guid)Membership.GetUser(username).ProviderUserKey;

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    /*var userCompany = (from cu in entity.CompanyUsers
                                       join c in entity.Companies
                                       on cu.CompanyID equals c.ID
                                       where cu.UserID == LoggedInUser
                                       select c).FirstOrDefault();

                    if (userCompany == null)
                    {
                        return Utils.WrapError("The company you are assigned to could not be found");
                    }*/

                    //get the companies package that has not been completed
                    var curPackage = (from cp in entity.CompanyPackages
                                      where cp.IsCompleted == false && cp.CompanyID == CompanyID && !cp.DateActivated.HasValue && !cp.DateDeactivated.HasValue
                                      select cp).FirstOrDefault();

                    if (curPackage == null)
                    {
                        return Utils.WrapError("You don't have any pending packages in your cart");
                    }

                    //call the method to clear the cart and company package
                    return ClearCartForCompanyPackage(curPackage.ID + "");

                }
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        //user can clear their cart
        private string ClearCartForCompanyPackage(string companyPackageID)
        {
            try
            {
                Guid CompanyPackageID;
                if (!Guid.TryParse(companyPackageID, out CompanyPackageID))
                {
                    return Utils.WrapError("Company Package ID is not in the correct format");
                }

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {

                    //get the companies package that has not been completed
                    var curPackage = (from cp in entity.CompanyPackages
                                      where cp.ID == CompanyPackageID
                                      select cp).FirstOrDefault();

                    if (curPackage == null)
                    {
                        return Utils.WrapError("You don't have any pending packages in your cart");
                    }

                    if (curPackage.IsActive)
                    {
                        return Utils.WrapError("You cannot remove this package is it is active");
                    }

                    if (curPackage.DateActivated.HasValue)
                    {
                        return Utils.WrapError("You cannot remove this package is it has been activated");
                    }

                    if (curPackage.DateDeactivated.HasValue)
                    {
                        return Utils.WrapError("You cannot remove this package is already inactive");
                    }

                    var checkInvoices = (from i in entity.Invoices
                                         where i.CompanyPackageID == CompanyPackageID
                                         select i).FirstOrDefault();

                    if (checkInvoices != null)
                    {
                        return Utils.WrapError("You cannot remove this package as a invoice has already been generated for it");
                    }

                    //remove the package
                    entity.CompanyPackages.Remove(curPackage);
                    entity.Entry(curPackage).State = EntityState.Deleted;

                    //get the cart for the package
                    var curCart = (from c in entity.CompanyCarts
                                   where c.CompanyPackageID == CompanyPackageID
                                   select c).ToList();

                    if (curCart != null && curCart.Count > 0)
                    {
                        entity.CompanyCarts.RemoveRange(curCart);
                        entity.Entry(curCart).State = EntityState.Deleted;
                    }

                    entity.SaveChanges();

                    dynamic returnItem = new JObject();
                    returnItem.Status = "Success";
                    return returnItem.ToString();
                }
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        //features = JArray(id)
        //get the features for the selected package from the users cart
        private PackageFeaturesResult GetCartPackageFeatures(string packageID, string companyPackageID)
        {
            PackageFeaturesResult pfResult = new PackageFeaturesResult();

            try
            {
                packageID = TrimIfNotNull(packageID);
                companyPackageID = TrimIfNotNull(companyPackageID);

                Guid PackageID;
                if (!Guid.TryParse(packageID, out PackageID))
                {
                    pfResult.IsError = true;
                    pfResult.ErrorMessage = "Package ID is not in the correct format";
                    return pfResult;
                }

                Guid CompanyPackageID;
                if (!Guid.TryParse(companyPackageID, out CompanyPackageID))
                {
                    pfResult.IsError = true;
                    pfResult.ErrorMessage = "Company Package ID is not in the correct format";
                    return pfResult;
                }

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {

                    //validate the package
                    var curPackage = (from p in entity.Packages
                                      where p.ID == PackageID
                                      select p).FirstOrDefault();

                    if (curPackage == null)
                    {

                        pfResult.IsError = true;
                        pfResult.ErrorMessage = "The package you are trying to select does not exist";
                        return pfResult;
                    }

                    if (!curPackage.IsActive.HasValue || (curPackage.IsActive.HasValue && !curPackage.IsActive.Value))
                    {
                        pfResult.IsError = true;
                        pfResult.ErrorMessage = "You cannot signup for this package as it is no longer available";
                        return pfResult;
                    }

                    //store all the features already added to the list
                    ArrayList SavedFeatures = new ArrayList();

                    decimal OptionalFeaturesPrice = 0;

                    //store the optional features 
                    ArrayList OptionalFeaturesToAdd = new ArrayList();

                    //get the optional features that the user selected from the cart
                    var allOptionalFeatures = (from c in entity.CompanyCarts
                                               join cp in entity.CompanyPackages
                                               on c.CompanyPackageID equals cp.ID
                                               join pf in entity.PackageFeatures
                                               on new { c.FeatureID, cp.PackageID } equals new { pf.FeatureID, pf.PackageID }
                                               join f in entity.Features
                                               on pf.FeatureID equals f.ID
                                               where c.CompanyPackageID == CompanyPackageID && pf.OptionalFeature == true
                                               select new
                                               {
                                                   CartID = c.ID,
                                                   FeatureID = c.FeatureID,
                                                   pf.OptionalFeature,
                                                   pf.OptionalPrice,
                                                   f.FriendlyName,
                                                   f.Name
                                               }).ToList();

                    if (allOptionalFeatures != null && allOptionalFeatures.Count() > 0)
                    {
                        //cycle through the optional features
                        foreach (var curFeature in allOptionalFeatures)
                        {
                            //if the feature has not already been added
                            if (!SavedFeatures.Contains(curFeature.FeatureID))
                            {
                                //store the details of the current feature
                                PackageFeatureDetails pfDetails = new PackageFeatureDetails();
                                pfDetails.ID = curFeature.FeatureID;
                                pfDetails.FriendlyName = curFeature.FriendlyName;
                                pfDetails.Name = curFeature.Name;
                                pfDetails.OptionalPrice = curFeature.OptionalPrice.HasValue ? curFeature.OptionalPrice.Value : 0;
                                pfDetails.OptionalFeature = curFeature.OptionalFeature;
                                OptionalFeaturesToAdd.Add(pfDetails);
                                SavedFeatures.Add(curFeature.FeatureID);
                            }
                        }
                    }

                    //store the mandatory features 
                    ArrayList MandatoryFeaturesToAdd = new ArrayList();

                    //get all the mandatory features for the package selected
                    var allMandatoryFeatures = (from f in entity.Features
                                                join pf in entity.PackageFeatures
                                                on f.ID equals pf.FeatureID
                                                where pf.PackageID == PackageID && !pf.OptionalFeature
                                                select new
                                                {
                                                    f.ID,
                                                    f.Name,
                                                    f.FriendlyName,
                                                    pf.OptionalPrice,
                                                    pf.OptionalFeature
                                                }).ToList();

                    //cycle through all the package features
                    if (allMandatoryFeatures != null && allMandatoryFeatures.Count > 0)
                    {

                        //cycle through the mandatory features
                        foreach (var curFeature in allMandatoryFeatures)
                        {
                            //if the feature has not already been added
                            if (!SavedFeatures.Contains(curFeature.ID))
                            {
                                //store the details of the current feature
                                PackageFeatureDetails pfDetails = new PackageFeatureDetails();
                                pfDetails.ID = curFeature.ID;
                                pfDetails.Name = curFeature.Name;
                                pfDetails.FriendlyName = curFeature.FriendlyName;
                                pfDetails.OptionalPrice = curFeature.OptionalPrice.HasValue ? curFeature.OptionalPrice.Value : 0;
                                pfDetails.OptionalFeature = curFeature.OptionalFeature;
                                MandatoryFeaturesToAdd.Add(pfDetails);
                                SavedFeatures.Add(curFeature.ID);
                            }
                        }
                    }


                    pfResult.IsError = false;
                    pfResult.OptionalFeatures = OptionalFeaturesToAdd;
                    pfResult.MandatoryFeatures = MandatoryFeaturesToAdd;
                    pfResult.OptionalFeaturesPrice = OptionalFeaturesPrice;
                    return pfResult;

                }
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                pfResult.IsError = true;
                pfResult.ErrorMessage = errors;
                return pfResult;
            }
            catch (Exception ee)
            {
                if (ee.InnerException != null)
                {
                    Helper.LogError("Inner exception", ee.InnerException.ToString());
                }
                Helper.LogError(ee.Message, ee.StackTrace);
                pfResult.IsError = true;
                pfResult.ErrorMessage = ee.Message;
                return pfResult;
            }

        }

        #endregion

        #region Responses

        //responseValues = JArray (responseValueID, response)
        /*public string AuditResponse(string secretKey, string responseID, string responseValues)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                responseID = TrimIfNotNull(responseID);
                responseValues = TrimIfNotNull(responseValues);

                var username = CheckUserHasRight(secretKey, "AuditResponse");
                if (Utils.IsError(username))
                {
                    return username;
                }

                Guid ResponseID;
                if (!Guid.TryParse(responseID, out ResponseID))
                {
                    return Utils.WrapError("Response ID is not in the correct format");
                }

                JArray ResponseValues = JArray.Parse(responseValues);
                if (ResponseValues == null || ResponseValues.Count() <= 0)
                {
                    return Utils.WrapError("Please ensure that you enter the responses to audit");
                }

                //get the ID for the logged in user
                Guid LoggedInUserID = (Guid)Membership.GetUser(username).ProviderUserKey;

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    //get the response that is being audited
                    var curResponse = (from r in entity.Responses
                                       where r.ID == ResponseID
                                       select r).FirstOrDefault();

                    if (curResponse == null)
                    {
                        return Utils.WrapError("The response you are trying to audit could not be found");
                    }

                    //update the response
                    curResponse.DateUpdated = DateTime.Now;
                    curResponse.UpdatedBy = LoggedInUserID;
                    entity.Responses.Add(curResponse);
                    entity.Entry(curResponse).State = EntityState.Modified;

                    //cycle through all the values for the response
                    foreach (JObject respValue in ResponseValues)
                    {
                        //get tue response values from the array
                        var responseValueID = respValue.GetValue("responseValueID").ToString();
                        var response = respValue.GetValue("response").ToString();

                        Guid ResponseValueID;
                        if (!Guid.TryParse(responseValueID, out ResponseValueID))
                        {
                            return Utils.WrapError("Response Value ID is not in the correct format");
                        }

                        if (string.IsNullOrWhiteSpace(response))
                        {
                            return Utils.WrapError("Please ensure that you enter a response");
                        }

                        //get the current response that is being updated
                        var curResponseValue = (from rv in entity.ResponseValues
                                                where rv.ID == ResponseValueID
                                                select rv).FirstOrDefault();

                        if (curResponseValue == null)
                        {
                            return Utils.WrapError("The response value you are trying to update cannot be found");
                        }

                        //if the response is the original record
                        if (!curResponseValue.IsAuditedRecord)
                        {
                            //create a new audited record
                            var newAuditedRecord = new ResponseValue();
                            Guid newAuditedRecordID = Guid.NewGuid();
                            newAuditedRecord.ID = newAuditedRecordID;
                            newAuditedRecord.QuestionID = curResponseValue.QuestionID;
                            newAuditedRecord.QuestionText = curResponseValue.QuestionText;
                            newAuditedRecord.QuestionValueID = curResponseValue.QuestionValueID;
                            newAuditedRecord.ResponseID = curResponseValue.ResponseID;
                            newAuditedRecord.Response = response;
                            newAuditedRecord.IsAuditedRecord = true;
                            newAuditedRecord.AuditedRecordID = null;
                            newAuditedRecord.DateUpdated = DateTime.Now;
                            newAuditedRecord.UpdatedBy = LoggedInUserID;
                            newAuditedRecord.IsDeleted = false;
                            entity.ResponseValues.Add(newAuditedRecord);

                            //update the old record
                            curResponseValue.AuditedRecordID = newAuditedRecordID;
                            entity.ResponseValues.Add(curResponseValue);
                            entity.Entry(curResponseValue).State = EntityState.Modified;

                        }
                        //if the response is an audited record
                        else
                        {
                            //update the audited record
                            curResponseValue.Response = response;
                            curResponseValue.DateUpdated = DateTime.Now;
                            curResponseValue.UpdatedBy = LoggedInUserID;
                            entity.ResponseValues.Add(curResponseValue);
                            entity.Entry(curResponseValue).State = EntityState.Modified;
                        }
                    }

                    entity.SaveChanges();

                }

                dynamic returnItem = new JObject();
                returnItem.Status = "Success";
                return returnItem.ToString();
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        //delete a response
        public string DeleteResponse(string secretKey, string responseID)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                responseID = TrimIfNotNull(responseID);

                var username = CheckUserHasRight(secretKey, "AuditResponse");
                if (Utils.IsError(username))
                {
                    return username;
                }

                Guid ResponseID;
                if (!Guid.TryParse(responseID, out ResponseID))
                {
                    return Utils.WrapError("Response ID is not in the correct format");
                }

                //get the ID for the logged in user
                Guid LoggedInUserID = (Guid)Membership.GetUser(username).ProviderUserKey;

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    //get the response that is being audited
                    var curResponse = (from r in entity.Responses
                                       where r.ID == ResponseID
                                       select r).FirstOrDefault();

                    if (curResponse == null)
                    {
                        return Utils.WrapError("The response you are trying to delete could not be found");
                    }

                    DateTime DateChanged = DateTime.Now;

                    //update the response linked to the response value
                    //curResponse.DateUpdated = DateChanged;
                    //curResponse.UpdatedBy = LoggedInUserID;
                    curResponse.DateDeleted = DateChanged;
                    curResponse.DeletedBy = LoggedInUserID;
                    curResponse.IsDeleted = true;
                    entity.Responses.Add(curResponse);
                    entity.Entry(curResponse).State = EntityState.Modified;

                    entity.SaveChanges();
                }

                dynamic returnItem = new JObject();
                returnItem.Status = "Success";
                return returnItem.ToString();
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        //delete a response value
        public string DeleteResponseValue(string secretKey, string responseValueID)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                responseValueID = TrimIfNotNull(responseValueID);

                var username = CheckUserHasRight(secretKey, "AuditResponse");
                if (Utils.IsError(username))
                {
                    return username;
                }

                Guid ResponseValueID;
                if (!Guid.TryParse(responseValueID, out ResponseValueID))
                {
                    return Utils.WrapError("Response Value ID is not in the correct format");
                }

                //get the ID for the logged in user
                Guid LoggedInUserID = (Guid)Membership.GetUser(username).ProviderUserKey;

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    //get the current response that is being updated
                    var curResponseValue = (from rv in entity.ResponseValues
                                            where rv.ID == ResponseValueID
                                            select rv).FirstOrDefault();

                    if (curResponseValue == null)
                    {
                        return Utils.WrapError("The response value you are trying to delete cannot be found");
                    }

                    //get the response that the response value is linked to
                    var curResponse = (from r in entity.Responses
                                       where r.ID == curResponseValue.ResponseID
                                       select r).FirstOrDefault();

                    if (curResponse == null)
                    {
                        return Utils.WrapError("The Response that this value is linked to cannot be found");
                    }

                    //update the response linked to the response value
                    curResponse.DateUpdated = DateTime.Now;
                    curResponse.UpdatedBy = LoggedInUserID;
                    entity.Responses.Add(curResponse);
                    entity.Entry(curResponse).State = EntityState.Modified;


                    //if the response is an audited record
                    if (curResponseValue.IsAuditedRecord)
                    {
                        //update the response
                        curResponseValue.DateDeleted = DateTime.Now;
                        curResponseValue.DeletedBy = LoggedInUserID;
                        curResponseValue.IsDeleted = true;
                        entity.ResponseValues.Add(curResponseValue);
                        entity.Entry(curResponseValue).State = EntityState.Modified;

                    }
                    //if the current response is not an audited record
                    else
                    {
                        //duplicate the row to make a audited record
                        var auditedResponse = new ResponseValue();
                        Guid auditedResponseID = Guid.NewGuid();
                        auditedResponse.ID = auditedResponseID;
                        auditedResponse.QuestionID = curResponseValue.QuestionID;
                        auditedResponse.QuestionText = curResponseValue.QuestionText;
                        auditedResponse.ResponseID = curResponseValue.ResponseID;
                        auditedResponse.Response = curResponseValue.Response;
                        auditedResponse.QuestionValueID = curResponseValue.QuestionValueID;
                        auditedResponse.IsAuditedRecord = true;
                        auditedResponse.AuditedRecordID = null;
                        auditedResponse.IsDeleted = true;
                        auditedResponse.DateDeleted = DateTime.Now;
                        auditedResponse.DeletedBy = LoggedInUserID;
                        entity.ResponseValues.Add(auditedResponse);

                        //update the old record to link to the new audited record
                        curResponseValue.AuditedRecordID = auditedResponseID;
                        entity.ResponseValues.Add(curResponseValue);
                        entity.Entry(curResponseValue).State = EntityState.Modified;
                    }

                    entity.SaveChanges();
                }

                dynamic returnItem = new JObject();
                returnItem.Status = "Success";
                return returnItem.ToString();
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        //get all the responses for a specified survey (from all survey users)
        public string GetResponses(string secretKey, string surveyID)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                surveyID = TrimIfNotNull(surveyID);

                var username = CheckUserHasRight(secretKey, "ViewResponses");
                if (Utils.IsError(username))
                {
                    return username;
                }
                Guid SurveyID;
                if (!Guid.TryParse(surveyID, out SurveyID))
                {
                    return Utils.WrapError("Survey ID is not in the correct format");
                }

                //get the ID for the logged in user
                Guid LoggedInUserID = (Guid)Membership.GetUser(username).ProviderUserKey;

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    //check if the survey exists
                    var curSurvey = (from s in entity.Surveys
                                     where s.ID == SurveyID
                                     select s).FirstOrDefault();

                    if (curSurvey == null)
                    {
                        return Utils.WrapError("Survey not found");
                    }

                    //get the responses for the specified survey. only get the responses that have not been deleted
                    var curResponses = (from r in entity.Responses
                                        join u in entity.aspnet_Membership
                                        on r.CreatedBy equals u.UserId
                                        where r.SurveyID == SurveyID && r.IsDeleted == false
                                        orderby r.DateCreated descending
                                        select new
                                        {
                                            r.ID,
                                            r.DateCreated,
                                            r.IsCompleted,
                                            CreatedByUserID = r.CreatedBy,
                                            CreatedByUserName = u.Firstnames + " " + u.Lastname,
                                            CreatedByUserEmail = u.Email
                                        }).ToList();

                    if (curResponses == null && curResponses.Count() <= 0)
                    {
                        return Utils.WrapError("There are no responses for this survey");
                    }

                    return Helper.SerializeToJavascriptOject(curResponses);
                }
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        //get all the values that were in a speficied response
        public string GetResponseValues(string secretKey, string responseID)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                responseID = TrimIfNotNull(responseID);

                var username = CheckUserHasRight(secretKey, "ViewResponses");
                if (Utils.IsError(username))
                {
                    return username;
                }
                Guid ResponseID;
                if (!Guid.TryParse(responseID, out ResponseID))
                {
                    return Utils.WrapError("Response ID is not in the correct format");
                }

                //get the ID for the logged in user
                Guid LoggedInUserID = (Guid)Membership.GetUser(username).ProviderUserKey;

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    //check if the response exists
                    var curResponse = (from r in entity.Responses
                                       where r.ID == ResponseID
                                       select r).FirstOrDefault();

                    if (curResponse == null)
                    {
                        return Utils.WrapError("Response not found");
                    }

                    //get all the response values for the response
                    var curResponseValues = (from rv in entity.ResponseValues
                                             //get all the original records that were not deleted
                                             where rv.ResponseID == ResponseID && rv.IsAuditedRecord == false
                                             select new
                                             {
                                                 rv.ID,
                                                 //the question that was answered
                                                 rv.QuestionID,
                                                 rv.QuestionText,
                                                 //all the question values
                                                 QuestionValues = (from qv in entity.QuestionValues
                                                                   where qv.QuestionID == rv.QuestionID
                                                                   select new
                                                                   {
                                                                       qv.ID,
                                                                       qv.Name,
                                                                       qv.Value
                                                                   }).ToList(),
                                                 //the response that the response value belongs to 
                                                 rv.ResponseID,
                                                 //the users response
                                                 rv.Response,
                                                 //the id of the question value the user selected
                                                 rv.QuestionValueID,
                                                 //if the record is audited or not
                                                 rv.IsAuditedRecord,
                                                 //the id of the linked record if it is audited
                                                 rv.AuditedRecordID,
                                                 //get the audited record if the record id is not null
                                                 AuditedRecord = rv.AuditedRecordID == null ? null :
                                                     (from ar in entity.ResponseValues
                                                      where ar.ResponseID == rv.AuditedRecordID
                                                      select new
                                                      {
                                                          ar.ID,
                                                          ar.QuestionID,
                                                          ar.QuestionText,
                                                          ar.QuestionValueID,
                                                          ar.ResponseID,
                                                          ar.Response,
                                                          ar.IsAuditedRecord,
                                                          ar.AuditedRecordID,
                                                          ar.DateUpdated,
                                                          ar.UpdatedBy,
                                                          ar.IsDeleted
                                                      }).ToList()
                                             }).ToList();

                    if (curResponseValues == null && curResponseValues.Count() <= 0)
                    {
                        return Utils.WrapError("Response not found");
                    }

                    return Helper.SerializeToJavascriptOject(curResponseValues);
                }
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }*/

        public string GetResponseStats(string secretKey, string surveyID)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                surveyID = TrimIfNotNull(surveyID);

                var username = CheckUserHasRight(secretKey, "ViewResponses");
                if (Utils.IsError(username))
                {
                    return username;
                }

                Guid SurveyID;
                if (!Guid.TryParse(surveyID, out SurveyID))
                {
                    return Utils.WrapError("Survey ID is not in the correct format");
                }

                #region Check if the logged in user is assuming a company

                //check if the user is assuming a company
                var assumeResult = CheckAssumeCompany(secretKey);
                if (Utils.IsError(assumeResult))
                {
                    return assumeResult;
                }

                //parse the company ID to a Guid
                Guid CompanyID = Guid.Empty;
                if (!Guid.TryParse(assumeResult, out CompanyID))
                {
                    return Utils.WrapError("The ID of the Company that you are trying to view is in the incorrect format");
                }

                #endregion

                //get the ID for the logged in user
                Guid LoggedInUserID = (Guid)Membership.GetUser(username).ProviderUserKey;

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    //check that the survey exists
                    var curSurvey = (from s in entity.Surveys
                                     join p in entity.Projects
                                     on s.ProjectID equals p.ID
                                     where s.ID == SurveyID && p.ProjectCompany == CompanyID
                                     select new
                                     {
                                         s.ID,
                                         CompanyID = p.ProjectCompany,
                                         ProjectID = p.ID
                                     }).FirstOrDefault();

                    if (curSurvey == null)
                    {
                        return Utils.WrapError("The survey you are trying to view responses for cannot be found");
                    }

                    //get the number of responses uploaded
                    var numOfUploadedResponses = entity.NumOfUploadedResponses(SurveyID).First();

                    //get the number of responses audited
                    var numOfAuditedResponses = entity.NumOfAuditedResponses(SurveyID).First();

                    dynamic returnItem = new JObject();
                    returnItem.Status = "Success";
                    returnItem.NumOfUploadedResponses = numOfUploadedResponses.HasValue ? numOfUploadedResponses.Value : 0;
                    returnItem.NumOfAuditedResponses = numOfAuditedResponses.HasValue ? numOfAuditedResponses.Value : 0;
                    return returnItem.ToString();
                }


            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        //copy the responses that are not already audited into the audited table
        public string CopyResponsesToAudit(string secretKey, string surveyID)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                surveyID = TrimIfNotNull(surveyID);

                var username = CheckUserHasRight(secretKey, "AuditResponse");
                if (Utils.IsError(username))
                {
                    return username;
                }

                Guid SurveyID;
                if (!Guid.TryParse(surveyID, out SurveyID))
                {
                    return Utils.WrapError("Survey ID is not in the correct format");
                }

                #region Check if the logged in user is assuming a company

                //check if the user is assuming a company
                var assumeResult = CheckAssumeCompany(secretKey);
                if (Utils.IsError(assumeResult))
                {
                    return assumeResult;
                }

                //parse the company ID to a Guid
                Guid CompanyID = Guid.Empty;
                if (!Guid.TryParse(assumeResult, out CompanyID))
                {
                    return Utils.WrapError("The ID of the Company that you are trying to view is in the incorrect format");
                }

                #endregion

                //get the ID for the logged in user
                Guid LoggedInUserID = (Guid)Membership.GetUser(username).ProviderUserKey;

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    //check that the survey exists
                    var curSurvey = (from s in entity.Surveys
                                     join p in entity.Projects
                                     on s.ProjectID equals p.ID
                                     where s.ID == SurveyID && p.ProjectCompany == CompanyID
                                     select new
                                     {
                                         s.ID,
                                         CompanyID = p.ProjectCompany,
                                         ProjectID = p.ID
                                     }).FirstOrDefault();

                    if (curSurvey == null)
                    {
                        return Utils.WrapError("The survey you are trying to audit responses for cannot be found");
                    }

                    //copy the responses
                    var result = entity.CopyResponsesToAudit(SurveyID, LoggedInUserID);

                    if (result <= 0)
                    {
                        return Utils.WrapError("There are no new responses available for auditing");
                    }

                    dynamic returnItem = new JObject();
                    returnItem.Status = "Success";
                    returnItem.NumResponsesCopied = result;
                    return returnItem.ToString();
                }


            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        #region COVID-19


        private void InsertNewResponse(Guid responseID)
        {
            int itemCount = 1;
            DateTime lastResponse = new DateTime(2020, 01, 01);
            Guid covidID = Guid.Parse("98224c3b-b8c2-4f0e-835a-9a06429201f1");      //COVID Survey ID
            ResponseElement thisResponseElement;
            ResponseKeyValue thisResponseKV;
            List<ResponseKeyValue> responseKVList;

            using (Surveya_DevEntities entities = new Surveya_DevEntities())
            {

                //  We are using the original response DateCreated as Audited responses are uploading in bulk therefore 
                //  we can have a thousand records with the same DateCreated

                int copyQValName = entities.covid_CopyQuestionValueName();
                Helper.LogMessage($"covid_CopyQuestionValueName response: {copyQValName}");

                List<ResponseValue> respVals = null;
                ResponseValue respVal = null;
                string aRespValStr;

                lastResponse = DateTime.Now;

                respVals = (from a in entities.ResponseValues
                            where a.ResponseID == responseID
                            select a).ToList();
                thisResponseElement = new ResponseElement()
                {
                    ID = Guid.NewGuid(),
                    DateCreated = lastResponse,
                    SurveyID = covidID,
                    ResponseID = responseID
                };
                responseKVList = new List<ResponseKeyValue>();
                for (int j = 0; j < respVals.Count; j++)
                {
                    respVal = respVals[j];
                    aRespValStr = respVal.QuestionID.ToString().ToLower();
                    switch (aRespValStr)
                    {
                        case "f11da41a-ec7e-4f4c-8183-88a23f73f1ae":    //Q1 ID	"Over 18"
                            thisResponseElement.Q1 = respVal.Value;
                            break;
                        case "fa469795-eded-492f-8082-b0db98f27763":    //Q2 ID	"Consent"
                            thisResponseElement.Q2 = respVal.Value;
                            break;
                        case "55dcef0d-86a5-401b-9dd0-84b51ed273a3":    //Q3 ID	"Country"
                            thisResponseElement.Q3 = respVal.Value;
                            break;
                        case "c02ca393-6ec2-4529-9a2a-913de903c44c":    //Q4 ID	"Gender"
                            thisResponseElement.Q4 = respVal.Value;
                            break;
                        case "47eb1290-b6bb-4f1d-a4f1-de587b4de3ba":    //Q5 ID	"Age Group"
                            thisResponseElement.Q5 = respVal.Value;
                            break;
                        case "10755a9d-3bfd-40f9-900c-f6b08df2b76b":    //Q6 ID	"Feel"          --MULTI
                            thisResponseKV = new ResponseKeyValue()
                            {
                                ID = Guid.NewGuid(),
                                QuestionID = respVal.QuestionID.Value,
                                ResponseID = responseID,
                                Value = respVal.Value
                            };
                            responseKVList.Add(thisResponseKV);
                            break;
                        case "6b2fed41-930d-49dd-8d69-7e44bb24646f":    //Q7 ID	"Priority testing"
                            thisResponseElement.Q7 = respVal.Value;
                            break;
                        case "31cb0d75-b6fd-4941-96d3-888ef641c7a3":    //Q8 ID	"Have You Tested"
                            thisResponseElement.Q8 = respVal.Value;
                            break;
                        //--Testing
                        case "12a49b36-ee41-49f2-9e94-89c564d925f1":    //Q9 ID	"Results"
                            thisResponseElement.Q9 = respVal.Value;
                            break;
                        //--	Positive
                        case "2332de04-c80b-4fb0-8341-846ea3309893":    //Q10 ID    "Infection location Positive"
                            thisResponseElement.Q10 = respVal.Value;
                            break;
                        case "fac19665-e6a8-48dc-a80f-7251499aabc3":    //Q11 ID	"Symptoms Tested"       --MULTI
                            thisResponseKV = new ResponseKeyValue()
                            {
                                ID = Guid.NewGuid(),
                                QuestionID = respVal.QuestionID.Value,
                                ResponseID = responseID,
                                Value = respVal.Value
                            };
                            responseKVList.Add(thisResponseKV);
                            break;
                        case "bff7e349-4694-4fb3-87ed-df12dbb03651":    //Q12 ID	"Symptom Severity"
                            thisResponseElement.Q12 = respVal.Value;
                            break;
                        case "8308a243-2cef-4518-a845-89dcea669a97":    //Q13 ID	"Quarantined"
                            thisResponseElement.Q13 = respVal.Value;
                            break;
                        case "b30e89f9-fb42-40a5-a9fb-a91860f4af90":    //Q14 ID	"Prevent spreading"     --MULTI
                            thisResponseKV = new ResponseKeyValue()
                            {
                                ID = Guid.NewGuid(),
                                QuestionID = respVal.QuestionID.Value,
                                ResponseID = responseID,
                                Value = respVal.Value
                            };
                            responseKVList.Add(thisResponseKV);
                            break;
                        case "3b59bc40-8eed-4aa6-a9c5-919cff830ec6":    //Q15 ID	"Reinfection"
                            thisResponseElement.Q15 = respVal.Value;
                            break;
                        case "17bd1135-6869-4469-8a5d-0d8c0c8710c7":    //Q16 ID	"Vaccine"
                            thisResponseElement.Q16 = respVal.Value;
                            break;
                        case "cdadf713-0a43-4511-88e8-af495749a549":    //Q17 ID	"Control group"
                            thisResponseElement.Q17 = respVal.Value;
                            break;
                        //--	Quarantine
                        case "38d7fa04-c8ab-455f-b068-88c9a7252bb6":    //Q18 ID	"Discontinue quarantine"
                            thisResponseElement.Q18 = respVal.Value;
                            break;
                        //--	Not Quarantine
                        case "8fabaede-b249-433e-b1ba-3cb4feb0c0cb":    //Q19 ID	"Why not quarantined"
                            thisResponseElement.Q19 = respVal.Value;
                            break;
                        //--	Suspected Case
                        case "c28448be-b3d7-4c53-9128-9fcdd7838a79":    //Q20 ID	"Unconfirmed case?"
                            thisResponseElement.Q20 = respVal.Value;
                            break;
                        //--	Unconfirmed
                        case "a043582f-0606-49c8-8335-b90995f73124":    //Q21 ID    "Infection location Unconfirmed"
                            thisResponseElement.Q21 = respVal.Value;
                            break;
                        case "cd770314-51ec-4bb2-8ed4-9f5b63a0bc55":    //Q22 ID	"Symptoms"       --MULTI
                            thisResponseKV = new ResponseKeyValue()
                            {
                                ID = Guid.NewGuid(),
                                QuestionID = respVal.QuestionID.Value,
                                ResponseID = responseID,
                                Value = respVal.Value
                            };
                            responseKVList.Add(thisResponseKV);
                            break;
                        case "2c4f9eb1-bded-4a5e-aba9-d9f0a74b31fe":    //Q23 ID	"Symptom Severity"
                            thisResponseElement.Q23 = respVal.Value;
                            break;
                        case "ad7c128a-0cea-4b9e-bbe7-1854dacbbb97":    //Q24 ID	"Quarantined"
                            thisResponseElement.Q24 = respVal.Value;
                            break;
                        case "56575b64-5dce-4557-bd9d-bc5e3c58321e":    //Q25 ID	"Prevent spreading"     --MULTI
                            thisResponseKV = new ResponseKeyValue()
                            {
                                ID = Guid.NewGuid(),
                                QuestionID = respVal.QuestionID.Value,
                                ResponseID = responseID,
                                Value = respVal.Value
                            };
                            responseKVList.Add(thisResponseKV);
                            break;
                        case "8681201c-2c2f-4d8e-be7c-f1241f46d836":    //Q26 ID	"Reinfection"
                            thisResponseElement.Q26 = respVal.Value;
                            break;
                        case "2a9495ac-6232-4dbe-a571-a02d253810b7":    //Q27 ID	"Vaccine"
                            thisResponseElement.Q27 = respVal.Value;
                            break;
                        case "fa4f78d2-b814-4566-8e55-70445cccf57d":    //Q28 ID	"Control group"
                            thisResponseElement.Q28 = respVal.Value;
                            break;
                        //--	Quarantine
                        case "6a5f0d3f-7054-454e-998c-8c3867290c06":    //Q29 ID	"Discontinue quarantine"
                            thisResponseElement.Q29 = respVal.Value;
                            break;
                        //--	Not Quarantine
                        case "f099b3b2-48d2-4785-a88e-185038ff93e7":    //Q30 ID	"Why not quarantined"
                            thisResponseElement.Q30 = respVal.Value;
                            break;
                        //-- Neg/Don't think
                        case "1c93fc99-7361-4e56-a7bf-a0fb6ba8939a":    //Q31 ID    "Prevent contracting"   --MULTI
                            thisResponseKV = new ResponseKeyValue()
                            {
                                ID = Guid.NewGuid(),
                                QuestionID = respVal.QuestionID.Value,
                                ResponseID = responseID,
                                Value = respVal.Value
                            };
                            responseKVList.Add(thisResponseKV);
                            break;
                        case "c00c74fc-c4d2-45be-a267-c63e43d60f9f":    //Q32 ID	"Symptoms"              --MULTI
                            thisResponseKV = new ResponseKeyValue()
                            {
                                ID = Guid.NewGuid(),
                                QuestionID = respVal.QuestionID.Value,
                                ResponseID = responseID,
                                Value = respVal.Value
                            };
                            responseKVList.Add(thisResponseKV);
                            break;
                        case "4945eabb-2744-43b5-9761-a01460941ac3":    //Q33 ID	"Know someone"
                            thisResponseElement.Q33 = respVal.Value;
                            break;
                        case "aced6620-6644-4dd3-9262-4d08be8d3a98":    //Q34 ID	"Discontinue quarantine"
                            thisResponseElement.Q34 = respVal.Value;
                            break;
                        case "40fb9325-6e12-43ea-afe9-1df5dc445908":    //Q35 ID	"Concerned"
                            thisResponseElement.Q35 = respVal.Value;
                            break;
                        case "0298a8ec-bd3e-4df4-b050-de3bbb9f84a5":    //Q36 ID	"Vaccine"
                            thisResponseElement.Q36 = respVal.Value;
                            break;
                        case "b8dda44a-fb54-44d2-b285-a34d16b112a2":    //Q37 ID	"Control group"
                            thisResponseElement.Q37 = respVal.Value;
                            break;
                        case "f82cf1c7-d594-44e0-a762-3a6af0d51a75":    //Q38 ID	"Email"
                            thisResponseElement.Q38 = respVal.Value;
                            break;

                        default:
                            break;
                    }
                }

                var newOne = entities.InsertResponseElement(thisResponseElement.ID, covidID, responseID, thisResponseElement.DateCreated, thisResponseElement.Q1, thisResponseElement.Q2,
                    thisResponseElement.Q3, thisResponseElement.Q4, thisResponseElement.Q5, thisResponseElement.Q6, thisResponseElement.Q7, thisResponseElement.Q8,
                    thisResponseElement.Q9, thisResponseElement.Q10, thisResponseElement.Q11, thisResponseElement.Q12, thisResponseElement.Q13, thisResponseElement.Q14,
                    thisResponseElement.Q15, thisResponseElement.Q16, thisResponseElement.Q17, thisResponseElement.Q18, thisResponseElement.Q19, thisResponseElement.Q20,
                    thisResponseElement.Q21, thisResponseElement.Q22, thisResponseElement.Q23, thisResponseElement.Q24, thisResponseElement.Q25, thisResponseElement.Q26,
                    thisResponseElement.Q27, thisResponseElement.Q28, thisResponseElement.Q29, thisResponseElement.Q30, thisResponseElement.Q31, thisResponseElement.Q32,
                    thisResponseElement.Q33, thisResponseElement.Q34, thisResponseElement.Q35, thisResponseElement.Q36, thisResponseElement.Q37, thisResponseElement.Q38);

                entities.ResponseKeyValues.AddRange(responseKVList);
                entities.SaveChanges();

                Helper.LogMessage($"Items copied to ResponseElement: {itemCount}, Email: {thisResponseElement.Q38}");
            }
        }

        #endregion
        public string BulkUpdateAuditedResponses(string secretKey, string surveyID, string filename)
        {
            string responses = "";
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                surveyID = TrimIfNotNull(surveyID);
                filename = TrimIfNotNull(filename);

                var username = CheckUserHasRight(secretKey, "AuditResponse");
                if (Utils.IsError(username))
                {
                    return username;
                }

                Guid SurveyID;
                if (!Guid.TryParse(surveyID, out SurveyID))
                {
                    return Utils.WrapError("Survey ID is not in the correct format");
                }


                //ensure that the file is valie
                if (String.IsNullOrWhiteSpace(filename))
                {
                    return Utils.WrapError("Please ensure that the filename provided is not blank.");
                }

                #region Basics Setup

                //get the fullfilename
                string partialPath = @ConfigurationManager.AppSettings["BulkAuditedResponsesPath"].ToString();
                string fullFileName = null;
                if (partialPath.Contains('~'))
                {
                    //  if a virtual path  given
                    fullFileName = HttpContext.Current.Server.MapPath(partialPath + filename);
                }
                else
                {
                    //  physical path given
                    fullFileName = partialPath + filename;
                }

                if (!File.Exists(fullFileName))
                {
                    return Utils.WrapError("The file " + fullFileName + " could not be found for processing.");
                }

                #endregion

                #region Check if the logged in user is assuming a company

                //check if the user is assuming a company
                var assumeResult = CheckAssumeCompany(secretKey);
                if (Utils.IsError(assumeResult))
                {
                    return assumeResult;
                }

                //parse the company ID to a Guid
                Guid CompanyID = Guid.Empty;
                if (!Guid.TryParse(assumeResult, out CompanyID))
                {
                    return Utils.WrapError("The ID of the Company that you are trying to view is in the incorrect format");
                }

                #endregion

                //get the ID for the logged in user
                Guid LoggedInUserID = (Guid)Membership.GetUser(username).ProviderUserKey;
                //store all the current rates
                List<Guid> SurveyResponsesIDs = new List<Guid>();
                List<AuditedRespons> SurveyResponsesValues = new List<AuditedRespons>();

                //here we will read in the excel file
                string connectionstring = @"Provider=Microsoft.ACE.OLEDB.12.0; Data Source=" + fullFileName + "; Extended Properties='Excel 12.0;HDR=YES'";
                using (OleDbConnection conn = new OleDbConnection(connectionstring))
                {
                    Int64 Row = 0;
                    Int64 RowNumber = 0;
                    Guid AuditedResponseID = Guid.Empty;
                    string AuditedResponseValue = "";
                    AuditedRespons ar;


                    responses += "<br />Starting the excel read.";
                    using (OleDbCommand cmd = conn.CreateCommand())
                    {
                        conn.Open();
                        cmd.CommandText = "SELECT * FROM [SurveyResponses$]";
                        OleDbDataReader reader = cmd.ExecuteReader();

                        while (reader.Read())
                        {
                            responses += "<br />Processing Row - " + Row;
                            RowNumber = reader["RowNumber"] != null ? Int64.Parse(reader["RowNumber"].ToString()) : 0;
                            responses += "<br />With RowNumber - " + RowNumber;
                            //Run through some validation
                            //get all the items and validate them

                            string id = reader["AuditedResponsesID"] != null ? reader["AuditedResponsesID"].ToString() : "";

                            if (!Guid.TryParse(id, out AuditedResponseID))
                            {
                                return Utils.WrapError("Audited Responses Error on line " + RowNumber + " - Invalid AuditedResponsesID <br />Provided value - " + id);
                            }

                            AuditedResponseValue = reader["ResponseValue"] != null ? reader["ResponseValue"].ToString() : "";

                            if (String.IsNullOrWhiteSpace(AuditedResponseValue))
                            {
                                return Utils.WrapError("Audited Responses Error on line " + RowNumber + " - Empty AuditedResponseValue");
                            }
                            ar = new AuditedRespons
                            {
                                ID = AuditedResponseID,
                                ResponseValue = AuditedResponseValue
                                //can add more here
                            };
                            SurveyResponsesIDs.Add(AuditedResponseID);
                            SurveyResponsesValues.Add(ar);
                            Row++;
                        }
                    }

                }

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    //check that the survey exists
                    var allSurveyAuditedResponses = (from ar in entity.AuditedResponses
                                                     where SurveyResponsesIDs.Contains(ar.ID)
                                                     select ar).ToList();

                    if (allSurveyAuditedResponses == null || allSurveyAuditedResponses.Count < 1)
                    {
                        string IDs = String.Join(", ", SurveyResponsesIDs);
                        return Utils.WrapError("No audit responses found for updating");
                    }
                    /*
                    AuditedRespons newResp;
                    foreach (var itemToUpdate in allSurveyAuditedResponses)
                    {
                        newResp = SurveyResponsesValues.FirstOrDefault(ar1 => ar1.ID == itemToUpdate.ID);
                        if(newResp==null){
                            return Utils.WrapError("No 'AuditedResponsesID' with value: "+ar1.ID);
                        }
                            itemToUpdate.ResponseValue = newResp.ResponseValue;
                    }

                    entity.AuditedResponses.

                    ZIBA ZIBA
                    */

                    // foreach AuditedRespons from excel (SurveyResponsesValues)
                    // find it's db equivalent (allSurveyAuditedResponses) and update it
                    List<AuditedRespons> listOfOne;
                    foreach (var item in SurveyResponsesValues)
                    {
                        listOfOne = allSurveyAuditedResponses.Where(ar1 => ar1.ID == item.ID).ToList();
                        if (listOfOne == null || listOfOne.Count != 1)
                        {
                            return Utils.WrapError("No 'AuditedResponsesID' with value: " + item.ID);
                        }

                        listOfOne
                            .ForEach(ar2 =>
                            {
                                ar2.ResponseValue = item.ResponseValue;
                                //can add more here
                            });
                    }
                    entity.SaveChanges();

                    #region Audited Responses
                    responses += "<br />Audited Responses completed Fine.";
                    #endregion

                    dynamic returnItem = new JObject();
                    returnItem.Status = "Success";
                    return returnItem.ToString();
                }


            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors + "\n\r" + responses);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message + "\n\r" + responses);
            }
        }

        //get the image for the requested response id
        public string GetAuditedResponseImage(string secretKey, string auditedResponseID)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                auditedResponseID = TrimIfNotNull(auditedResponseID);

                var username = CheckUserHasRight(secretKey, "ViewResponses");
                if (Utils.IsError(username))
                {
                    return username;
                }

                Guid AuditedResponseID;
                if (!Guid.TryParse(auditedResponseID, out AuditedResponseID))
                {
                    return Utils.WrapError("Audited Response ID is not in the correct format");
                }

                #region Check if the logged in user is assuming a company

                //check if the user is assuming a company
                var assumeResult = CheckAssumeCompany(secretKey);
                if (Utils.IsError(assumeResult))
                {
                    return assumeResult;
                }

                //parse the company ID to a Guid
                Guid CompanyID = Guid.Empty;
                if (!Guid.TryParse(assumeResult, out CompanyID))
                {
                    return Utils.WrapError("The ID of the Company that you are trying to view is in the incorrect format");
                }

                #endregion

                //get the ID for the logged in user
                Guid LoggedInUserID = (Guid)Membership.GetUser(username).ProviderUserKey;

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    //check that the response exists
                    var curResponse = (from r in entity.AuditedResponses
                                       join q in entity.Questions
                                       on r.ResponseValueQuestionID equals q.ID
                                       join qt in entity.QuestionTypes
                                       on q.QuestionType equals qt.ID
                                       where r.ID == AuditedResponseID
                                       select new
                                       {
                                           r.ResponseValue,
                                           qt.Type,
                                           QuestionTypeID = qt.ID
                                       }).FirstOrDefault();

                    if (curResponse == null)
                    {
                        return Utils.WrapError("The response you are trying to view cannot be found");
                    }

                    if (curResponse.QuestionTypeID != CameraType && curResponse.QuestionTypeID != SignatureType)
                    {
                        return Utils.WrapError("The response you are trying to view is not a valid image or signature");
                    }

                    dynamic returnItem = new JObject();
                    returnItem.Status = "Success";
                    returnItem.ResponseValue = curResponse.ResponseValue;
                    return returnItem.ToString();
                }


            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        public string GetOriginalResponses(string secretKey, string surveyID)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                surveyID = TrimIfNotNull(surveyID);

                var username = CheckUserHasRight(secretKey, "ViewResponses");
                if (Utils.IsError(username))
                {
                    return username;
                }

                Guid SurveyID;
                if (!Guid.TryParse(surveyID, out SurveyID))
                {
                    return Utils.WrapError("Survey ID is not in the correct format");
                }

                #region Check if the logged in user is assuming a company

                //check if the user is assuming a company
                var assumeResult = CheckAssumeCompany(secretKey);
                if (Utils.IsError(assumeResult))
                {
                    return assumeResult;
                }

                //parse the company ID to a Guid
                Guid CompanyID = Guid.Empty;
                if (!Guid.TryParse(assumeResult, out CompanyID))
                {
                    return Utils.WrapError("The ID of the Company that you are trying to view is in the incorrect format");
                }

                #endregion

                //get the ID for the logged in user
                Guid LoggedInUserID = (Guid)Membership.GetUser(username).ProviderUserKey;

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    //check that the survey exists
                    var curSurvey = (from s in entity.Surveys
                                     join p in entity.Projects
                                     on s.ProjectID equals p.ID
                                     where s.ID == SurveyID && p.ProjectCompany == CompanyID
                                     select new
                                     {
                                         s.ID,
                                         CompanyID = p.ProjectCompany,
                                         ProjectID = p.ID,
                                         s.SurveyTitle
                                     }).FirstOrDefault();

                    if (curSurvey == null)
                    {
                        return Utils.WrapError("The survey you are trying to view responses for cannot be found");
                    }

                    var curResponses = entity.GetResponses(SurveyID).ToList();

                    dynamic returnItem = new JObject();
                    returnItem.Status = "Success";
                    returnItem.Responses = Helper.SerializeToJavascriptOject(curResponses);
                    returnItem.SurveyName = curSurvey.SurveyTitle;
                    return returnItem.ToString();
                }


            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        //get the image for the requested response id
        public string GetOriginalResponseImage(string secretKey, string responseID)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                responseID = TrimIfNotNull(responseID);

                var username = CheckUserHasRight(secretKey, "ViewResponses");
                if (Utils.IsError(username))
                {
                    return username;
                }

                Guid ResponseID;
                if (!Guid.TryParse(responseID, out ResponseID))
                {
                    return Utils.WrapError("Response ID is not in the correct format");
                }

                #region Check if the logged in user is assuming a company

                //check if the user is assuming a company
                var assumeResult = CheckAssumeCompany(secretKey);
                if (Utils.IsError(assumeResult))
                {
                    return assumeResult;
                }

                //parse the company ID to a Guid
                Guid CompanyID = Guid.Empty;
                if (!Guid.TryParse(assumeResult, out CompanyID))
                {
                    return Utils.WrapError("The ID of the Company that you are trying to view is in the incorrect format");
                }

                #endregion

                //get the ID for the logged in user
                Guid LoggedInUserID = (Guid)Membership.GetUser(username).ProviderUserKey;

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    //check that the response exists
                    var curResponse = (from rv in entity.ResponseValues
                                       join q in entity.Questions
                                       on rv.QuestionID equals q.ID
                                       join qt in entity.QuestionTypes
                                       on q.QuestionType equals qt.ID
                                       join r in entity.Responses
                                       on rv.ResponseID equals r.ID
                                       where rv.ID == ResponseID
                                       select new
                                       {
                                           ResponseValue = rv.Value,
                                           rv.QuestionID,
                                           qt.Type,
                                           QuestionTypeID = qt.ID,
                                           SurveyTitle = r.SurveyTitle
                                       }).FirstOrDefault();

                    if (curResponse == null)
                    {
                        return Utils.WrapError("The response you are trying to view cannot be found");
                    }

                    if (curResponse.QuestionTypeID != CameraType && curResponse.QuestionTypeID != SignatureType)
                    {
                        return Utils.WrapError("The response you are trying to view is not a valid image or signature");
                    }

                    dynamic returnItem = new JObject();
                    returnItem.Status = "Success";
                    returnItem.ResponseValue = curResponse.ResponseValue;
                    returnItem.SurveyTitle = curResponse.SurveyTitle;
                    return returnItem.ToString();
                }


            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }


        #endregion

        #region Reports

        //create a new group
        public string CreateDynamicReport(string secretKey, string ReportName, string surveyID, string companyToAddTo)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                ReportName = TrimIfNotNull(ReportName);
                surveyID = TrimIfNotNull(surveyID);

                var username = CheckUserHasRight(secretKey, "CreateDynamicReport");
                if (Utils.IsError(username))
                {
                    return username;
                }

                //check if the user is an administrator
                /* var IsAdmin = CheckUserHasAdminRole(secretKey);

                 //if the user is not an admin 
                 if (Utils.IsError(IsAdmin))
                 {
                     var userCompany = CheckUserCompany(secretKey, companyID);
                     if (Utils.IsError(userCompany))
                     {
                         return userCompany;
                     }
                 }*/

                if (string.IsNullOrWhiteSpace(ReportName))
                {
                    return Utils.WrapError("Please ensure that you enter a report name");
                }

                Guid SurveyID;
                if (!Guid.TryParse(surveyID, out SurveyID))
                {
                    return Utils.WrapError("Survey ID is not in the correct format");
                }

                //convert the company id received
                /*Guid CompanyID;
                if (!Guid.TryParse(companyID, out CompanyID))
                {
                    return Utils.WrapError("Company ID is not in the correct format");
                }*/


                Guid LoggedInUserID;

                Guid CompanyID = Guid.Empty;

                if (!string.IsNullOrWhiteSpace(companyToAddTo) && Guid.TryParse(companyToAddTo, out CompanyID))
                {
                    // Use the provided company (Company admin activated the first package)
                    LoggedInUserID = Guid.Empty;
                }
                else
                {
                    #region Check if the logged in user is assuming a company

                    //check if the user is assuming a company
                    var assumeResult = CheckAssumeCompany(secretKey);
                    if (Utils.IsError(assumeResult))
                    {
                        return assumeResult;
                    }

                    if (!Guid.TryParse(assumeResult, out CompanyID))
                    {
                        return Utils.WrapError("The ID of the Company that you are trying to view is in the incorrect format");
                    }

                    #endregion
                }

                LoggedInUserID = (Guid)Membership.GetUser(username).ProviderUserKey;

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    var survey = (from s in entity.Surveys
                                  join p in entity.Projects
                                  on s.ProjectID equals p.ID
                                  where s.ID == SurveyID && p.ProjectCompany == CompanyID
                                  select new
                                  {
                                      s.ID,
                                      s.ProjectID,
                                      CompanyID = p.ProjectCompany
                                  }).FirstOrDefault();

                    if (survey == null)
                    {
                        return Utils.WrapError("The survey details could not be found");
                    }

                    //create a new question group
                    var newDR = new DynamicReport();
                    Guid NewDRID = Guid.NewGuid();
                    newDR.ID = NewDRID;
                    newDR.CompanyID = survey.CompanyID;
                    newDR.SurveyID = survey.ID;
                    newDR.DateCreated = DateTime.Now;
                    newDR.ReportName = ReportName;
                    newDR.SurveyID = SurveyID;
                    if (LoggedInUserID != Guid.Empty)
                    {
                        newDR.UserID = LoggedInUserID;
                        var userDets = entity.aspnet_Membership.FirstOrDefault(m => m.UserId == LoggedInUserID);
                        if (userDets != null) { newDR.UserFullName = userDets.Firstnames + " " + userDets.Lastname; }
                    }

                    entity.DynamicReports.Add(newDR);
                    entity.SaveChanges();


                    dynamic returnItem = new JObject();
                    returnItem.ID = NewDRID;
                    returnItem.Status = "Success";
                    return returnItem.ToString();
                }
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        public string GetDynamicReports(string secretKey, string surveyID)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                surveyID = TrimIfNotNull(surveyID);

                var username = CheckUserHasRight(secretKey, "GetAllDynamicReports");
                if (Utils.IsError(username))
                {
                    return username;
                }

                Guid SurveyID;
                if (!Guid.TryParse(surveyID, out SurveyID))
                {
                    return Utils.WrapError("Survey ID is in the incorrect format");
                }

                //convert the company id received
                /*Guid CompanyID;
                if (!Guid.TryParse(companyID, out CompanyID))
                {
                    return Utils.WrapError("Company ID is not in the correct format");
                }

                //check if the user is an administrator
                var IsAdmin = CheckUserHasAdminRole(secretKey);

                //if the user is not an admin 
                if (Utils.IsError(IsAdmin))
                {
                    var userCompany = CheckUserCompany(secretKey, companyID);
                    if (Utils.IsError(userCompany))
                    {
                        return userCompany;
                    }
                }
                */

                #region Check if the logged in user is assuming a company

                //check if the user is assuming a company
                var assumeResult = CheckAssumeCompany(secretKey);
                if (Utils.IsError(assumeResult))
                {
                    return assumeResult;
                }

                //parse the company ID to a Guid
                Guid CompanyID = Guid.Empty;
                if (!Guid.TryParse(assumeResult, out CompanyID))
                {
                    return Utils.WrapError("The ID of the Company that you are trying to view is in the incorrect format");
                }

                #endregion

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {

                    //read the survey info
                    var reports = (from dr in entity.DynamicReports
                                   where dr.SurveyID == SurveyID
                                   orderby dr.DateCreated
                                   select new
                                   {
                                       dr.ID,
                                       ReportName = dr.ReportName,
                                       dr.DateCreated,
                                       CreatedByID = dr.UserID,
                                       CreatedByName = dr.UserFullName
                                   }).ToList();

                    if (reports == null || reports.Count <= 0)
                    {
                        return "[]";
                    }

                    return Helper.SerializeToJavascriptOject(reports);

                }
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        public string GetSpecificDynamicReport(string secretKey, string reportID)
        {
            try
            {

                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                reportID = TrimIfNotNull(reportID);

                var username = CheckUserHasRight(secretKey, "GetAllDynamicReports");
                if (Utils.IsError(username))
                {
                    return username;
                }

                Guid ReportID;
                if (!Guid.TryParse(reportID, out ReportID))
                {
                    return Utils.WrapError("Report ID is in the incorrect format");
                }


                #region Check if the logged in user is assuming a company

                //check if the user is assuming a company
                var assumeResult = CheckAssumeCompany(secretKey);
                if (Utils.IsError(assumeResult))
                {
                    return assumeResult;
                }

                //parse the company ID to a Guid
                Guid CompanyID = Guid.Empty;
                if (!Guid.TryParse(assumeResult, out CompanyID))
                {
                    return Utils.WrapError("The ID of the Company that you are trying to view is in the incorrect format");
                }

                #endregion

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {

                    var report = (from dr in entity.DynamicReports
                                  where dr.ID == ReportID
                                  select new
                                  {
                                      dr.ID,
                                      dr.SurveyID,
                                      ReportName = dr.ReportName,
                                      dr.DateCreated,
                                      CreatedByID = dr.UserID,
                                      CreatedByName = dr.UserFullName
                                  }).FirstOrDefault();

                    if (report == null)
                    {
                        return "{}";
                    }

                    //read the survey info
                    var survey = (from s in entity.Surveys
                                  where s.ID == report.SurveyID
                                  select new
                                  {
                                      s.ID,
                                      s.SurveyTitle
                                  }).FirstOrDefault();

                    var reportFilters = (from drf in entity.DynamicReportFilters
                                         where drf.DynamicReportID == ReportID
                                         select new
                                         {
                                             drf.ID,
                                             drf.DynamicReportID,
                                             drf.FilterName,
                                             drf.FilterCount,
                                             drf.QuestionID1,
                                             drf.QuestionCondition1,
                                             drf.QuestionCompareValue1,
                                             drf.QuestionID2,
                                             drf.QuestionCondition2,
                                             drf.QuestionCompareValue2,
                                             drf.QuestionID3,
                                             drf.QuestionCondition3,
                                             drf.QuestionCompareValue3
                                         }).ToList();

                    dynamic returnObj = new JObject();
                    returnObj.ID = report.ID.ToString();
                    returnObj.ReportName = report.ReportName.ToString();
                    returnObj.SurveyID = survey.ID.ToString();
                    returnObj.SurveyName = survey.SurveyTitle.ToString();
                    returnObj.DateCreated = report.DateCreated.ToString();
                    returnObj.CreatedByID = report.CreatedByID.ToString();
                    returnObj.CreatedByName = report.CreatedByName.ToString();
                    returnObj.Filters = Helper.SerializeToJavascriptOject(reportFilters);

                    return returnObj.ToString();
                }
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        public string UpdateDynamicReportFilter(string secretKey, string filterID, string filterName, string companyToAddTo,
            string questionID1, string questionCondition1, string questionCompareValue1,
            string questionID2, string questionCondition2, string questionCompareValue2,
            string questionID3, string questionCondition3, string questionCompareValue3,
            string questionID4, string questionCondition4, string questionCompareValue4,
            string questionID5, string questionCondition5, string questionCompareValue5,
            string questionID6, string questionCondition6, string questionCompareValue6)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                filterID = TrimIfNotNull(filterID);
                filterName = TrimIfNotNull(filterName);

                questionID1 = TrimIfNotNull(questionID1);

                questionID2 = TrimIfNotNull(questionID2);

                questionID3 = TrimIfNotNull(questionID3);

                questionID4 = TrimIfNotNull(questionID4);

                questionID5 = TrimIfNotNull(questionID5);

                questionID6 = TrimIfNotNull(questionID6);


                var username = CheckUserHasRight(secretKey, "CreateDynamicReport");
                if (Utils.IsError(username))
                {
                    return username;
                }
                if (string.IsNullOrWhiteSpace(filterName))
                {
                    return Utils.WrapError("Please ensure that you enter a name for this filter");
                }

                Guid FilterID;
                if (!Guid.TryParse(filterID, out FilterID))
                {
                    return Utils.WrapError("Report ID is not in the correct format");
                }

                #region Validate the filters
                Guid tempGuid;
                if (!string.IsNullOrWhiteSpace(questionID1) || !string.IsNullOrWhiteSpace(questionCondition1) || !string.IsNullOrWhiteSpace(questionCompareValue1))
                {
                    // if ONE value is provided then ALL value must be provided
                    if (string.IsNullOrWhiteSpace(questionID1) || string.IsNullOrWhiteSpace(questionCondition1) || string.IsNullOrWhiteSpace(questionCompareValue1))
                    {
                        return Utils.WrapError("Please provide all values for filter number 1");
                    }

                    if (!Guid.TryParse(questionID1, out tempGuid))
                    {
                        return Utils.WrapError("Question 1 ID is not in the correct format");
                    }

                    if (!compareStrings.Contains(questionCondition1))
                    {
                        return Utils.WrapError("Invalid comparator 1");
                    }
                }

                if (!string.IsNullOrWhiteSpace(questionID2) || !string.IsNullOrWhiteSpace(questionCondition2) || !string.IsNullOrWhiteSpace(questionCompareValue2))
                {
                    // if ONE value is provided then ALL value must be provided
                    if (string.IsNullOrWhiteSpace(questionID2) || string.IsNullOrWhiteSpace(questionCondition2) || string.IsNullOrWhiteSpace(questionCompareValue2))
                    {
                        return Utils.WrapError("Please provide all values for filter number 2");
                    }

                    if (!Guid.TryParse(questionID2, out tempGuid))
                    {
                        return Utils.WrapError("Question 2 ID is not in the correct format");
                    }

                    if (!compareStrings.Contains(questionCondition2))
                    {
                        return Utils.WrapError("Invalid comparator 2");
                    }
                }

                if (!string.IsNullOrWhiteSpace(questionID3) || !string.IsNullOrWhiteSpace(questionCondition3) || !string.IsNullOrWhiteSpace(questionCompareValue3))
                {
                    // if ONE value is provided then ALL value must be provided
                    if (string.IsNullOrWhiteSpace(questionID3) || string.IsNullOrWhiteSpace(questionCondition3) || string.IsNullOrWhiteSpace(questionCompareValue3))
                    {
                        return Utils.WrapError("Please provide all values for filter number 3");
                    }

                    if (!Guid.TryParse(questionID3, out tempGuid))
                    {
                        return Utils.WrapError("Question 3 ID is not in the correct format");
                    }

                    if (!compareStrings.Contains(questionCondition3))
                    {
                        return Utils.WrapError("Invalid comparator 3");
                    }
                }

                if (!string.IsNullOrWhiteSpace(questionID4) || !string.IsNullOrWhiteSpace(questionCondition4) || !string.IsNullOrWhiteSpace(questionCompareValue4))
                {
                    // if ONE value is provided then ALL value must be provided
                    if (string.IsNullOrWhiteSpace(questionID4) || string.IsNullOrWhiteSpace(questionCondition4) || string.IsNullOrWhiteSpace(questionCompareValue4))
                    {
                        return Utils.WrapError("Please provide all values for filter number 4");
                    }

                    if (!Guid.TryParse(questionID4, out tempGuid))
                    {
                        return Utils.WrapError("Question 4 ID is not in the correct format");
                    }

                    if (!compareStrings.Contains(questionCondition4))
                    {
                        return Utils.WrapError("Invalid comparator 4");
                    }
                }

                if (!string.IsNullOrWhiteSpace(questionID5) || !string.IsNullOrWhiteSpace(questionCondition5) || !string.IsNullOrWhiteSpace(questionCompareValue5))
                {
                    // if ONE value is provided then ALL value must be provided
                    if (string.IsNullOrWhiteSpace(questionID5) || string.IsNullOrWhiteSpace(questionCondition5) || string.IsNullOrWhiteSpace(questionCompareValue5))
                    {
                        return Utils.WrapError("Please provide all values for filter number 5");
                    }

                    if (!Guid.TryParse(questionID5, out tempGuid))
                    {
                        return Utils.WrapError("Question 5 ID is not in the correct format");
                    }

                    if (!compareStrings.Contains(questionCondition5))
                    {
                        return Utils.WrapError("Invalid comparator 5");
                    }
                }

                if (!string.IsNullOrWhiteSpace(questionID6) || !string.IsNullOrWhiteSpace(questionCondition6) || !string.IsNullOrWhiteSpace(questionCompareValue6))
                {
                    // if ONE value is provided then ALL value must be provided
                    if (string.IsNullOrWhiteSpace(questionID6) || string.IsNullOrWhiteSpace(questionCondition6) || string.IsNullOrWhiteSpace(questionCompareValue6))
                    {
                        return Utils.WrapError("Please provide all values for filter number 6");
                    }

                    if (!Guid.TryParse(questionID6, out tempGuid))
                    {
                        return Utils.WrapError("Question 6 ID is not in the correct format");
                    }

                    if (!compareStrings.Contains(questionCondition6))
                    {
                        return Utils.WrapError("Invalid comparator 6");
                    }
                }

                #endregion

                Guid LoggedInUserID;

                Guid CompanyID = Guid.Empty;

                if (!string.IsNullOrWhiteSpace(companyToAddTo) && Guid.TryParse(companyToAddTo, out CompanyID))
                {
                    // Use the provided company (Company admin activated the first package)
                    LoggedInUserID = Guid.Empty;
                }
                else
                {
                    #region Check if the logged in user is assuming a company

                    //check if the user is assuming a company
                    var assumeResult = CheckAssumeCompany(secretKey);
                    if (Utils.IsError(assumeResult))
                    {
                        return assumeResult;
                    }

                    if (!Guid.TryParse(assumeResult, out CompanyID))
                    {
                        return Utils.WrapError("The ID of the Company that you are trying to view is in the incorrect format");
                    }

                    #endregion
                }

                LoggedInUserID = (Guid)Membership.GetUser(username).ProviderUserKey;

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    string baseSql, q1Str, q2Str, q3Str, q4Str = "", q5Str = "", q6Str = "";
                    Guid? q1ID, q2ID, q3ID, q4ID = null, q5ID = null, q6ID = null;
                    Int64 tempInt, ids = 0, ids2 = 0, count = 0;

                    var survey = (from rf in entity.DynamicReportFilters
                                  join r in entity.DynamicReports on rf.DynamicReportID equals r.ID
                                  join s in entity.Surveys on r.SurveyID equals s.ID
                                  where rf.ID == FilterID
                                  select s).FirstOrDefault();
                    if (survey == null)
                    {
                        return Utils.WrapError("No survey found for this report.");
                    }



                    List<Guid> queIDs = new List<Guid>();
                    if (Guid.TryParse(questionID1, out tempGuid))
                    {
                        queIDs.Add(tempGuid);
                    }

                    if (Guid.TryParse(questionID2, out tempGuid))
                    {
                        queIDs.Add(tempGuid);
                    }

                    if (Guid.TryParse(questionID3, out tempGuid))
                    {
                        queIDs.Add(tempGuid);
                    }

                    Helper.LogError(String.Format("queIDs count: {0}, queIDs: {1}", queIDs.Count(), queIDs.ToString()), null);

                    var groupIDs = (entity.Questions.Where(q => queIDs.Contains(q.ID)).Select(q => q.GroupID)).ToList();
                    Helper.LogError(String.Format("groupIDs count: {0}, groupIDs: {1}", groupIDs.Count(), groupIDs.ToString()), null);

                    var GroupTypes = (from g in entity.QuestionGroups
                                      where groupIDs.Contains(g.ID)
                                      select g.GroupType).Distinct();


                    Helper.LogError(String.Format("GroupTypes count: {0}, GroupTypes: {1}", GroupTypes.Count(), GroupTypes.ToString()), null);

                    if (GroupTypes.Count() > 1 && GroupTypes.Contains("Table"))
                    {
                        return Utils.WrapError("Filter questions cannot be from Table and Normal sections, this will always return zero");
                    }

                    if (GroupTypes.Count() == 1 && GroupTypes.Contains("Table"))
                    {

                        #region  generation TABLE filter sql string

                        baseSql = " FROM [dbo].[AuditedResponses] ar" +
                            " JOIN [dbo].[ResponseValues] rs ON ar.[ResponseValueID] = rs.[ID]" +
                            " JOIN [dbo].[Question] q ON ar.[ResponseValueQuestionID] = q.[ID]" +
                            " JOIN [dbo].[QuestionGroups] qg ON q.[GroupID] = qg.[ID]" +
                            " WHERE  ar.[SurveyID]=N'" + survey.ID + "'  AND GroupType = 'Table' ";

                        q1Str = "";
                        q1ID = null;
                        if (!string.IsNullOrWhiteSpace(questionID1) && Guid.TryParse(questionID1, out tempGuid))
                        {
                            q1ID = (Guid?)tempGuid;
                            q1Str = " count(distinct rs.QuestionRowID) " + baseSql;

                            q1Str = q1Str + " and ar.[ResponseValueQuestionID]=N'" + questionID1 + "'";
                            if (Int64.TryParse(questionCompareValue1, out tempInt))
                            {
                                q1Str = q1Str +
                                    " and CAST(ar.[ResponseValue] as bigint) " + questionCondition1 + " " + questionCompareValue1;
                            }
                            else
                            {
                                q1Str = q1Str +
                                    " and ar.[ResponseValue] " + questionCondition1 + " N'" + questionCompareValue1 + "'";
                            }
                            count++;
                        }

                        q2Str = "";
                        q2ID = null;
                        if (!string.IsNullOrWhiteSpace(questionID2) && Guid.TryParse(questionID2, out tempGuid))
                        {
                            q2ID = (Guid?)tempGuid;
                            if (count > 0)
                            {
                                q1Str = q1Str + " and rs.QuestionRowID in" +
                                    "( select rs.QuestionRowID " + baseSql;
                            }
                            else
                            {
                                q1Str = q1Str + " count(distinct rs.QuestionRowID) " + baseSql;
                            }

                            q1Str = q1Str + " and ar.[ResponseValueQuestionID]=N'" + questionID2 + "'";

                            if (Int64.TryParse(questionCompareValue2, out tempInt))
                            {
                                q1Str = q1Str +
                                    " and CAST(ar.[ResponseValue] as bigint)" + questionCondition2 + questionCompareValue2;
                            }
                            else
                            {
                                q1Str = q1Str +
                                    " and ar.[ResponseValue]" + questionCondition2 + "'" + questionCompareValue2 + "'";
                            }
                            count++;
                        }

                        q3Str = "";
                        q3ID = null;
                        if (!string.IsNullOrWhiteSpace(questionID3) && Guid.TryParse(questionID3, out tempGuid))
                        {
                            q3ID = (Guid?)tempGuid;
                            if (count > 0)
                            {
                                q1Str = q1Str + " and rs.QuestionRowID in" +
                                    "( select distinct rs.QuestionRowID " + baseSql;
                            }
                            else
                            {
                                q1Str = " count(distinct rs.QuestionRowID) " + baseSql;
                            }
                            q1Str = q1Str + " and ar.[ResponseValueQuestionID]=N'" + questionID3 + "'";

                            if (Int64.TryParse(questionCompareValue3, out tempInt))
                            {
                                q1Str = q1Str +
                                    " and CAST(ar.[ResponseValue] as bigint)" + questionCondition3 + questionCompareValue3;
                            }
                            else
                            {
                                q1Str = q1Str +
                                    " and ar.[ResponseValue]" + questionCondition3 + "'" + questionCompareValue3 + "'";
                            }
                            count++;
                        }

                        if (count == 2)
                        {
                            q1Str += ")";
                        }
                        else if (count == 3)
                        {
                            q1Str += "))";
                        }
                        #endregion
                    }
                    else
                    {

                        #region  generation NON TABLE filter sql string

                        baseSql = "FROM [dbo].[AuditedResponses] ar" +
                            " JOIN [dbo].[ResponseValues] rs ON ar.[ResponseValueID] = rs.[ID]" +
                            " JOIN [dbo].[Question] q ON ar.[ResponseValueQuestionID] = q.[ID]" +
                            " JOIN [dbo].[QuestionGroups] qg ON q.[GroupID] = qg.[ID]" +
                            " WHERE  ar.[SurveyID]=N'" + survey.ID + "' ";

                        q1Str = "";
                        q1ID = null;
                        if (!string.IsNullOrWhiteSpace(questionID1) && Guid.TryParse(questionID1, out tempGuid))
                        {
                            q1ID = (Guid?)tempGuid;
                            q1Str = " count(distinct ar.responseid) " + baseSql;

                            q1Str = q1Str + " and ar.[ResponseValueQuestionID]=N'" + questionID1 + "'";
                            if (Int64.TryParse(questionCompareValue1, out tempInt))
                            {
                                q1Str = q1Str +
                                    " and CAST(ar.[ResponseValue] as bigint) " + questionCondition1 + " " + questionCompareValue1;
                            }
                            else
                            {
                                q1Str = q1Str +
                                    " and ar.[ResponseValue] " + questionCondition1 + " N'" + questionCompareValue1 + "'";
                            }
                            count++;
                        }

                        q2Str = "";
                        q2ID = null;
                        if (!string.IsNullOrWhiteSpace(questionID2) && Guid.TryParse(questionID2, out tempGuid))
                        {
                            q2ID = (Guid?)tempGuid;
                            if (count > 0)
                            {
                                q1Str = q1Str + " and ar.ResponseID in" +
                                    "( select distinct ar.responseid " + baseSql;
                            }
                            else
                            {
                                q1Str = q1Str + " count(distinct ar.responseid) " + baseSql;
                            }

                            q1Str = q1Str + " and ar.[ResponseValueQuestionID]=N'" + questionID2 + "'";

                            if (Int64.TryParse(questionCompareValue2, out tempInt))
                            {
                                q1Str = q1Str +
                                    " and CAST(ar.[ResponseValue] as bigint)" + questionCondition2 + questionCompareValue2;
                            }
                            else
                            {
                                q1Str = q1Str +
                                    " and ar.[ResponseValue]" + questionCondition2 + "'" + questionCompareValue2 + "'";
                            }
                            count++;
                        }

                        q3Str = "";
                        q3ID = null;
                        if (!string.IsNullOrWhiteSpace(questionID3) && Guid.TryParse(questionID3, out tempGuid))
                        {
                            q3ID = (Guid?)tempGuid;
                            if (count > 0)
                            {
                                q1Str = q1Str + " and ar.ResponseID in" +
                                    "( select distinct ar.responseid " + baseSql;
                            }
                            else
                            {
                                q1Str = " count(distinct ar.responseid) " + baseSql;
                            }
                            q1Str = q1Str + " and ar.[ResponseValueQuestionID]=N'" + questionID3 + "'";

                            if (Int64.TryParse(questionCompareValue3, out tempInt))
                            {
                                q1Str = q1Str +
                                    " and CAST(ar.[ResponseValue] as bigint)" + questionCondition3 + questionCompareValue3;
                            }
                            else
                            {
                                q1Str = q1Str +
                                    " and ar.[ResponseValue]" + questionCondition3 + "'" + questionCompareValue3 + "'";
                            }
                            count++;
                        }

                        if (count == 2)
                        {
                            q1Str += ")";
                        }
                        else if (count == 3)
                        {
                            q1Str += "))";
                        }
                        #endregion
                    }


                    var sqlString = "SELECT @filterCount = " + q1Str + ";";


                    /*
                    var sqlString = "SELECT @filterCount = COUNT(ar.ID) " +
                        "FROM [dbo].[AuditedResponses] ar " +
                        "WHERE SurveyID=N'" + survey.ID + "' " +
                        q1Str + q2Str + q3Str + q4Str + q5Str + q6Str;
                    */


                    Helper.LogMessage(String.Format("sqlString: {0}", sqlString));

                    var newFilterID = entity.UpdateDynamicReportFilter(FilterID, filterName,
                        q1ID, questionCondition1, questionCompareValue1,
                        q2ID, questionCondition2, questionCompareValue2,
                        q3ID, questionCondition3, questionCompareValue3,
                        q4ID, questionCondition4, questionCompareValue4,
                        q5ID, questionCondition5, questionCompareValue5,
                        q6ID, questionCondition6, questionCompareValue6,
                        sqlString);

                    //create a new question group
                    /*var newDR = new DynamicReport();
                    Guid NewDRID = Guid.NewGuid();
                    newDR.ID = NewDRID;
                    */


                    //entity.DynamicReports.Add(newDR);
                    //entity.SaveChanges();


                    dynamic returnItem = new JObject();
                    returnItem.FilterID = newFilterID == null ? null : (String)newFilterID.ToString();
                    returnItem.Status = "Success";
                    return returnItem.ToString();
                }
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        /*
        public string CreateDynamicReportFilter2(string secretKey, string reportID, string surveyID, string filterName, string companyToAddTo,
            string questionID1, string questionCondition1, string questionCompareValue1,
            string questionID2, string questionCondition2, string questionCompareValue2,
            string questionID3, string questionCondition3, string questionCompareValue3,
            string questionID4, string questionCondition4, string questionCompareValue4,
            string questionID5, string questionCondition5, string questionCompareValue5,
            string questionID6, string questionCondition6, string questionCompareValue6)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                reportID = TrimIfNotNull(reportID);
                surveyID = TrimIfNotNull(surveyID);
                filterName = TrimIfNotNull(filterName);

                questionID1 = TrimIfNotNull(questionID1);

                questionID2 = TrimIfNotNull(questionID2);

                questionID3 = TrimIfNotNull(questionID3);

                questionID4 = TrimIfNotNull(questionID4);

                questionID5 = TrimIfNotNull(questionID5);

                questionID6 = TrimIfNotNull(questionID6);


                var username = CheckUserHasRight(secretKey, "CreateDynamicReport");
                if (Utils.IsError(username))
                {
                    return username;
                }
                if (string.IsNullOrWhiteSpace(filterName))
                {
                    return Utils.WrapError("Please ensure that you enter a name for this filter");
                }

                Guid ReportID;
                if (!Guid.TryParse(reportID, out ReportID))
                {
                    return Utils.WrapError("Report ID is not in the correct format");
                }

                Guid SurveyID;
                if (!Guid.TryParse(surveyID, out SurveyID))
                {
                    return Utils.WrapError("Survey ID is not in the correct format");
                }

                #region Validate the filters
                Guid tempGuid;
                if (!string.IsNullOrWhiteSpace(questionID1) || !string.IsNullOrWhiteSpace(questionCondition1) || !string.IsNullOrWhiteSpace(questionCompareValue1))
                {
                    // if ONE value is provided then ALL value must be provided
                    if (string.IsNullOrWhiteSpace(questionID1) || string.IsNullOrWhiteSpace(questionCondition1) || string.IsNullOrWhiteSpace(questionCompareValue1))
                    {
                        return Utils.WrapError("Please provide all values for filter number 1");
                    }

                    if (!Guid.TryParse(questionID1, out tempGuid))
                    {
                        return Utils.WrapError("Question 1 ID is not in the correct format");
                    }

                    if (!compareStrings.Contains(questionCondition1))
                    {
                        return Utils.WrapError("Invalid comparator 1");
                    }
                }

                if (!string.IsNullOrWhiteSpace(questionID2) || !string.IsNullOrWhiteSpace(questionCondition2) || !string.IsNullOrWhiteSpace(questionCompareValue2))
                {
                    // if ONE value is provided then ALL value must be provided
                    if (string.IsNullOrWhiteSpace(questionID2) || string.IsNullOrWhiteSpace(questionCondition2) || string.IsNullOrWhiteSpace(questionCompareValue2))
                    {
                        return Utils.WrapError("Please provide all values for filter number 2");
                    }

                    if (!Guid.TryParse(questionID2, out tempGuid))
                    {
                        return Utils.WrapError("Question 2 ID is not in the correct format");
                    }

                    if (!compareStrings.Contains(questionCondition2))
                    {
                        return Utils.WrapError("Invalid comparator 2");
                    }
                }

                if (!string.IsNullOrWhiteSpace(questionID3) || !string.IsNullOrWhiteSpace(questionCondition3) || !string.IsNullOrWhiteSpace(questionCompareValue3))
                {
                    // if ONE value is provided then ALL value must be provided
                    if (string.IsNullOrWhiteSpace(questionID3) || string.IsNullOrWhiteSpace(questionCondition3) || string.IsNullOrWhiteSpace(questionCompareValue3))
                    {
                        return Utils.WrapError("Please provide all values for filter number 3");
                    }

                    if (!Guid.TryParse(questionID3, out tempGuid))
                    {
                        return Utils.WrapError("Question 3 ID is not in the correct format");
                    }

                    if (!compareStrings.Contains(questionCondition1))
                    {
                        return Utils.WrapError("Invalid comparator 3");
                    }
                }

                if (!string.IsNullOrWhiteSpace(questionID4) || !string.IsNullOrWhiteSpace(questionCondition4) || !string.IsNullOrWhiteSpace(questionCompareValue4))
                {
                    // if ONE value is provided then ALL value must be provided
                    if (string.IsNullOrWhiteSpace(questionID4) || string.IsNullOrWhiteSpace(questionCondition4) || string.IsNullOrWhiteSpace(questionCompareValue4))
                    {
                        return Utils.WrapError("Please provide all values for filter number 4");
                    }

                    if (!Guid.TryParse(questionID4, out tempGuid))
                    {
                        return Utils.WrapError("Question 4 ID is not in the correct format");
                    }

                    if (!compareStrings.Contains(questionCondition1))
                    {
                        return Utils.WrapError("Invalid comparator 4");
                    }
                }

                if (!string.IsNullOrWhiteSpace(questionID5) || !string.IsNullOrWhiteSpace(questionCondition5) || !string.IsNullOrWhiteSpace(questionCompareValue5))
                {
                    // if ONE value is provided then ALL value must be provided
                    if (string.IsNullOrWhiteSpace(questionID5) || string.IsNullOrWhiteSpace(questionCondition5) || string.IsNullOrWhiteSpace(questionCompareValue5))
                    {
                        return Utils.WrapError("Please provide all values for filter number 5");
                    }

                    if (!Guid.TryParse(questionID5, out tempGuid))
                    {
                        return Utils.WrapError("Question 5 ID is not in the correct format");
                    }

                    if (!compareStrings.Contains(questionCondition1))
                    {
                        return Utils.WrapError("Invalid comparator 5");
                    }
                }

                if (!string.IsNullOrWhiteSpace(questionID6) || !string.IsNullOrWhiteSpace(questionCondition6) || !string.IsNullOrWhiteSpace(questionCompareValue6))
                {
                    // if ONE value is provided then ALL value must be provided
                    if (string.IsNullOrWhiteSpace(questionID6) || string.IsNullOrWhiteSpace(questionCondition6) || string.IsNullOrWhiteSpace(questionCompareValue6))
                    {
                        return Utils.WrapError("Please provide all values for filter number 6");
                    }

                    if (!Guid.TryParse(questionID6, out tempGuid))
                    {
                        return Utils.WrapError("Question 6 ID is not in the correct format");
                    }

                    if (!compareStrings.Contains(questionCondition1))
                    {
                        return Utils.WrapError("Invalid comparator 6");
                    }
                }

                #endregion

                Guid LoggedInUserID;

                Guid CompanyID = Guid.Empty;

                if (!string.IsNullOrWhiteSpace(companyToAddTo) && Guid.TryParse(companyToAddTo, out CompanyID))
                {
                    // Use the provided company (Company admin activated the first package)
                    LoggedInUserID = Guid.Empty;
                }
                else
                {
                    #region Check if the logged in user is assuming a company

                    //check if the user is assuming a company
                    var assumeResult = CheckAssumeCompany(secretKey);
                    if (Utils.IsError(assumeResult))
                    {
                        return assumeResult;
                    }

                    if (!Guid.TryParse(assumeResult, out CompanyID))
                    {
                        return Utils.WrapError("The ID of the Company that you are trying to view is in the incorrect format");
                    }

                    #endregion
                }

                LoggedInUserID = (Guid)Membership.GetUser(username).ProviderUserKey;

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    string q1Str, q2Str, q3Str, q4Str, q5Str, q6Str;
                    Guid? q1ID, q2ID, q3ID, q4ID, q5ID, q6ID;
                    Int64 tempInt;

                    #region  generation the filter sql string

                    q1Str = "";
                    q1ID = null;
                    if (!string.IsNullOrWhiteSpace(questionID1) && Guid.TryParse(questionID1, out tempGuid))
                    {
                        q1ID = (Guid?)tempGuid;
                        q1Str = " and ar.[ResponseValueQuestionID] = N'" + questionID1;

                        if (Int64.TryParse(questionCompareValue1, out tempInt))
                        {
                            q1Str = q1Str +
                                "' and CAST(ar.[ResponseValue] as bigint) " + questionCondition1 + " " + questionCompareValue1;
                        }
                        else
                        {
                            q1Str = q1Str +
                                "' and ar.[ResponseValue] " + questionCondition1 + " N'" + questionCompareValue1 + "'";
                        }
                    }

                    q2Str = "";
                    q2ID = null;
                    if (!string.IsNullOrWhiteSpace(questionID2) && Guid.TryParse(questionID2, out tempGuid))
                    {
                        q2ID = (Guid?)tempGuid;
                        q2Str = " and ar.[ResponseValueQuestionID]=N'" + questionID2;

                        if (Int64.TryParse(questionCompareValue2, out tempInt))
                        {
                            q2Str = q2Str +
                                "' and CAST(ar.[ResponseValue] as bigint)" + questionCondition2 + questionCompareValue2;
                        }
                        else
                        {
                            q2Str = q2Str +
                                "' and ar.[ResponseValue]" + questionCondition2 + "'" + questionCompareValue2 + "'";
                        }
                    }

                    q3Str = "";
                    q3ID = null;
                    if (!string.IsNullOrWhiteSpace(questionID3) && Guid.TryParse(questionID3, out tempGuid))
                    {
                        q3ID = (Guid?)tempGuid;
                        q3Str = " and ar.[ResponseValueQuestionID]=N'" + questionID3;

                        if (Int64.TryParse(questionCompareValue3, out tempInt))
                        {
                            q3Str = q3Str +
                                "' and CAST(ar.[ResponseValue] as bigint)" + questionCondition3 + questionCompareValue3;
                        }
                        else
                        {
                            q3Str = q3Str +
                                "' and ar.[ResponseValue]" + questionCondition3 + "'" + questionCompareValue3 + "'";
                        }
                    }

                    q4Str = "";
                    q4ID = null;
                    if (!string.IsNullOrWhiteSpace(questionID4) && Guid.TryParse(questionID4, out tempGuid))
                    {
                        q4ID = (Guid?)tempGuid;
                        q4Str = " and ar.[ResponseValueQuestionID]=N'" + questionID4;

                        if (Int64.TryParse(questionCompareValue4, out tempInt))
                        {
                            q4Str = q4Str +
                                "' and CAST(ar.[ResponseValue] as bigint)" + questionCondition4 + questionCompareValue4;
                        }
                        else
                        {
                            q4Str = q4Str +
                                "' and ar.[ResponseValue]" + questionCondition4 + "'" + questionCompareValue4 + "'";
                        }
                    }

                    q5Str = "";
                    q5ID = null;
                    if (!string.IsNullOrWhiteSpace(questionID5) && Guid.TryParse(questionID5, out tempGuid))
                    {
                        q5ID = (Guid?)tempGuid;
                        q5Str = " and ar.[ResponseValueQuestionID]=N'" + questionID5;

                        if (Int64.TryParse(questionCompareValue5, out tempInt))
                        {
                            q5Str = q5Str +
                                "' and CAST(ar.[ResponseValue] as bigint)" + questionCondition5 + questionCompareValue5;
                        }
                        else
                        {
                            q5Str = q5Str +
                                "' and ar.[ResponseValue]" + questionCondition5 + "'" + questionCompareValue5 + "'";
                        }
                    }

                    q6Str = "";
                    q6ID = null;
                    if (!string.IsNullOrWhiteSpace(questionID6) && Guid.TryParse(questionID6, out tempGuid))
                    {
                        q6ID = (Guid?)tempGuid;
                        q6Str = " and ar.[ResponseValueQuestionID]=N'" + questionID6;

                        if (Int64.TryParse(questionCompareValue6, out tempInt))
                        {
                            q6Str = q6Str +
                                "' and CAST(ar.[ResponseValue] as bigint)" + questionCondition6 + questionCompareValue6;
                        }
                        else
                        {
                            q6Str = q6Str +
                                "' and ar.[ResponseValue]" + questionCondition6 + "'" + questionCompareValue6 + "'";
                        }
                    }
                    #endregion


                    var sqlString = "SELECT @filterCount = COUNT(ar.ID) " +
                        "FROM [dbo].[AuditedResponses] ar " +
                        "JOIN [dbo].[ResponseValues] rs " +
                        "ON ar.[ResponseValueID] = rs.[ID] " +
                        "JOIN [dbo].[Question] q " +
                        "ON ar.[ResponseValueQuestionID] = q.[ID] " +
                        "JOIN [dbo].[QuestionGroups] qg " +
                        "ON q.[GroupID] = qg.[ID] " +
                        "WHERE ar.[SurveyID]=N'" + surveyID + "' " +
                        q1Str + q2Str + q3Str + q4Str + q5Str + q6Str +
                        " GROUP BY ar.[ResponseValue];";


                    Helper.LogError(String.Format("q1Str: {0}, q2Str: {1}, q3Str: {2}, q4Str: {3}, q5Str: {4}, q6Str: {5}. sqlString: {6}",
                        q1Str, q2Str, q3Str, q4Str, q5Str, q6Str, sqlString), null);

                    var newFilterID = entity.CreateDynamicReportFilter(ReportID, filterName,
                        q1ID, questionCondition1, questionCompareValue1,
                        q2ID, questionCondition2, questionCompareValue2,
                        q3ID, questionCondition3, questionCompareValue3,
                        q4ID, questionCondition4, questionCompareValue4,
                        q5ID, questionCondition5, questionCompareValue5,
                        q6ID, questionCondition6, questionCompareValue6,
                        sqlString);

                    //create a new question group
                    /*var newDR = new DynamicReport();
                    Guid NewDRID = Guid.NewGuid();
                    newDR.ID = NewDRID;
                    * /


                    //entity.DynamicReports.Add(newDR);
                    //entity.SaveChanges();


                    dynamic returnItem = new JObject();
                    returnItem.FilterID = newFilterID.ToString();
                    returnItem.Status = "Success";
                    return returnItem.ToString();
                }
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }
        */

        public string CreateDynamicReportFilter(string secretKey, string reportID, string surveyID, string filterName, string companyToAddTo,
            string questionID1, string questionCondition1, string questionCompareValue1,
            string questionID2, string questionCondition2, string questionCompareValue2,
            string questionID3, string questionCondition3, string questionCompareValue3,
            string questionID4, string questionCondition4, string questionCompareValue4,
            string questionID5, string questionCondition5, string questionCompareValue5,
            string questionID6, string questionCondition6, string questionCompareValue6)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                reportID = TrimIfNotNull(reportID);
                surveyID = TrimIfNotNull(surveyID);
                filterName = TrimIfNotNull(filterName);

                questionID1 = TrimIfNotNull(questionID1);

                questionID2 = TrimIfNotNull(questionID2);

                questionID3 = TrimIfNotNull(questionID3);


                var username = CheckUserHasRight(secretKey, "CreateDynamicReport");
                if (Utils.IsError(username))
                {
                    return username;
                }
                if (string.IsNullOrWhiteSpace(filterName))
                {
                    return Utils.WrapError("Please ensure that you enter a name for this filter");
                }

                Guid ReportID;
                if (!Guid.TryParse(reportID, out ReportID))
                {
                    return Utils.WrapError("Report ID is not in the correct format");
                }

                Guid SurveyID;
                if (!Guid.TryParse(surveyID, out SurveyID))
                {
                    return Utils.WrapError("Survey ID is not in the correct format");
                }

                #region Validate the filters
                Guid tempGuid;
                if (!string.IsNullOrWhiteSpace(questionID1) || !string.IsNullOrWhiteSpace(questionCondition1) || !string.IsNullOrWhiteSpace(questionCompareValue1))
                {
                    // if ONE value is provided then ALL value must be provided
                    if (string.IsNullOrWhiteSpace(questionID1) || string.IsNullOrWhiteSpace(questionCondition1) || string.IsNullOrWhiteSpace(questionCompareValue1))
                    {
                        return Utils.WrapError("Please provide all values for filter number 1");
                    }

                    if (!Guid.TryParse(questionID1, out tempGuid))
                    {
                        return Utils.WrapError("Question 1 ID is not in the correct format");
                    }

                    if (!compareStrings.Contains(questionCondition1))
                    {
                        return Utils.WrapError("Invalid comparator 1");
                    }
                }

                if (!string.IsNullOrWhiteSpace(questionID2) || !string.IsNullOrWhiteSpace(questionCondition2) || !string.IsNullOrWhiteSpace(questionCompareValue2))
                {
                    // if ONE value is provided then ALL value must be provided
                    if (string.IsNullOrWhiteSpace(questionID2) || string.IsNullOrWhiteSpace(questionCondition2) || string.IsNullOrWhiteSpace(questionCompareValue2))
                    {
                        return Utils.WrapError("Please provide all values for filter number 2");
                    }

                    if (!Guid.TryParse(questionID2, out tempGuid))
                    {
                        return Utils.WrapError("Question 2 ID is not in the correct format");
                    }

                    if (!compareStrings.Contains(questionCondition2))
                    {
                        return Utils.WrapError("Invalid comparator 2");
                    }
                }

                if (!string.IsNullOrWhiteSpace(questionID3) || !string.IsNullOrWhiteSpace(questionCondition3) || !string.IsNullOrWhiteSpace(questionCompareValue3))
                {
                    // if ONE value is provided then ALL value must be provided
                    if (string.IsNullOrWhiteSpace(questionID3) || string.IsNullOrWhiteSpace(questionCondition3) || string.IsNullOrWhiteSpace(questionCompareValue3))
                    {
                        return Utils.WrapError("Please provide all values for filter number 3");
                    }

                    if (!Guid.TryParse(questionID3, out tempGuid))
                    {
                        return Utils.WrapError("Question 3 ID is not in the correct format");
                    }

                    if (!compareStrings.Contains(questionCondition3))
                    {
                        return Utils.WrapError("Invalid comparator 3");
                    }
                }

                #endregion

                Guid LoggedInUserID;

                Guid CompanyID = Guid.Empty;

                if (!string.IsNullOrWhiteSpace(companyToAddTo) && Guid.TryParse(companyToAddTo, out CompanyID))
                {
                    // Use the provided company (Company admin activated the first package)
                    LoggedInUserID = Guid.Empty;
                }
                else
                {
                    #region Check if the logged in user is assuming a company

                    //check if the user is assuming a company
                    var assumeResult = CheckAssumeCompany(secretKey);
                    if (Utils.IsError(assumeResult))
                    {
                        return assumeResult;
                    }

                    if (!Guid.TryParse(assumeResult, out CompanyID))
                    {
                        return Utils.WrapError("The ID of the Company that you are trying to view is in the incorrect format");
                    }

                    #endregion
                }

                LoggedInUserID = (Guid)Membership.GetUser(username).ProviderUserKey;

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {

                    string baseSql, q1Str, q2Str, q3Str;
                    Guid? q1ID, q2ID, q3ID, q4ID = null, q5ID = null, q6ID = null;
                    Int64 tempInt, ids = 0, ids2 = 0, count = 0;

                    List<Guid> queIDs = new List<Guid>();
                    if (Guid.TryParse(questionID1, out tempGuid))
                    {
                        queIDs.Add(tempGuid);
                    }

                    if (Guid.TryParse(questionID2, out tempGuid))
                    {
                        queIDs.Add(tempGuid);
                    }

                    if (Guid.TryParse(questionID3, out tempGuid))
                    {
                        queIDs.Add(tempGuid);
                    }

                    Helper.LogError(String.Format("queIDs count: {0}, queIDs: {1}", queIDs.Count(), Helper.SerializeToJavascriptOject(queIDs)), null);

                    var groupIDs = (entity.Questions.Where(q => queIDs.Contains(q.ID)).Select(q => q.GroupID)).ToList();
                    Helper.LogError(String.Format("groupIDs count: {0}, groupIDs: {1}", groupIDs.Count(), groupIDs.ToString()), null);

                    var GroupTypes = (from g in entity.QuestionGroups
                                      where groupIDs.Contains(g.ID)
                                      select g.GroupType).Distinct();


                    Helper.LogError(String.Format("GroupTypes count: {0}, GroupTypes: {1}", GroupTypes.Count(), Helper.SerializeToJavascriptOject(GroupTypes)), null);

                    if (GroupTypes.Count() > 1 && GroupTypes.Contains("Table"))
                    {
                        return Utils.WrapError("Filter questions cannot be from Table and Normal sections, this will always return zero");
                    }

                    if (GroupTypes.Count() == 1 && GroupTypes.Contains("Table"))
                    {

                        #region  generation TABLE filter sql string

                        baseSql = " FROM [dbo].[AuditedResponses] ar" +
                            " JOIN [dbo].[ResponseValues] rs ON ar.[ResponseValueID] = rs.[ID]" +
                            " JOIN [dbo].[Question] q ON ar.[ResponseValueQuestionID] = q.[ID]" +
                            " JOIN [dbo].[QuestionGroups] qg ON q.[GroupID] = qg.[ID]" +
                            " WHERE  ar.[SurveyID]=N'" + surveyID + "'  AND GroupType = 'Table' ";

                        q1Str = "";
                        q1ID = null;
                        if (!string.IsNullOrWhiteSpace(questionID1) && Guid.TryParse(questionID1, out tempGuid))
                        {
                            q1ID = (Guid?)tempGuid;
                            q1Str = " count(distinct rs.QuestionRowID) " + baseSql;

                            q1Str = q1Str + " and ar.[ResponseValueQuestionID]=N'" + questionID1 + "'";
                            if (Int64.TryParse(questionCompareValue1, out tempInt))
                            {
                                q1Str = q1Str +
                                    " and CAST(ar.[ResponseValue] as bigint) " + questionCondition1 + " " + questionCompareValue1;
                            }
                            else
                            {
                                q1Str = q1Str +
                                    " and ar.[ResponseValue] " + questionCondition1 + " N'" + questionCompareValue1 + "'";
                            }
                            count++;
                        }

                        q2Str = "";
                        q2ID = null;
                        if (!string.IsNullOrWhiteSpace(questionID2) && Guid.TryParse(questionID2, out tempGuid))
                        {
                            q2ID = (Guid?)tempGuid;
                            if (count > 0)
                            {
                                q1Str = q1Str + " and rs.QuestionRowID in" +
                                    "( select rs.QuestionRowID " + baseSql;
                            }
                            else
                            {
                                q1Str = q1Str + " count(distinct rs.QuestionRowID) " + baseSql;
                            }

                            q1Str = q1Str + " and ar.[ResponseValueQuestionID]=N'" + questionID2 + "'";

                            if (Int64.TryParse(questionCompareValue2, out tempInt))
                            {
                                q1Str = q1Str +
                                    " and CAST(ar.[ResponseValue] as bigint)" + questionCondition2 + questionCompareValue2;
                            }
                            else
                            {
                                q1Str = q1Str +
                                    " and ar.[ResponseValue]" + questionCondition2 + "'" + questionCompareValue2 + "'";
                            }
                            count++;
                        }

                        q3Str = "";
                        q3ID = null;
                        if (!string.IsNullOrWhiteSpace(questionID3) && Guid.TryParse(questionID3, out tempGuid))
                        {
                            q3ID = (Guid?)tempGuid;
                            if (count > 0)
                            {
                                q1Str = q1Str + " and rs.QuestionRowID in" +
                                    "( select distinct rs.QuestionRowID " + baseSql;
                            }
                            else
                            {
                                q1Str = " count(distinct rs.QuestionRowID) " + baseSql;
                            }
                            q1Str = q1Str + " and ar.[ResponseValueQuestionID]=N'" + questionID3 + "'";

                            if (Int64.TryParse(questionCompareValue3, out tempInt))
                            {
                                q1Str = q1Str +
                                    " and CAST(ar.[ResponseValue] as bigint)" + questionCondition3 + questionCompareValue3;
                            }
                            else
                            {
                                q1Str = q1Str +
                                    " and ar.[ResponseValue]" + questionCondition3 + "'" + questionCompareValue3 + "'";
                            }
                            count++;
                        }

                        if (count == 2)
                        {
                            q1Str += ")";
                        }
                        else if (count == 3)
                        {
                            q1Str += "))";
                        }
                        #endregion
                    }
                    else
                    {

                        #region  generation NON TABLE filter sql string

                        baseSql = "FROM [dbo].[AuditedResponses] ar" +
                            " JOIN [dbo].[ResponseValues] rs ON ar.[ResponseValueID] = rs.[ID]" +
                            " JOIN [dbo].[Question] q ON ar.[ResponseValueQuestionID] = q.[ID]" +
                            " JOIN [dbo].[QuestionGroups] qg ON q.[GroupID] = qg.[ID]" +
                            " WHERE  ar.[SurveyID]=N'" + surveyID + "' ";

                        q1Str = "";
                        q1ID = null;
                        if (!string.IsNullOrWhiteSpace(questionID1) && Guid.TryParse(questionID1, out tempGuid))
                        {
                            q1ID = (Guid?)tempGuid;
                            q1Str = " count(distinct ar.responseid) " + baseSql;

                            q1Str = q1Str + " and ar.[ResponseValueQuestionID]=N'" + questionID1 + "'";
                            if (Int64.TryParse(questionCompareValue1, out tempInt))
                            {
                                q1Str = q1Str +
                                    " and CAST(ar.[ResponseValue] as bigint) " + questionCondition1 + " " + questionCompareValue1;
                            }
                            else
                            {
                                q1Str = q1Str +
                                    " and ar.[ResponseValue] " + questionCondition1 + " N'" + questionCompareValue1 + "'";
                            }
                            count++;
                        }

                        q2Str = "";
                        q2ID = null;
                        if (!string.IsNullOrWhiteSpace(questionID2) && Guid.TryParse(questionID2, out tempGuid))
                        {
                            q2ID = (Guid?)tempGuid;
                            if (count > 0)
                            {
                                q1Str = q1Str + " and ar.ResponseID in" +
                                    "( select distinct ar.responseid " + baseSql;
                            }
                            else
                            {
                                q1Str = q1Str + " count(distinct ar.responseid) " + baseSql;
                            }

                            q1Str = q1Str + " and ar.[ResponseValueQuestionID]=N'" + questionID2 + "'";

                            if (Int64.TryParse(questionCompareValue2, out tempInt))
                            {
                                q1Str = q1Str +
                                    " and CAST(ar.[ResponseValue] as bigint)" + questionCondition2 + questionCompareValue2;
                            }
                            else
                            {
                                q1Str = q1Str +
                                    " and ar.[ResponseValue]" + questionCondition2 + "'" + questionCompareValue2 + "'";
                            }
                            count++;
                        }

                        q3Str = "";
                        q3ID = null;
                        if (!string.IsNullOrWhiteSpace(questionID3) && Guid.TryParse(questionID3, out tempGuid))
                        {
                            q3ID = (Guid?)tempGuid;
                            if (count > 0)
                            {
                                q1Str = q1Str + " and ar.ResponseID in" +
                                    "( select distinct ar.responseid " + baseSql;
                            }
                            else
                            {
                                q1Str = " count(distinct ar.responseid) " + baseSql;
                            }
                            q1Str = q1Str + " and ar.[ResponseValueQuestionID]=N'" + questionID3 + "'";

                            if (Int64.TryParse(questionCompareValue3, out tempInt))
                            {
                                q1Str = q1Str +
                                    " and CAST(ar.[ResponseValue] as bigint)" + questionCondition3 + questionCompareValue3;
                            }
                            else
                            {
                                q1Str = q1Str +
                                    " and ar.[ResponseValue]" + questionCondition3 + "'" + questionCompareValue3 + "'";
                            }
                            count++;
                        }

                        if (count == 2)
                        {
                            q1Str += ")";
                        }
                        else if (count == 3)
                        {
                            q1Str += "))";
                        }
                        #endregion
                    }

                    var sqlString = "SELECT @filterCount = " + q1Str + ";";


                    Helper.LogError(String.Format("stringSql: {0}", sqlString), null);

                    var newFilterID = entity.CreateDynamicReportFilter(ReportID, filterName,
                        q1ID, questionCondition1, questionCompareValue1,
                        q2ID, questionCondition2, questionCompareValue2,
                        q3ID, questionCondition3, questionCompareValue3,
                        q4ID, "", "",
                        q5ID, "", "",
                        q6ID, "", "",
                        sqlString);

                    //create a new question group
                    /*var newDR = new DynamicReport();
                    Guid NewDRID = Guid.NewGuid();
                    newDR.ID = NewDRID;
                    */


                    //entity.DynamicReports.Add(newDR);
                    //entity.SaveChanges();


                    dynamic returnItem = new JObject();
                    returnItem.FilterID = newFilterID.ToString();
                    returnItem.Status = "Success";
                    return returnItem.ToString();
                }
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }


        #endregion

        #endregion

        #region Web Application Administrator Methods

        #region System Companies

        //a list of all the companies
        public string SystemCompanies(string secretKey, string getActive)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                getActive = TrimIfNotNull(getActive);

                var username = CheckUserHasRight(secretKey, "SystemCompanies");
                if (Utils.IsError(username))
                {
                    return username;
                }

                //check if the user is an administrator
                //var IsAdmin = CheckUserHasAnyAdminRole(secretKey);

                ////if the user is not an admin 
                //if (Utils.IsError(IsAdmin))
                //{
                //    return IsAdmin;
                //}
                bool GetActive;
                if (!Boolean.TryParse(getActive, out GetActive))
                {
                    return Utils.WrapError("Get Active is not in the correct format");
                }

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {

                    var compOwner = (from r in entity.Roles
                                     where r.LoweredRoleName == "company owner"
                                     select r).FirstOrDefault();

                    if (compOwner == null)
                    {
                        return Utils.WrapError("The role company owner could not be found");
                    }

                    var companies =
                        (from c in entity.Companies
                         join cu in entity.CompanyUsers
                         on c.ID equals cu.CompanyID
                         join u in entity.aspnet_Membership
                         on cu.UserID equals u.UserId
                         join cp in entity.CompanyPackages
                         on c.ID equals cp.CompanyID
                         where c.IsActive == GetActive && cu.RoleID == compOwner.RoleId
                         // &&
                         //ensure that the company package is not expired
                         //cp.DateExpires >= DateTime.Now
                         orderby c.CompanyName
                         select new
                         {
                             CompanyID = c.ID,
                             c.CompanyName,
                             CompanyRegistrationNumber = c.RegistrationNumber,
                             CompanyVatNumber = c.VatNumber,
                             MainUser = u.Firstnames + " " + u.Lastname,
                             MainUserID = u.UserId,
                             /*cp.PackageName,
                             PackageID = cp.ID,
                             cp.Price,*/
                             c.IsActive,
                             c.PhysicalAddress
                         }).ToList();

                    if (companies == null || companies.Count <= 0)
                    {
                        return "[]";
                    }

                    return Helper.SerializeToJavascriptOject(companies);
                }
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        //view the details of a company
        public string SystemGetCompany(string secretKey, string companyID)
        {
            try
            {

                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                companyID = TrimIfNotNull(companyID);

                var username = CheckUserHasRight(secretKey, "SystemGetSpecificCompany");
                if (Utils.IsError(username))
                {
                    return username;
                }

                Guid CompanyID;
                if (!Guid.TryParse(companyID, out CompanyID))
                {
                    return Utils.WrapError("Company ID was not in the correct format");
                }

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    //get the company details
                    var companyDetails = (from x in
                                              (from c in entity.Companies
                                               where c.ID == CompanyID
                                               select new
                                               {
                                                   c.ID,
                                                   c.CompanyName,
                                                   c.RegistrationNumber,
                                                   c.VatNumber,
                                                   c.PhysicalAddress,
                                                   CompanyLogo = c.Logo
                                               }).ToList()
                                          select new
                                          {
                                              x.ID,
                                              x.CompanyName,
                                              x.RegistrationNumber,
                                              x.VatNumber,
                                              x.PhysicalAddress,
                                              CompanyLogo = x.CompanyLogo != null ? Helper.ImageBytesToBase64(x.CompanyLogo) : null,
                                          }).FirstOrDefault();

                    if (companyDetails == null)
                    {
                        return Utils.WrapError("The Company you are trying to view cannot be found");
                    }

                    return Helper.SerializeToJavascriptOject(companyDetails);
                }
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                if (ee.InnerException != null)
                {
                    Helper.LogError("Inner exception", ee.InnerException.ToString());
                }
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        //view the main user details for a company
        public string SystemGetCompanyMainUser(string secretKey, string companyID)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                companyID = TrimIfNotNull(companyID);

                var username = CheckUserHasRight(secretKey, "SystemGetCompanyMainUser");
                if (Utils.IsError(username))
                {
                    return username;
                }

                Guid CompanyID;
                if (!Guid.TryParse(companyID, out CompanyID))
                {
                    return Utils.WrapError("Company ID was not in the correct format");
                }

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    //get the role id for the company owner
                    var compOwner = (from r in entity.Roles
                                     where r.LoweredRoleName == "company owner"
                                     select r).FirstOrDefault();

                    if (compOwner == null)
                    {
                        return Utils.WrapError("The role company owner could not be found");
                    }

                    //get the company owner for the company that belongs to the package
                    var userDetails = (from u in entity.aspnet_Membership
                                       join cu in entity.CompanyUsers
                                       on u.UserId equals cu.UserID
                                       join c in entity.Companies
                                       on cu.CompanyID equals c.ID
                                       where cu.RoleID == compOwner.RoleId && c.ID == CompanyID
                                       select new
                                       {
                                           u.UserId,
                                           u.Firstnames,
                                           u.Lastname,
                                           u.PhysicalAddress,
                                           u.Email,
                                           u.ContactNumber,
                                           u.Country
                                       }).FirstOrDefault();

                    if (userDetails == null)
                    {
                        return Utils.WrapError("The Company you are trying to view cannot be found");
                    }

                    return Helper.SerializeToJavascriptOject(userDetails);
                }
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                if (ee.InnerException != null)
                {
                    Helper.LogError("Inner exception", ee.InnerException.ToString());
                }
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        //view all the packages for a company
        public string SystemGetCompanyPackages(string secretKey, string companyID)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                companyID = TrimIfNotNull(companyID);

                var username = CheckUserHasRight(secretKey, "SystemGetCompanyPackages");
                if (Utils.IsError(username))
                {
                    return username;
                }

                Guid CompanyID;
                if (!Guid.TryParse(companyID, out CompanyID))
                {
                    return Utils.WrapError("Company ID was not in the correct format");
                }

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    //get the package details
                    var packageDetails = (from cp in entity.CompanyPackages
                                          join i in entity.Invoices
                                          on cp.ID equals i.CompanyPackageID
                                          where cp.CompanyID == CompanyID && cp.IsCompleted == true
                                          orderby cp.DateStart descending
                                          select new
                                          {
                                              CompanyPackageID = cp.ID,
                                              cp.IsActive,
                                              cp.IsCompleted,
                                              cp.DateSignedUp,
                                              cp.DateStart,
                                              cp.DateExpires,
                                              cp.NumberMonthsSignedUpFor,
                                              cp.Price,
                                              //cp.DatePaid,
                                              cp.DateActivated,
                                              cp.NumberOfSurveys,
                                              cp.NumberOfQuestions,
                                              cp.NumberOfUsers,
                                              cp.NumberOfResponses,
                                              cp.PackageName,
                                              cp.PackageID,
                                              cp.Description,
                                              cp.NumberOfProjects,
                                              cp.BasicReporting,
                                              cp.AdvancedReporting,
                                              cp.Excel,
                                              cp.PDF,
                                              cp.CSV,
                                              cp.Piping,
                                              cp.Summing,
                                              cp.WhiteLabelling,
                                              cp.PhotoCamera,
                                              cp.GeoServices,
                                              cp.Signatures,
                                              cp.UniqueID,
                                              cp.PaymentType,
                                              InvoiceID = i.ID,
                                              cp.HasDiscount,
                                              cp.DiscountDescription,
                                              cp.DiscountPercentage,
                                              cp.DiscountValue,
                                              cp.PackageStartingPrice,
                                              cp.OptionalFeaturesPrice,
                                              cp.PurchaseOrderNumber
                                          }).ToList();

                    if (packageDetails == null)
                    {
                        return Utils.WrapError("The Company you are trying to view cannot be found");
                    }

                    return Helper.SerializeToJavascriptOject(packageDetails);
                }
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                if (ee.InnerException != null)
                {
                    Helper.LogError("Inner exception", ee.InnerException.ToString());
                }
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        //view the package details for a specific package for the company
        public string SystemGetCompanyPackage(string secretKey, string companyPackageID)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                companyPackageID = TrimIfNotNull(companyPackageID);

                var username = CheckUserHasRight(secretKey, "SystemGetCompanyPackage");
                if (Utils.IsError(username))
                {
                    return username;
                }

                Guid CompanyPackageID;
                if (!Guid.TryParse(companyPackageID, out CompanyPackageID))
                {
                    return Utils.WrapError("Company Package ID was not in the correct format");
                }

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    //get the package details
                    var packageDetails = (from cp in entity.CompanyPackages
                                          join i in entity.Invoices
                                          on cp.ID equals i.CompanyPackageID
                                          where cp.ID == CompanyPackageID
                                          select new
                                          {
                                              CompanyPackageID = cp.ID,
                                              cp.IsActive,
                                              cp.IsCompleted,
                                              cp.DateSignedUp,
                                              cp.DateStart,
                                              cp.DateExpires,
                                              cp.NumberMonthsSignedUpFor,
                                              cp.Price,
                                              //cp.DatePaid,
                                              cp.DateActivated,
                                              cp.NumberOfSurveys,
                                              cp.NumberOfQuestions,
                                              cp.NumberOfUsers,
                                              cp.NumberOfResponses,
                                              cp.PackageName,
                                              cp.PackageID,
                                              cp.Description,
                                              cp.NumberOfProjects,
                                              cp.BasicReporting,
                                              cp.AdvancedReporting,
                                              cp.Excel,
                                              cp.PDF,
                                              cp.CSV,
                                              cp.Piping,
                                              cp.Summing,
                                              cp.WhiteLabelling,
                                              cp.PhotoCamera,
                                              cp.GeoServices,
                                              cp.Signatures,
                                              cp.UniqueID,
                                              cp.PaymentType,
                                              InvoiceID = i.ID,
                                              cp.HasDiscount,
                                              cp.DiscountDescription,
                                              cp.DiscountPercentage,
                                              cp.DiscountValue,
                                              cp.PackageStartingPrice,
                                              cp.OptionalFeaturesPrice,
                                              cp.PurchaseOrderNumber
                                          }).FirstOrDefault();

                    if (packageDetails == null)
                    {
                        return Utils.WrapError("The Company you are trying to view cannot be found");
                    }

                    return Helper.SerializeToJavascriptOject(packageDetails);
                }
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                if (ee.InnerException != null)
                {
                    Helper.LogError("Inner exception", ee.InnerException.ToString());
                }
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        //deactivate a company's package
        public string SystemDeactivateCompanyPackage(string secretKey, string companyPackageID, string reason)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                companyPackageID = TrimIfNotNull(companyPackageID);
                reason = TrimIfNotNull(reason);

                string username = CheckUserHasRight(secretKey, "SystemDeactivateCompanyPackage");
                if (Utils.IsError(username))
                {
                    return username;
                }

                //convert the id received
                Guid CompanyPackageID;
                if (!Guid.TryParse(companyPackageID, out CompanyPackageID))
                {
                    return Utils.WrapError("Company Package ID is not in the correct format");
                }

                if (string.IsNullOrWhiteSpace(reason))
                {
                    reason = "None given";
                }

                //get the ID for the logged in user
                Guid LoggedInUserID = (Guid)Membership.GetUser(username).ProviderUserKey;

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    //get the company Package
                    var curCompanyPackage = (from cp in entity.CompanyPackages
                                             where cp.ID == CompanyPackageID
                                             select cp).FirstOrDefault();

                    if (curCompanyPackage == null)
                    {
                        return Utils.WrapError("The package you are trying to deactivate could not be found");
                    }

                    if (!curCompanyPackage.IsActive)
                    {
                        return Utils.WrapError("The package you are trying to deactivate is already inactive");
                    }
                    DateTime curDate = DateTime.Now;
                    curCompanyPackage.IsActive = false;
                    curCompanyPackage.DateDeactivated = curDate;
                    curCompanyPackage.DeactivatedBy = LoggedInUserID;
                    entity.Entry(curCompanyPackage).State = EntityState.Modified;
                    entity.SaveChanges();

                    var curComp = (from c in entity.Companies
                                   where c.ID == curCompanyPackage.CompanyID
                                   select c).FirstOrDefault();

                    string res = SystemAddCompanyPackageHistory(secretKey, companyPackageID, curCompanyPackage.CompanyID + "", curComp.CompanyName + "'s package was deactivated on " + curDate.ToString("dd MMMM yyyy") + ". Reason: " + reason);
                    return res;

                }

                /*dynamic returnItem = new JObject();
                returnItem.Status = "Success";
                return returnItem.ToString();*/
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        //activate a company's package
        public string SystemActivateCompanyPackage(string secretKey, string companyPackageID, string reason)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                companyPackageID = TrimIfNotNull(companyPackageID);

                string username = CheckUserHasRight(secretKey, "SystemActivateCompanyPackage");
                if (Utils.IsError(username))
                {
                    return username;
                }

                //convert the id received
                Guid CompanyPackageID;
                if (!Guid.TryParse(companyPackageID, out CompanyPackageID))
                {
                    return Utils.WrapError("Company Package ID is not in the correct format");
                }

                if (string.IsNullOrWhiteSpace(reason))
                {
                    reason = "None given";
                }

                //get the ID for the logged in user
                Guid LoggedInUserID = (Guid)Membership.GetUser(username).ProviderUserKey;

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    //get the company Package
                    var curCompanyPackage = (from cp in entity.CompanyPackages
                                             where cp.ID == CompanyPackageID
                                             select cp).FirstOrDefault();

                    if (curCompanyPackage == null)
                    {
                        return Utils.WrapError("The package you are trying to activate could not be found");
                    }

                    if (curCompanyPackage.IsActive)
                    {
                        return Utils.WrapError("The package you are trying to activate is already active");
                    }

                    DateTime curDate = DateTime.Now;
                    curCompanyPackage.IsActive = true;
                    curCompanyPackage.DateActivated = curDate;
                    curCompanyPackage.ActivatedBy = LoggedInUserID;
                    entity.CompanyPackages.Add(curCompanyPackage);
                    entity.Entry(curCompanyPackage).State = EntityState.Modified;
                    entity.SaveChanges();


                    Helper.LogMessage("ActivateCompanyPackage: current company ID: " + curCompanyPackage.CompanyID);
                    int activeCompPacks = entity.CompanyPackages.Count(cp => cp.CompanyID == curCompanyPackage.CompanyID && cp.IsActive);

                    Helper.LogMessage("ActivateCompanyPackage: number of active packages: " + activeCompPacks);
                    if (activeCompPacks == 1)
                    {
                        int numOfProjects = entity.Projects.Count(pr => pr.ProjectCompany == curCompanyPackage.CompanyID);
                        var projects = entity.Projects.Where(pr => pr.ProjectCompany == curCompanyPackage.CompanyID);

                        Helper.LogMessage("ActivateCompanyPackage: number of current projects: " + numOfProjects);

                        if (numOfProjects == 0)
                        {
                            var compOwner = entity.CompanyUsers.FirstOrDefault(cu => cu.CompanyID == curCompanyPackage.CompanyID && cu.RoleID == CompanyOwnerRoleID);
                            //Don't use the system admins user id (on create project we pull company from provided user id)

                            Helper.LogMessage("ActivateCompanyPackage: company owner ID: " + compOwner.UserID);
                            CreateDefaultProject(secretKey, compOwner.UserID, curCompanyPackage.CompanyID);
                        }
                    }

                    var curComp = (from c in entity.Companies
                                   where c.ID == curCompanyPackage.CompanyID
                                   select c).FirstOrDefault();

                    string res = SystemAddCompanyPackageHistory(secretKey, companyPackageID, curCompanyPackage.CompanyID + "", curComp.CompanyName + "'s package was deactivated on " + curDate.ToString("dd MMMM yyyy") + ". Reason: " + reason);
                    return res;
                }

                /*dynamic returnItem = new JObject();
                returnItem.Status = "Success";
                return returnItem.ToString();*/
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        //log the action performed on the company's package
        private string SystemAddCompanyPackageHistory(string secretKey, string companyPackageID, string companyID, string message)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                companyPackageID = TrimIfNotNull(companyPackageID);
                companyID = TrimIfNotNull(companyID);
                message = TrimIfNotNull(message);

                /*var username = CheckUserHasRight(secretKey, "SystemViewExpiringPackages");
                if (Utils.IsError(username))
                {
                    return username;
                }*/

                Guid CompanyPackageID;
                if (!Guid.TryParse(companyPackageID, out CompanyPackageID))
                {
                    return Utils.WrapError("Company Package ID is not in the correct format");
                }

                Guid CompanyID;
                if (!Guid.TryParse(companyID, out CompanyID))
                {
                    return Utils.WrapError("Company ID is not in the correct format");
                }

                if (string.IsNullOrWhiteSpace(message))
                {
                    return Utils.WrapError("Please ensure that you enter a message to log");
                }

                //get the ID for the logged in user
                string loggedInUserID = GetUserID(secretKey);
                if (Utils.IsError(loggedInUserID))
                {
                    return loggedInUserID;
                }
                Guid LoggedInUserID;
                if (!Guid.TryParse(loggedInUserID, out LoggedInUserID))
                {
                    return Utils.WrapError("User ID is not in the correct format");
                }

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {

                    var curCompany = (from c in entity.Companies
                                      where c.ID == CompanyID
                                      select c).FirstOrDefault();

                    if (curCompany == null)
                    {
                        return Utils.WrapError("The Company you are trying to log for cannot be found");
                    }

                    var curCompanyPackage = (from c in entity.CompanyPackages
                                             where c.ID == CompanyPackageID
                                             select c).FirstOrDefault();

                    if (curCompanyPackage == null)
                    {
                        return Utils.WrapError("The Company Package you are trying to log for cannot be found");
                    }

                    var newLog = new CompanyPackageHistory();
                    newLog.ID = Guid.NewGuid();
                    newLog.CompanyPackageID = CompanyPackageID;
                    newLog.CompanyID = CompanyID;
                    newLog.DateCreated = DateTime.Now;
                    newLog.CreatedBy = LoggedInUserID;
                    newLog.Message = message;
                    entity.CompanyPackageHistories.Add(newLog);
                    entity.SaveChanges();
                }

                dynamic returnItem = new JObject();
                returnItem.Status = "Success";
                return returnItem.ToString();

            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        //view the actions performed on the company's package
        public string SystemViewCompanyPackageHistory(string secretKey, string companyPackageID, string companyID)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                companyPackageID = TrimIfNotNull(companyPackageID);
                companyID = TrimIfNotNull(companyID);

                var username = CheckUserHasRight(secretKey, "SystemViewCompanyPackageHistory");
                if (Utils.IsError(username))
                {
                    return username;
                }

                Guid CompanyPackageID = Guid.Empty;
                if (!string.IsNullOrWhiteSpace(companyPackageID))
                {
                    if (!Guid.TryParse(companyPackageID, out CompanyPackageID))
                    {
                        return Utils.WrapError("Company Package ID is not in the correct format");
                    }
                }

                Guid CompanyID = Guid.Empty;
                if (!string.IsNullOrWhiteSpace(companyID))
                {
                    if (!Guid.TryParse(companyID, out CompanyID))
                    {
                        return Utils.WrapError("Company ID is not in the correct format");
                    }
                }

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    //TODO
                    var curCompanyPackageHistory = (from c in entity.CompanyPackageHistories
                                                    where
                                                    (
                                                        CompanyID != Guid.Empty && c.CompanyID == CompanyID
                                                    )
                                                    ||
                                                    (
                                                        CompanyPackageID != Guid.Empty && c.ID == CompanyPackageID
                                                    )
                                                    select c).ToList();

                    if (curCompanyPackageHistory == null || curCompanyPackageHistory.Count() <= 0)
                    {
                        return "[]";
                    }

                    return Helper.SerializeToJavascriptOject(curCompanyPackageHistory);
                }

            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }


        #endregion

        #region System Signups

        enum SignupFilters
        {
            Unpaid,
            Last100,
            All
        }

        //a list of all the companies that signed up that match the filter criteria
        public string SystemSignups(string secretKey, string filterType)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);

                var username = CheckUserHasRight(secretKey, "SystemSignups");
                if (Utils.IsError(username))
                {
                    return username;
                }

                //determine which type the user is trying to filter by
                SignupFilters FilterType;
                if (!Enum.TryParse(filterType, out FilterType))
                {
                    return Utils.WrapError("Filter Type was not found");
                }

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {

                    if (FilterType == SignupFilters.Unpaid)
                    {
                        var curInfo =
                            (from c in entity.Companies
                             join cp in entity.CompanyPackages
                             on c.ID equals cp.CompanyID
                             join i in entity.Invoices
                             on cp.ID equals i.CompanyPackageID
                             where cp.IsCompleted == true &&
                             //only show the records that were not "hidden" by the user
                             cp.MarkAsViewed == false &&
                             //where the payment amounts summed together do not match the price of the package
                             /*cp.Price.Value !=
                                        (
                                            from p in entity.Payments
                                            where p.InvoiceID == i.ID
                                            select p.AmountPaid
                                        ).ToList().Sum()*/

                             //get all successful payments and sum their amount
                             cp.Price.Value !=
                                        (
                                            from p in entity.PaymentHistories
                                            where p.InvoiceID == i.ID && p.PaymentStatus == "Payment Successful"
                                            select p.AmountPaid
                                        ).ToList().Sum()
                             orderby cp.DateSignedUp descending, c.CompanyName ascending
                             select new
                             {
                                 CompanyID = c.ID,
                                 CompanyPackageID = cp.ID,
                                 c.CompanyName,
                                 c.IsActive,
                                 cp.PackageName,
                                 cp.Description,
                                 cp.Price,
                                 cp.DateActivated,
                                 cp.DateStart,
                                 cp.DateExpires,
                                 cp.DateSignedUp,
                                 cp.NumberMonthsSignedUpFor,
                                 cp.NumberOfSurveys,
                                 cp.NumberOfQuestions,
                                 cp.NumberOfUsers,
                                 cp.NumberOfResponses,
                                 cp.NumberOfProjects,
                                 cp.BasicReporting,
                                 cp.AdvancedReporting,
                                 cp.Excel,
                                 cp.PDF,
                                 cp.CSV,
                                 cp.Piping,
                                 cp.Summing,
                                 cp.WhiteLabelling,
                                 cp.PhotoCamera,
                                 cp.GeoServices,
                                 cp.Signatures,
                                 cp.UniqueID,
                                 cp.PaymentType,
                                 InvoiceID = i.ID,
                                 cp.PurchaseOrderNumber,
                                 cp.HasDiscount,
                                 cp.DiscountValue,
                                 cp.DiscountPercentage,
                                 cp.DiscountDescription,
                                 cp.PackageStartingPrice,
                                 cp.OptionalFeaturesPrice,
                                 /*Payments = (
                                   from p in entity.Payments
                                   where p.InvoiceID == i.ID
                                   orderby p.DatePaid descending
                                   select new
                                   {
                                       p.ID,
                                       p.DatePaid,
                                       p.AmountPaid,
                                       p.InvoiceID
                                   }
                               ).ToList()*/
                                 Payments = (
                                   from p in entity.PaymentHistories
                                   where p.InvoiceID == i.ID && p.PaymentStatus == "Payment Successful"
                                   orderby p.DateCompleted descending
                                   select new
                                   {
                                       p.ID,
                                       DatePaid = p.DateCompleted,
                                       p.AmountPaid,
                                       p.InvoiceID
                                   }
                               ).ToList()
                             }).ToList();

                        if (curInfo == null || curInfo.Count <= 0)
                        {
                            return "[]";
                        }

                        return Helper.SerializeToJavascriptOject(curInfo);

                    }
                    else if (FilterType == SignupFilters.Last100)
                    {
                        var curInfo =
                           (from c in entity.Companies
                            join cp in entity.CompanyPackages
                            on c.ID equals cp.CompanyID
                            join i in entity.Invoices
                            on cp.ID equals i.CompanyPackageID
                            where cp.IsCompleted == true
                            orderby cp.DateSignedUp descending, c.CompanyName ascending
                            select new
                            {
                                CompanyID = c.ID,
                                CompanyPackageID = cp.ID,
                                c.CompanyName,
                                c.IsActive,
                                cp.PackageName,
                                cp.Description,
                                cp.Price,
                                cp.DateActivated,
                                cp.DateStart,
                                cp.DateExpires,
                                cp.DateSignedUp,
                                cp.NumberMonthsSignedUpFor,
                                cp.NumberOfSurveys,
                                cp.NumberOfQuestions,
                                cp.NumberOfUsers,
                                cp.NumberOfResponses,
                                cp.NumberOfProjects,
                                cp.BasicReporting,
                                cp.AdvancedReporting,
                                cp.Excel,
                                cp.PDF,
                                cp.CSV,
                                cp.Piping,
                                cp.Summing,
                                cp.WhiteLabelling,
                                cp.PhotoCamera,
                                cp.GeoServices,
                                cp.Signatures,
                                cp.UniqueID,
                                cp.PaymentType,
                                InvoiceID = i.ID,
                                cp.PurchaseOrderNumber,
                                cp.HasDiscount,
                                cp.DiscountValue,
                                cp.DiscountPercentage,
                                cp.DiscountDescription,
                                cp.PackageStartingPrice,
                                cp.OptionalFeaturesPrice,
                                /*Payments = (
                                    from p in entity.Payments
                                    where p.InvoiceID == i.ID
                                    orderby p.DatePaid descending
                                    select new
                                    {
                                        p.ID,
                                        p.DatePaid,
                                        p.AmountPaid,
                                        p.InvoiceID
                                    }
                                ).ToList()*/
                                Payments = (
                                    from p in entity.PaymentHistories
                                    where p.InvoiceID == i.ID && p.PaymentStatus == "Payment Successful"
                                    orderby p.DateCompleted descending
                                    select new
                                    {
                                        p.ID,
                                        DatePaid = p.DateCompleted,
                                        p.AmountPaid,
                                        p.InvoiceID
                                    }
                                ).ToList()
                            }).ToList().Take(100);

                        if (curInfo == null || curInfo.Count() <= 0)
                        {
                            return "[]";
                        }

                        return Helper.SerializeToJavascriptOject(curInfo);
                    }
                    else if (FilterType == SignupFilters.All)
                    {
                        var curInfo =
                           (from c in entity.Companies
                            join cp in entity.CompanyPackages
                            on c.ID equals cp.CompanyID
                            join i in entity.Invoices
                            on cp.ID equals i.CompanyPackageID
                            where cp.IsCompleted == true
                            orderby cp.DateSignedUp descending, c.CompanyName ascending
                            select new
                            {
                                CompanyID = c.ID,
                                CompanyPackageID = cp.ID,
                                c.CompanyName,
                                c.IsActive,
                                cp.PackageName,
                                cp.Description,
                                cp.Price,
                                cp.DateActivated,
                                cp.DateStart,
                                cp.DateExpires,
                                cp.DateSignedUp,
                                cp.NumberMonthsSignedUpFor,
                                cp.NumberOfSurveys,
                                cp.NumberOfQuestions,
                                cp.NumberOfUsers,
                                cp.NumberOfResponses,
                                cp.NumberOfProjects,
                                cp.BasicReporting,
                                cp.AdvancedReporting,
                                cp.Excel,
                                cp.PDF,
                                cp.CSV,
                                cp.Piping,
                                cp.Summing,
                                cp.WhiteLabelling,
                                cp.PhotoCamera,
                                cp.GeoServices,
                                cp.Signatures,
                                cp.UniqueID,
                                cp.PaymentType,
                                InvoiceID = i.ID,
                                cp.PurchaseOrderNumber,
                                cp.HasDiscount,
                                cp.DiscountValue,
                                cp.DiscountPercentage,
                                cp.DiscountDescription,
                                cp.PackageStartingPrice,
                                cp.OptionalFeaturesPrice,
                                /*Payments = (
                                    from p in entity.Payments
                                    where p.InvoiceID == i.ID
                                    orderby p.DatePaid descending
                                    select new
                                    {
                                        p.ID,
                                        p.DatePaid,
                                        p.AmountPaid,
                                        p.InvoiceID
                                    }
                                ).ToList()*/
                                Payments = (
                                    from p in entity.PaymentHistories
                                    where p.InvoiceID == i.ID && p.PaymentStatus == "Payment Successful"
                                    orderby p.DateCompleted descending
                                    select new
                                    {
                                        p.ID,
                                        DatePaid = p.DateCompleted,
                                        p.AmountPaid,
                                        p.InvoiceID
                                    }
                                ).ToList()

                            }).ToList();

                        if (curInfo == null || curInfo.Count() <= 0)
                        {
                            return "[]";
                        }

                        return Helper.SerializeToJavascriptOject(curInfo);
                    }
                    return "[]";
                }
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        //hide the package from the list of new signups
        public string SystemSignupHide(string secretKey, string companyPackageID)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);

                var username = CheckUserHasRight(secretKey, "SystemSignupHide");
                if (Utils.IsError(username))
                {
                    return username;
                }

                Guid CompanyPackageID;
                if (!Guid.TryParse(companyPackageID, out CompanyPackageID))
                {
                    return Utils.WrapError("Company Package ID is not in the correct format");
                }

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    var curPackage = (from cp in entity.CompanyPackages
                                      where cp.ID == CompanyPackageID
                                      select cp).FirstOrDefault();

                    if (curPackage == null)
                    {
                        return Utils.WrapError("The package you are trying to hide could not be found");
                    }

                    curPackage.MarkAsViewed = true;
                    entity.CompanyPackages.Add(curPackage);
                    entity.SaveChanges();

                }

                dynamic returnItem = new JObject();
                returnItem.Status = "Success";
                return returnItem.ToString();

            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        //get the payments for a signup
        public string SystemSignupViewPayments(string secretKey, string invoiceID)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);

                var username = CheckUserHasRight(secretKey, "SystemSignupViewPayments");
                if (Utils.IsError(username))
                {
                    return username;
                }

                Guid InvoiceID;
                if (!Guid.TryParse(invoiceID, out InvoiceID))
                {
                    return Utils.WrapError("Invoice ID is not in the correct format");
                }

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    /*var curPayments = (from p in entity.Payments
                                       where p.InvoiceID == InvoiceID
                                       orderby p.DatePaid descending
                                       select new
                                       {
                                           p.ID,
                                           p.DatePaid,
                                           p.AmountPaid,
                                           p.InvoiceID
                                       }).ToList();

                    if (curPayments == null)
                    {
                        return "[]";
                    }*/

                    var curPayments = (from p in entity.PaymentHistories
                                       where p.InvoiceID == InvoiceID && p.PaymentStatus == "Payment Successful"
                                       orderby p.DateCompleted descending
                                       select new
                                       {
                                           p.ID,
                                           DatePaid = p.DateCompleted,
                                           p.AmountPaid,
                                           p.PaymentStatus,
                                           p.InvoiceID,
                                       }).ToList();

                    if (curPayments == null)
                    {
                        return "[]";
                    }
                    return Helper.SerializeToJavascriptOject(curPayments);

                }


            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        #endregion

        #region Packages

        //add a new package
        //features = JArray (id, optionalFeature, optionalPrice)
        public string SystemAddPackage(string secretKey, string numberOfSurveys, string numberOfQuestions, string numberOfUsers,/* string startDate,*/
            string numberOfResponses, string packageName, string price, string description, string numberOfProjects, /* string numberOfMonthsValidFor,*/ string features)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                packageName = TrimIfNotNull(packageName);
                numberOfQuestions = TrimIfNotNull(numberOfQuestions);
                numberOfSurveys = TrimIfNotNull(numberOfSurveys);
                numberOfUsers = TrimIfNotNull(numberOfUsers);
                numberOfResponses = TrimIfNotNull(numberOfResponses);
                price = TrimIfNotNull(price);
                description = TrimIfNotNull(description);
                numberOfProjects = TrimIfNotNull(numberOfProjects);
                //numberOfMonthsValidFor = TrimIfNotNull(numberOfMonthsValidFor);
                features = TrimIfNotNull(features);
                //startDate = TrimIfNotNull(startDate);

                var username = CheckUserHasRight(secretKey, "SystemAddPackage");
                if (Utils.IsError(username))
                {
                    return username;
                }

                if (string.IsNullOrWhiteSpace(packageName))
                {
                    return Utils.WrapError("Please ensure that you enter a package name");
                }

                int NumberOfSurveys = 0;
                if (!Int32.TryParse(numberOfSurveys, out NumberOfSurveys))
                {
                    return Utils.WrapError("Number of Surveys is not in the correct format");
                }

                int NumberOfQuestions = 0;
                if (!Int32.TryParse(numberOfQuestions, out NumberOfQuestions))
                {
                    return Utils.WrapError("Number of Questions is not in the correct format");
                }

                int NumberOfUsers = 0;
                if (!Int32.TryParse(numberOfUsers, out NumberOfUsers))
                {
                    return Utils.WrapError("Number of Users is not in the correct format");
                }

                int NumberOfResponses = 0;
                if (!Int32.TryParse(numberOfResponses, out NumberOfResponses))
                {
                    return Utils.WrapError("Number of Responses is not in the correct format");
                }

                int NumberOfProjects = 0;
                if (!Int32.TryParse(numberOfProjects, out NumberOfProjects))
                {
                    return Utils.WrapError("Number of Projects is not in the correct format");
                }
                price = CleanForDecimal(price);
                Decimal Price = 0;
                if (!Decimal.TryParse(price, out Price))
                {
                    return Utils.WrapError("Price is not in the correct format");
                }

                /*int NumberOfMonthsValidFor = 0;
                if (!string.IsNullOrWhiteSpace(numberOfMonthsValidFor))
                {
                    if (!Int32.TryParse(numberOfMonthsValidFor, out NumberOfMonthsValidFor))
                    {
                        return Utils.WrapError("Number of Months valid for is not in the correct format");
                    }
                }*/

                /*DateTime StartDate;
                if (!DateTime.TryParse(startDate, out StartDate))
                {
                    return Utils.WrapError("Start Date is not in the correct format");
                }*/

                //get the ID for the logged in user
                Guid LoggedInUserID = (Guid)Membership.GetUser(username).ProviderUserKey;

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {

                    var curPackage = (from p in entity.Packages
                                      where p.PackageName == packageName
                                      select p).FirstOrDefault();

                    if (curPackage != null)
                    {
                        return Utils.WrapError("The package name you are trying to add (" + packageName + ") already exists");
                    }

                    var newPackage = new Package();
                    Guid PackageID = Guid.NewGuid();
                    newPackage.ID = PackageID;
                    newPackage.PackageName = packageName;
                    newPackage.NumberOfSurveys = NumberOfSurveys;
                    newPackage.NumberOfQuestions = NumberOfQuestions;
                    newPackage.NumberOfUsers = NumberOfUsers;
                    newPackage.NumberOfResponses = NumberOfResponses;
                    newPackage.NumberOfProjects = NumberOfProjects;
                    /*if (!string.IsNullOrWhiteSpace(numberOfMonthsValidFor))
                    {
                        newPackage.NumberMonthsValidFor = NumberOfMonthsValidFor;
                    }*/
                    newPackage.IsActive = true;
                    newPackage.CreatedBy = LoggedInUserID;
                    newPackage.DateCreated = DateTime.Now;
                    newPackage.Price = Price;
                    newPackage.Description = description;
                    //newPackage.StartDate = StartDate;
                    entity.Packages.Add(newPackage);

                    //check if the features the user selected are valid features in the DB
                    FeatureDetailsResult fDetailsResult = CheckFeatures(features);
                    if (fDetailsResult.IsError)
                    {
                        return Utils.WrapError(fDetailsResult.ErrorMessage);
                    }

                    //if there are features that were returned
                    if (fDetailsResult.Features != null && fDetailsResult.Features.Count > 0)
                    {
                        //cycle through all the details received
                        foreach (FeatureDetails fDetails in fDetailsResult.Features)
                        {
                            //save the feature
                            var newPackageFeature = new PackageFeature();
                            newPackageFeature.ID = Guid.NewGuid();
                            newPackageFeature.PackageID = PackageID;
                            newPackageFeature.FeatureID = fDetails.ID;
                            newPackageFeature.OptionalFeature = fDetails.OptionalFeature;
                            newPackageFeature.OptionalPrice = fDetails.OptionalPrice;
                            entity.PackageFeatures.Add(newPackageFeature);
                        }
                    }
                    entity.SaveChanges();
                }

                dynamic returnItem = new JObject();
                returnItem.Status = "Success";
                return returnItem.ToString();
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                if (ee.InnerException != null)
                {
                    Helper.LogError("Inner exception", ee.InnerException.ToString());
                }
                return Utils.WrapError(ee.Message);
            }
        }

        //update a package
        //features = JArray (id, optionalFeature, optionalPrice)
        public string SystemUpdatePackage(string secretKey, string packageID, string numberOfSurveys, string numberOfQuestions, string numberOfUsers,/* string startDate,*/
           string numberOfResponses, string packageName, string price, string description, string numberOfProjects, /*string numberOfMonthsValidFor,*/ string features)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                packageID = TrimIfNotNull(packageID);
                packageName = TrimIfNotNull(packageName);
                numberOfQuestions = TrimIfNotNull(numberOfQuestions);
                numberOfSurveys = TrimIfNotNull(numberOfSurveys);
                numberOfUsers = TrimIfNotNull(numberOfUsers);
                numberOfResponses = TrimIfNotNull(numberOfResponses);
                price = TrimIfNotNull(price);
                description = TrimIfNotNull(description);
                numberOfProjects = TrimIfNotNull(numberOfProjects);
                //numberOfMonthsValidFor = TrimIfNotNull(numberOfMonthsValidFor);
                features = TrimIfNotNull(features);
                //startDate = TrimIfNotNull(startDate);

                var username = CheckUserHasRight(secretKey, "SystemUpdatePackage");
                if (Utils.IsError(username))
                {
                    return username;
                }

                Guid PackageID;
                if (!Guid.TryParse(packageID, out PackageID))
                {
                    return Utils.WrapError("Package ID is not in the correct format");
                }

                if (string.IsNullOrWhiteSpace(packageName))
                {
                    return Utils.WrapError("Please ensure that you enter a package name");
                }

                int NumberOfSurveys = 0;
                if (!Int32.TryParse(numberOfSurveys, out NumberOfSurveys))
                {
                    return Utils.WrapError("Number of Surveys is not in the correct format");
                }
                int NumberOfQuestions = 0;
                if (!Int32.TryParse(numberOfQuestions, out NumberOfQuestions))
                {
                    return Utils.WrapError("Number of Questions is not in the correct format");
                }

                int NumberOfUsers = 0;
                if (!Int32.TryParse(numberOfUsers, out NumberOfUsers))
                {
                    return Utils.WrapError("Number of Users is not in the correct format");
                }

                int NumberOfResponses = 0;
                if (!Int32.TryParse(numberOfResponses, out NumberOfResponses))
                {
                    return Utils.WrapError("Number of Responses is not in the correct format");
                }

                int NumberOfProjects = 0;
                if (!Int32.TryParse(numberOfProjects, out NumberOfProjects))
                {
                    return Utils.WrapError("Number of Projects is not in the correct format");
                }

                price = CleanForDecimal(price);
                Decimal Price = 0;
                if (!Decimal.TryParse(price, out Price))
                {
                    return Utils.WrapError("Price is not in the correct format");
                }

                /*int NumberOfMonthssValidFor = 0;
                if (!string.IsNullOrWhiteSpace(numberOfMonthsValidFor))
                {
                    if (!Int32.TryParse(numberOfMonthsValidFor, out NumberOfMonthssValidFor))
                    {
                        return Utils.WrapError("Number of Months valid for is not in the correct format");
                    }
                }*/

                /*DateTime StartDate;
                if (!DateTime.TryParse(startDate, out StartDate))
                {
                    return Utils.WrapError("Start Date is not in the correct format");
                }*/

                //get the ID for the logged in user
                Guid LoggedInUserID = (Guid)Membership.GetUser(username).ProviderUserKey;

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    var curPackage = (from p in entity.Packages
                                      where p.ID == PackageID
                                      select p).FirstOrDefault();

                    if (curPackage == null)
                    {
                        return Utils.WrapError("The package you are trying to update could not be found");
                    }

                    var curPackageName = (from p in entity.Packages
                                          where p.PackageName == packageName && p.ID != PackageID
                                          select p).FirstOrDefault();

                    if (curPackageName != null)
                    {
                        return Utils.WrapError("The package name you are trying to add (" + packageName + ") already exists");
                    }

                    curPackage.PackageName = packageName;
                    curPackage.NumberOfSurveys = NumberOfSurveys;
                    curPackage.NumberOfQuestions = NumberOfQuestions;
                    curPackage.NumberOfUsers = NumberOfUsers;
                    curPackage.NumberOfResponses = NumberOfResponses;
                    curPackage.NumberOfProjects = NumberOfProjects;
                    /*if (!string.IsNullOrWhiteSpace(numberOfMonthsValidFor))
                    {
                        curPackage.NumberMonthsValidFor = NumberOfMonthssValidFor;
                    }*/
                    curPackage.IsActive = true;
                    curPackage.UpdatedBy = LoggedInUserID;
                    curPackage.DateUpdated = DateTime.Now;
                    curPackage.Price = Price;
                    curPackage.Description = description;
                    //curPackage.StartDate = StartDate;

                    entity.Packages.Add(curPackage);
                    entity.Entry(curPackage).State = EntityState.Modified;

                    //check if the features the user selected are valid features in the DB
                    FeatureDetailsResult fDetailsResult = CheckFeatures(features);
                    if (fDetailsResult.IsError)
                    {
                        return Utils.WrapError(fDetailsResult.ErrorMessage);
                    }


                    //get the features associated with the package
                    var packageFeatures = (from pf in entity.PackageFeatures
                                           where pf.PackageID == PackageID
                                           select pf).ToList();

                    //if there are features, remove them
                    if (packageFeatures != null)
                    {
                        entity.PackageFeatures.RemoveRange(packageFeatures);
                    }

                    //if there are features that were returned
                    if (fDetailsResult.Features != null && fDetailsResult.Features.Count > 0)
                    {

                        //cycle through all the details received
                        foreach (FeatureDetails fDetails in fDetailsResult.Features)
                        {
                            Helper.LogMessage("fDetails.OptionalPrice; " + fDetails.OptionalPrice);
                            //save the feature
                            var newPackageFeature = new PackageFeature();
                            newPackageFeature.ID = Guid.NewGuid();
                            newPackageFeature.PackageID = PackageID;
                            newPackageFeature.FeatureID = fDetails.ID;
                            newPackageFeature.OptionalFeature = fDetails.OptionalFeature;
                            newPackageFeature.OptionalPrice = fDetails.OptionalPrice;
                            entity.PackageFeatures.Add(newPackageFeature);

                            Helper.LogMessage("newPackageFeature.OptionalPrice " + newPackageFeature.OptionalPrice);

                        }
                    }

                    entity.SaveChanges();

                }

                dynamic returnItem = new JObject();
                returnItem.Status = "Success";
                return returnItem.ToString();
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        //features = JArray (id, optionalFeature, optionalPrice)
        //check if the selected features are valid
        private FeatureDetailsResult CheckFeatures(string features)
        {
            //this will store all the feature details
            FeatureDetailsResult fDetailsResult = new FeatureDetailsResult();

            //this will store all the details of the specific feature
            FeatureDetails fResult = new FeatureDetails();

            try
            {
                features = TrimIfNotNull(features);

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    //get all the features in the DB
                    var allFeatures = (from f in entity.Features
                                       select new
                                       {
                                           f.ID,
                                           f.Name,
                                           f.FriendlyName,
                                           f.Description
                                       }).ToList();

                    if (allFeatures == null || allFeatures.Count() <= 0)
                    {
                        fDetailsResult.IsError = true;
                        fDetailsResult.ErrorMessage = "There are no features available";
                        return fDetailsResult;
                    }

                    //store the feature id's that are allowed
                    Guid[] AllowedFeatureIDs = new Guid[allFeatures.Count];
                    for (int i = 0; i < allFeatures.Count(); i++)
                    {
                        var curFeature = allFeatures[i];
                        AllowedFeatureIDs[i] = curFeature.ID;
                    }

                    //store all the features that the user selected 
                    ArrayList SelectedFeaturesList = new ArrayList();

                    //check if there are additional features that the user selected
                    JArray SelectedFeatures = JArray.Parse(features);
                    if (SelectedFeatures != null && SelectedFeatures.Count() > 0)
                    {
                        //cycle through all the features that the user selected
                        foreach (JObject curFeature in SelectedFeatures)
                        {
                            //get the values received for the selected feature
                            Guid SelectedFeatureID;
                            if (!Guid.TryParse(curFeature.GetValue("id").ToString(), out SelectedFeatureID))
                            {
                                fDetailsResult.IsError = true;
                                fDetailsResult.ErrorMessage = "Feature ID is not in the correct format";
                                return fDetailsResult;
                            }

                            Boolean OptionalFeature;
                            if (!Boolean.TryParse(curFeature.GetValue("optionalFeature").ToString(), out OptionalFeature))
                            {
                                fDetailsResult.IsError = true;
                                fDetailsResult.ErrorMessage = "Optional Feature is not in the correct format";
                                return fDetailsResult;
                            }

                            string optionalPrice = CleanForDecimal(curFeature.GetValue("optionalPrice").ToString());

                            Decimal OptionalPrice;
                            if (!Decimal.TryParse(optionalPrice, out OptionalPrice))
                            {
                                fDetailsResult.IsError = true;
                                fDetailsResult.ErrorMessage = "Optional Price is not in the correct format";
                                return fDetailsResult;
                            }

                            //if the feature that the user selected is not a valid feature
                            if (!AllowedFeatureIDs.Contains(SelectedFeatureID))
                            {
                                fDetailsResult.IsError = true;
                                fDetailsResult.ErrorMessage = "Please ensure that you select a valid feature";
                                return fDetailsResult;

                            }

                            //save the features details
                            FeatureDetails fd = new FeatureDetails();
                            fd.ID = SelectedFeatureID;
                            fd.OptionalFeature = OptionalFeature;
                            fd.OptionalPrice = OptionalPrice;

                            //add the feature to the list of selected features
                            SelectedFeaturesList.Add(fd);
                        }
                    }

                    fDetailsResult.IsError = false;
                    fDetailsResult.Features = SelectedFeaturesList;
                    return fDetailsResult;
                }
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                fDetailsResult.IsError = true;
                fDetailsResult.ErrorMessage = errors;
                return fDetailsResult;
            }
            catch (Exception ee)
            {
                if (ee.InnerException != null)
                {
                    Helper.LogError("Inner exception", ee.InnerException.ToString());
                }
                Helper.LogError(ee.Message, ee.StackTrace);
                fDetailsResult.IsError = true;
                fDetailsResult.ErrorMessage = ee.Message;
                return fDetailsResult;
            }

        }

        //admin can activate/deactivate a specific package
        public string SystemActivatePackage(string secretKey, string packageID, string activate)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                packageID = TrimIfNotNull(packageID);
                activate = TrimIfNotNull(activate);

                var username = CheckUserHasRight(secretKey, "SystemActivatePackage");
                if (Utils.IsError(username))
                {
                    return username;
                }

                Guid PackageID;
                if (!Guid.TryParse(packageID, out PackageID))
                {
                    return Utils.WrapError("Package ID is not in the correct format");
                }

                Boolean Activate;
                if (!Boolean.TryParse(activate, out Activate))
                {
                    return Utils.WrapError("Activate is not in the correct format");
                }

                Guid LoggedInUser = (Guid)Membership.GetUser(username).ProviderUserKey;
                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    var curPackage = (from p in entity.Packages
                                      where p.ID == PackageID
                                      select p).FirstOrDefault();

                    if (curPackage == null)
                    {
                        return Utils.WrapError("The package you are trying to activate / deactivate could not be found");
                    }

                    curPackage.IsActive = Activate;
                    curPackage.DateUpdated = DateTime.Now;
                    curPackage.UpdatedBy = LoggedInUser;
                    entity.Entry(curPackage).State = EntityState.Modified;
                    entity.SaveChanges();

                }

                dynamic returnItem = new JObject();
                returnItem.Status = "Success";
                return returnItem.ToString();

            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        //view all the packages that are expiring in order of expiry date
        public string SystemViewExpiringPackages(string secretKey)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);

                var username = CheckUserHasRight(secretKey, "SystemViewExpiringPackages");
                if (Utils.IsError(username))
                {
                    return username;
                }

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    var compOwner = (from r in entity.Roles
                                     where r.LoweredRoleName == "company owner"
                                     select r).FirstOrDefault();

                    if (compOwner == null)
                    {
                        return Utils.WrapError("The role company owner could not be found");
                    }

                    //get the package details along with the main user and company details associated with the package
                    var curPackage = (from c in entity.Companies
                                      join cu in entity.CompanyUsers
                                      on c.ID equals cu.CompanyID
                                      join u in entity.aspnet_Membership
                                      on cu.UserID equals u.UserId
                                      join cp in entity.CompanyPackages
                                      on c.ID equals cp.CompanyID
                                      where c.IsActive == true && cu.RoleID == compOwner.RoleId
                                      orderby cp.DateExpires ascending
                                      select new
                                      {
                                          cp.DateExpires,
                                          CompanyPackageID = cp.ID,
                                          cp.NumberMonthsSignedUpFor,
                                          cp.PackageName,
                                          cp.PaymentType,
                                          cp.Price,
                                          cp.PackageStartingPrice,
                                          cp.OptionalFeaturesPrice,
                                          cp.DiscountValue,
                                          cp.DiscountPercentage,
                                          cp.DiscountDescription,
                                          cp.HasDiscount,
                                          cp.PurchaseOrderNumber,
                                          MainUser = u.Firstnames + " " + u.Lastname,
                                          MainUserID = u.UserId,
                                          CompanyID = c.ID,
                                          c.CompanyName
                                      }).ToList();

                    if (curPackage == null || curPackage.Count() <= 0)
                    {
                        return "[]";
                    }

                    return Helper.SerializeToJavascriptOject(curPackage);
                }

            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        #endregion

        #region Payments and Invoices

        //capture payment 
        public string SystemCapturePayment(string secretKey, string invoiceID, string datePaid, string paymentAmount)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                paymentAmount = TrimIfNotNull(paymentAmount);
                invoiceID = TrimIfNotNull(invoiceID);

                //ensure that the user is valid
                var username = CheckUserHasRight(secretKey, "SystemCapturePayment");
                if (Utils.IsError(username))
                {
                    return username;
                }

                //convert the id received
                Guid InvoiceID;
                if (!Guid.TryParse(invoiceID, out InvoiceID))
                {
                    return Utils.WrapError("Invoice ID is not in the correct format");
                }
                paymentAmount = CleanForDecimal(paymentAmount);

                Decimal PaymentAmount;
                if (!Decimal.TryParse(paymentAmount, out PaymentAmount))
                {
                    return Utils.WrapError("Payment Amount is not in the correct format");
                }

                DateTime DatePaid;
                if (!DateTime.TryParse(datePaid, out DatePaid))
                {
                    return Utils.WrapError("Date Paid is not in the correct format");
                }

                Guid LoggedInUserID = (Guid)Membership.GetUser(username).ProviderUserKey;

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    //validate the invoice that payment is being captured against
                    var curInvoice = (from i in entity.Invoices
                                      where i.ID == InvoiceID
                                      select i).FirstOrDefault();

                    if (curInvoice == null)
                    {
                        return Utils.WrapError("The invoice you are trying to capture payment against cannot be found");
                    }

                    //get the invoice for the package purchased and get all related line items
                    var curInvoiceItems = (from i in entity.Invoices
                                           join lt in entity.InvoiceLineItems
                                           on i.ID equals lt.InvoiceID
                                           where i.ID == InvoiceID
                                           select lt).ToList();

                    if (curInvoiceItems == null || curInvoiceItems.Count <= 0)
                    {
                        return Utils.WrapError("The invoice you are trying to capture payment against cannot be found");
                    }

                    decimal InvoiceTotal = 0;
                    foreach (var inv in curInvoiceItems)
                    {
                        InvoiceTotal += (inv.Price * inv.Quantity);
                    }

                    Helper.LogMessage("Invoice Total " + InvoiceTotal);

                    //get the payments on the invoice
                    /*var curPayments = (from p in entity.Payments
                                       where p.InvoiceID == InvoiceID
                                       select p).ToList();*/

                    var curPayments = (from p in entity.PaymentHistories
                                       where p.InvoiceID == InvoiceID && p.PaymentStatus == "Payment Successful"
                                       select p).ToList();

                    //calculate the amount of the payments
                    decimal CurPaymentsAmount = 0;

                    //if there are payments
                    if (curPayments != null)
                    {
                        Helper.LogMessage(" payments found");
                        foreach (var p in curPayments)
                        {
                            CurPaymentsAmount += p.AmountPaid;
                        }

                        //check if the payments match the package amount
                        if (InvoiceTotal == CurPaymentsAmount)
                        {
                            return Utils.WrapError("This invoice has already been paid");
                        }

                    }
                    else
                    {
                        Helper.LogMessage("No payments found");
                    }

                    //work out the amount still owed on the invoice
                    var totalStillOwing = InvoiceTotal - CurPaymentsAmount;

                    Helper.LogMessage("Total owing " + totalStillOwing);

                    //if the payment amount is more than the amount still owing
                    if (PaymentAmount > totalStillOwing)
                    {
                        return Utils.WrapError("You cannot pay R" + PaymentAmount + " on this invoice. The outstanding amount due on this invoice is R" + totalStillOwing);
                    }

                    //get the correct email address to use for billing
                    /*string BillEmail = GetBillingEmailAddress(curInvoice.CompanyID + "");
                    if (Utils.IsError(BillEmail))
                    {
                        return BillEmail;
                    }
                    Helper.LogMessage("Billing email received " + BillEmail);*/

                    //create a new payment
                    /*var newPayment = new Payment();
                    newPayment.ID = Guid.NewGuid();
                    newPayment.DatePaid = DatePaid;
                    newPayment.AmountPaid = PaymentAmount;
                    newPayment.InvoiceID = InvoiceID;
                    entity.Payments.Add(newPayment);*/

                    DateTime CurDate = DateTime.Now;

                    //create a new payment
                    /*var newPay = new PaymentHistory();
                    Guid PaymentID = Guid.NewGuid();
                    newPay.ID = PaymentID;
                    newPay.CompanyPackageID = curInvoice.CompanyPackageID;
                    newPay.AmountPaid = PaymentAmount;
                    newPay.InvoiceID = curInvoice.ID;
                    newPay.PaymentStatus = "Payment Successful";
                    newPay.PaymentType = "EFT";

                    //actual payment dates
                    newPay.DateStarted = DatePaid;
                    newPay.DateCompleted = DatePaid;

                    //details of who created the record
                    newPay.DateCreated = CurDate;
                    newPay.CreatedBy = LoggedInUserID;

                    //email address that payment is linked to
                    newPay.PaymentEmail = BillEmail;

                    entity.PaymentHistories.Add(newPay);
                    entity.SaveChanges();
                    Helper.LogMessage("New payment made");

                    //create areceipt and send it in an email
                    var receiptResult = CreateAndEmailReceipt(PaymentID + "", curInvoice.CompanyPackageID + "", CurDate+"", curInvoice.PackageName, curInvoice.CompanyID + "", curInvoice.CompanyName, BillEmail, PaymentAmount + "");
                    if (Utils.IsError(receiptResult))
                    {
                        return receiptResult;
                    }*/

                    //save the payment
                    SavePayment(LoggedInUserID + "", curInvoice.CompanyPackageID + "", CurDate + "", PaymentAmount + "", "EFT");

                    var curComp = (from c in entity.Invoices
                                   where c.ID == InvoiceID
                                   select c).FirstOrDefault();


                    //check if the new outstanding amount after this payment is zero, activate the package
                    var newTotalDue = totalStillOwing - PaymentAmount;
                    if (newTotalDue == 0)
                    {
                        var curCompanyPackage = (from cp in entity.CompanyPackages
                                                 join i in entity.Invoices
                                                     on cp.ID equals i.CompanyPackageID
                                                 where i.ID == InvoiceID
                                                 select cp).FirstOrDefault();

                        if (curCompanyPackage != null)
                        {
                            DateTime curDate = DateTime.Now;
                            curCompanyPackage.IsActive = true;
                            curCompanyPackage.DateActivated = curDate;
                            curCompanyPackage.ActivatedBy = LoggedInUserID;
                            curCompanyPackage.PaymentStatus = "Payment Successful";
                            curCompanyPackage.PaymentErrorStatus = "Payment Successful";
                            curCompanyPackage.PaymentPending = false;
                            entity.CompanyPackages.Add(curCompanyPackage);
                            entity.Entry(curCompanyPackage).State = EntityState.Modified;
                            entity.SaveChanges();

                            string res = SystemAddCompanyPackageHistory(secretKey, curComp.CompanyPackageID + "", curComp.CompanyID + "", curComp.CompanyName + "'s package was activated on " + curDate.ToString("dd MMMM yyyy") + ". Reason: Full payment has been made");
                            if (Utils.IsError(res))
                            {
                                return res;
                            }

                            Helper.LogMessage("SystemCapturePayment: current company ID: " + curCompanyPackage.CompanyID);
                            int activeCompPacks = entity.CompanyPackages.Count(cp => cp.CompanyID == curCompanyPackage.CompanyID && cp.IsActive);

                            Helper.LogMessage("SystemCapturePayment: number of active packages: " + activeCompPacks);
                            if (activeCompPacks == 1)
                            {
                                int numOfProjects = entity.Projects.Count(pr => pr.ProjectCompany == curCompanyPackage.CompanyID);
                                var projects = entity.Projects.Where(pr => pr.ProjectCompany == curCompanyPackage.CompanyID);

                                Helper.LogMessage("SystemCapturePayment: number of current projects: " + numOfProjects);

                                if (numOfProjects == 0)
                                {
                                    var compOwner = entity.CompanyUsers.FirstOrDefault(cu => cu.CompanyID == curCompanyPackage.CompanyID && cu.RoleID == CompanyOwnerRoleID);
                                    //Don't use the system admins user id (on create project we pull company from provided user id)

                                    Helper.LogMessage("SystemCapturePayment: company owner ID: " + compOwner.UserID);
                                    CreateDefaultProject(secretKey, compOwner.UserID, curCompanyPackage.CompanyID);
                                }
                            }

                        }
                    }

                    string res2 = SystemAddCompanyPackageHistory(secretKey, curComp.CompanyPackageID + "", curComp.CompanyID + "", "Payment Captured for " + curComp.CompanyName + ". Payment via EFT. Amount: " + paymentAmount + " on " + DatePaid.ToString("dd MMMM yyyy"));
                    return res2;

                }


                /*dynamic returnItem = new JObject();
                returnItem.Status = "Success";
                return returnItem.ToString();*/
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        //capture payment 
        /*public string SystemCapturePayment(string secretKey, string invoiceID, string datePaid, string paymentAmount, string dateStart)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                paymentAmount = TrimIfNotNull(paymentAmount);
                invoiceID = TrimIfNotNull(invoiceID);
                dateStart = TrimIfNotNull(dateStart);

                //ensure that the user is valid
                var username = CheckUserHasRight(secretKey, "SystemCapturePayment");
                if (Utils.IsError(username))
                {
                    return username;
                }

                //convert the id received
                Guid InvoiceID;
                if (!Guid.TryParse(invoiceID, out InvoiceID))
                {
                    return Utils.WrapError("Invoice ID is not in the correct format");
                }

                Decimal PaymentAmount;
                if (!Decimal.TryParse(paymentAmount, out PaymentAmount))
                {
                    return Utils.WrapError("Payment Amount is not in the correct format");
                }

                DateTime DatePaid;
                if (!DateTime.TryParse(datePaid, out DatePaid))
                {
                    return Utils.WrapError("Date Paid is not in the correct format");
                }

                DateTime DateStart;
                if (!DateTime.TryParse(dateStart, out DateStart))
                {
                    return Utils.WrapError("Date Start is not in the correct format");
                }

                Guid LoggedInUserID = (Guid)Membership.GetUser(username).ProviderUserKey;

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    //get the invoice for the package purchased
                    var curInvoice = (from i in entity.Invoices
                                      join lt in entity.InvoiceLineItems
                                      on i.ID equals lt.InvoiceID
                                      where i.ID == InvoiceID
                                      select lt).ToList();

                    if (curInvoice == null || curInvoice.Count <= 0)
                    {
                        return Utils.WrapError("The invoice you are trying to capture payment against cannot be found");
                    }

                    decimal InvoiceTotal = 0;
                    foreach (var inv in curInvoice)
                    {
                        InvoiceTotal += (inv.Price * inv.Quantity);
                    }

                    Helper.LogMessage("Invoice Total " + InvoiceTotal);

                    //get the payments on the invoice
                    var curPayments = (from p in entity.Payments
                                       where p.InvoiceID == InvoiceID
                                       select p).ToList();


                    //calculate the amount of the payments
                    decimal CurPaymentsAmount = 0;

                    //if there are payments
                    if (curPayments != null)
                    {
                        Helper.LogMessage(" payments found");
                        foreach (var p in curPayments)
                        {
                            CurPaymentsAmount += p.AmountPaid;
                        }

                        //check if the payments match the package amount
                        if (InvoiceTotal == CurPaymentsAmount)
                        {
                            return Utils.WrapError("This invoice has already been paid");
                        }

                    }
                    else
                    {
                        Helper.LogMessage("No payments found");
                    }

                    //work out the amount still owed on the invoice
                    var totalStillOwing = InvoiceTotal - CurPaymentsAmount;

                    Helper.LogMessage("Total owing " + totalStillOwing);

                    //if the payment amount is more than the amount still owing
                    if (PaymentAmount > totalStillOwing)
                    {
                        return Utils.WrapError("You cannot pay $" + PaymentAmount + " on this invoice. The outstanding amount due on this invoice is $" + totalStillOwing);
                    }

                    //create a new payment
                    var newPayment = new Payment();
                    newPayment.ID = Guid.NewGuid();
                    newPayment.DatePaid = DatePaid;
                    newPayment.AmountPaid = PaymentAmount;
                    newPayment.InvoiceID = InvoiceID;
                    entity.Payments.Add(newPayment);
                    Helper.LogMessage("New payment made");
                    entity.SaveChanges();

                    var curComp = (from c in entity.Invoices
                                   where c.ID == InvoiceID
                                   select c).FirstOrDefault();


                    //check if the new outstanding amount after this payment is zero, activate the package
                    var newTotalDue = totalStillOwing - PaymentAmount;
                    if (newTotalDue == 0)
                    {
                        var curCompanyPackage = (from cp in entity.CompanyPackages
                                                 join i in entity.Invoices
                                                     on cp.ID equals i.CompanyPackageID
                                                 where i.ID == InvoiceID
                                                 select cp).FirstOrDefault();

                        if (curCompanyPackage != null)
                        {
                            DateTime ExpiryDate = DateStart.AddMonths(curCompanyPackage.NumberMonthsSignedUpFor.Value);
                            curCompanyPackage.DateExpires = ExpiryDate;

                            DateTime curDate = DateTime.Now;
                            curCompanyPackage.IsActive = true;
                            curCompanyPackage.DateActivated = curDate;
                            curCompanyPackage.ActivatedBy = LoggedInUserID;
                            entity.CompanyPackages.Add(curCompanyPackage);
                            entity.Entry(curCompanyPackage).State = EntityState.Modified;
                            entity.SaveChanges();

                            string res = SystemAddCompanyPackageHistory(secretKey, curComp.CompanyPackageID + "", curComp.CompanyID + "", curComp.CompanyName + "'s package was activated on " + curDate.ToString("dd MMMM yyyy") + ". Reason: Full payment has been made");
                            if (Utils.IsError(res))
                            {
                                return res;
                            }
                        }
                    }

                    string res2 = SystemAddCompanyPackageHistory(secretKey, curComp.CompanyPackageID + "", curComp.CompanyID + "", "Payment Captured for " + curComp.CompanyName + ". Payment via EFT. Amount: " + paymentAmount + " on " + DatePaid.ToString("dd MMMM yyyy"));
                    return res2;

                }
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }*/

        private string CreateAndEmailReceipt(string paymentID, string companyPackageID, string receiptDate,
            string packageName, string companyID, string companyName, string billEmail, string amountPaid)
        {
            try
            {
                Guid PaymentID;
                if (!Guid.TryParse(paymentID, out PaymentID))
                {
                    return Utils.WrapError("Payment ID is not in the correct format");
                }
                Guid CompanyPackageID;
                if (!Guid.TryParse(companyPackageID, out CompanyPackageID))
                {
                    return Utils.WrapError("Company Package ID is not in the correct format");
                }
                Guid CompanyID;
                if (!Guid.TryParse(companyID, out CompanyID))
                {
                    return Utils.WrapError("Company ID is not in the correct format");
                }
                DateTime ReceiptDate;
                if (!DateTime.TryParse(receiptDate, out ReceiptDate))
                {
                    return Utils.WrapError("Receipt Date is not in the correct format");
                }

                amountPaid = CleanForDecimal(amountPaid);
                Decimal AmountPaid;
                if (!Decimal.TryParse(amountPaid, out AmountPaid))
                {
                    return Utils.WrapError("Amount is not in the correct format");
                }

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {

                    //create a receipt for the buyer and email to them
                    var newReceipt = new ReceiptHistory();
                    Guid ReceiptID = Guid.NewGuid();
                    newReceipt.ID = ReceiptID;
                    newReceipt.PaymentID = PaymentID;
                    newReceipt.CompanyPackageID = CompanyPackageID;
                    newReceipt.ReceiptDate = ReceiptDate;
                    newReceipt.ReceiptDescription = "Payment Successful";
                    newReceipt.PackageName = packageName;
                    newReceipt.CompanyID = CompanyID;
                    newReceipt.CompanyName = companyName;
                    newReceipt.EmailedTo = billEmail;
                    newReceipt.AmountPaid = AmountPaid;
                    entity.ReceiptHistories.Add(newReceipt);
                    entity.SaveChanges();

                    //get the company's logo
                    string surveyaThumbLogo = ConfigurationManager.AppSettings["defaultThumbLogoPath"].ToString();

                    //setup details based on which email is being sent
                    string baseEmail = Helper.RetrieveMailTemplate("SurveyaEmailTemplate.html");
                    string contentEmail = Helper.RetrieveMailTemplate("Receipt.html");

                    baseEmail = baseEmail.Replace("[HeaderText]", "Receipt");
                    baseEmail = baseEmail.Replace("[Content]", contentEmail);
                    baseEmail = baseEmail.Replace("[EmailAddress]", billEmail);
                    baseEmail = baseEmail.Replace("[CompanyName]", companyName);
                    baseEmail = baseEmail.Replace("[SurveyaLogo]", surveyaThumbLogo);

                    //receipt info
                    baseEmail = baseEmail.Replace("[ReceiptDate]", ReceiptDate.ToString("dd MMMM yyyy"));
                    baseEmail = baseEmail.Replace("[PurchaseAmount]", AmountPaid + "");
                    baseEmail = baseEmail.Replace("[ReceiptID]", ReceiptID + "");
                    baseEmail = baseEmail.Replace("[PackageName]", packageName);

                    string sendmail = Helper.SendMail(billEmail, "Surveya Receipt", baseEmail, true);

                    if (Utils.IsError(sendmail))
                    {
                        // return sendmail;
                        Helper.LogMessage("Receipt " + ReceiptID + " could not be sent to " + billEmail);
                    }

                    return "true";

                }
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        //save the payment and then call the method to create an generate the receipt for the payment
        private string SavePayment(string userID, string companyPackageID, string paymentDate, string amountPaid, string paymentType)
        {
            try
            {
                Guid UserID;
                if (!Guid.TryParse(userID, out UserID))
                {
                    return Utils.WrapError("User ID is not in the correct format");
                }
                Guid CompanyPackageID;
                if (!Guid.TryParse(companyPackageID, out CompanyPackageID))
                {
                    return Utils.WrapError("Company Package ID is not in the correct format");
                }
                DateTime PaymentDate;
                if (!DateTime.TryParse(paymentDate, out PaymentDate))
                {
                    return Utils.WrapError("Receipt Date is not in the correct format");
                }
                amountPaid = CleanForDecimal(amountPaid);
                Decimal AmountPaid;
                if (!Decimal.TryParse(amountPaid, out AmountPaid))
                {
                    return Utils.WrapError("Amount is not in the correct format");
                }
                if (string.IsNullOrWhiteSpace(paymentType))
                {
                    return Utils.WrapError("Please ensure that you specify a payment type");
                }


                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    // the companies package
                    var curCompanyPackage = (from cp in entity.CompanyPackages
                                             where cp.ID == CompanyPackageID
                                             select cp).FirstOrDefault();

                    if (curCompanyPackage == null)
                    {
                        return Utils.WrapError("Your package could not be found");
                    }

                    //validate the invoice that payment is being captured against
                    var curInvoice = (from i in entity.Invoices
                                      where i.CompanyPackageID == curCompanyPackage.ID
                                      select i).FirstOrDefault();

                    if (curInvoice == null)
                    {
                        return Utils.WrapError("The invoice you are trying to capture payment against cannot be found");
                    }

                    //get the correct email address to use for billing
                    string BillEmail = GetBillingEmailAddress(curInvoice.CompanyID + "");
                    if (Utils.IsError(BillEmail))
                    {
                        return BillEmail;
                    }
                    Helper.LogMessage("Billing email received " + BillEmail);

                    //create a new payment
                    /*var newPayment = new Payment();
                    newPayment.ID = Guid.NewGuid();
                    newPayment.DatePaid = DatePaid;
                    newPayment.AmountPaid = PaymentAmount;
                    newPayment.InvoiceID = InvoiceID;
                    entity.Payments.Add(newPayment);*/

                    DateTime CurDate = DateTime.Now;

                    //create a new payment
                    var newPay = new PaymentHistory();
                    Guid PaymentID = Guid.NewGuid();
                    newPay.ID = PaymentID;
                    newPay.CompanyPackageID = curInvoice.CompanyPackageID;
                    newPay.AmountPaid = AmountPaid;
                    newPay.InvoiceID = curInvoice.ID;
                    newPay.PaymentStatus = "Payment Successful";
                    newPay.PaymentType = paymentType;

                    //actual payment dates
                    newPay.DateStarted = PaymentDate;
                    newPay.DateCompleted = PaymentDate;

                    //details of who created the record
                    newPay.DateCreated = CurDate;
                    newPay.CreatedBy = UserID;

                    //email address that payment is linked to
                    newPay.PaymentEmail = BillEmail;

                    entity.PaymentHistories.Add(newPay);
                    entity.SaveChanges();
                    Helper.LogMessage("New payment made");

                    //create a receipt and send it in an email
                    var receiptResult = CreateAndEmailReceipt(PaymentID + "", curInvoice.CompanyPackageID + "", CurDate + "", curInvoice.PackageName, curInvoice.CompanyID + "", curInvoice.CompanyName, BillEmail, AmountPaid + "");
                    if (Utils.IsError(receiptResult))
                    {
                        return receiptResult;
                    }

                    return "true";
                }
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        #endregion

        #region Global Settings

        //update a setting's value
        public string UpdateGlobalSetting(string secretKey, string settingID, string settingValue, string isEnabled)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                settingID = TrimIfNotNull(settingID);
                settingValue = TrimIfNotNull(settingValue);
                isEnabled = TrimIfNotNull(isEnabled);

                var username = CheckUserHasRight(secretKey, "UpdateGlobalSetting");
                if (Utils.IsError(username))
                {
                    return username;
                }

                Guid SettingID;
                if (!Guid.TryParse(settingID, out SettingID))
                {
                    return Utils.WrapError("Setting ID is not in the correct format");
                }

                if (string.IsNullOrWhiteSpace(settingValue))
                {
                    return Utils.WrapError("Please ensure that you enter a value for the setting");
                }

                Boolean IsEnabled;
                if (!Boolean.TryParse(isEnabled, out IsEnabled))
                {
                    return Utils.WrapError("Is Enabled is not in the correct format");
                }

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    var curSetting = (from s in entity.GlobalSettings
                                      where s.ID == SettingID
                                      select s).FirstOrDefault();

                    if (curSetting == null)
                    {
                        return Utils.WrapError("The setting you are trying to update could not be found");
                    }

                    curSetting.SettingValue = settingValue;
                    curSetting.IsEnabled = IsEnabled;

                    entity.Entry(curSetting).State = EntityState.Modified;
                    entity.GlobalSettings.Add(curSetting);
                    entity.SaveChanges();
                }

                dynamic returnItem = new JObject();
                returnItem.Status = "Success";
                return returnItem.ToString();
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        //enable/disable a setting
        public string EnableGlobalSetting(string secretKey, string settingID, string isEnabled)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                settingID = TrimIfNotNull(settingID);
                isEnabled = TrimIfNotNull(isEnabled);

                var username = CheckUserHasRight(secretKey, "EnableGlobalSetting");
                if (Utils.IsError(username))
                {
                    return username;
                }

                Guid SettingID;
                if (!Guid.TryParse(settingID, out SettingID))
                {
                    return Utils.WrapError("Setting ID is not in the correct format");
                }

                Boolean IsEnabled;
                if (!Boolean.TryParse(isEnabled, out IsEnabled))
                {
                    return Utils.WrapError("Is Enabled is not in the correct format");
                }

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    var curSetting = (from s in entity.GlobalSettings
                                      where s.ID == SettingID
                                      select s).FirstOrDefault();

                    if (curSetting == null)
                    {
                        return Utils.WrapError("The setting you are trying to update could not be found");
                    }

                    curSetting.IsEnabled = IsEnabled;

                    entity.Entry(curSetting).State = EntityState.Modified;
                    entity.GlobalSettings.Add(curSetting);
                    entity.SaveChanges();
                }

                dynamic returnItem = new JObject();
                returnItem.Status = "Success";
                return returnItem.ToString();
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        //view all settings
        public string ViewGlobalSettings(string secretKey)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);

                var username = CheckUserHasRight(secretKey, "ViewGlobalSettings");
                if (Utils.IsError(username))
                {
                    return username;
                }

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    var curSettings = (from s in entity.GlobalSettings
                                       select new
                                       {
                                           s.ID,
                                           s.SettingName,
                                           s.SettingValue,
                                           s.IsEnabled
                                       }).ToList();

                    if (curSettings == null || curSettings.Count() <= 0)
                    {
                        return "[]";
                    }
                    return Helper.SerializeToJavascriptOject(curSettings);
                }

            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        #endregion

        #region Assume a Company

        private string CheckAssumeCompany(string secretKey)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);

                /*var username = CheckUserHasRight(secretKey, "AssumeCompany");
                if (Utils.IsError(username))
                {
                    return username;
                }*/

                //get the ID for the logged in user
                string userID = GetUserID(secretKey);
                if (Utils.IsError(userID))
                {
                    return userID;
                }
                Guid UserID;
                if (!Guid.TryParse(userID, out UserID))
                {
                    return Utils.WrapError("User ID is not in the correct format");
                }

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    //check if there are any current assumes for this user
                    var curAssumes = (from a in entity.AssumeCompanyHistories
                                      where a.UserID == UserID && a.CurrentSession && !a.DateCompleted.HasValue
                                      select a).FirstOrDefault();

                    //if there are none, then return the company ID for the logged in user
                    if (curAssumes == null)
                    {

                        //get the company ID for the logged in user
                        /*string companyID = GetUserCompanyID(secretKey);

                        //if there is a error retrieving the logged in users company ID, return the error 
                        if (Utils.IsError(companyID))
                        {
                            return companyID;
                        }*/

                        var userCompany = (from cu in entity.CompanyUsers
                                           join c in entity.Companies
                                           on cu.CompanyID equals c.ID
                                           where cu.UserID == UserID
                                           select c).FirstOrDefault();

                        if (userCompany == null)
                        {
                            return Utils.WrapError("You are not assigned to a company");
                        }

                        return userCompany.ID.ToString();

                    }

                    //return the Company ID that the user is assuming
                    return curAssumes.CompanyID.ToString();
                }
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        public string StartAssumeCompany(string secretKey, string companyID)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                companyID = TrimIfNotNull(companyID);

                var username = CheckUserHasRight(secretKey, "AssumeCompany");
                if (Utils.IsError(username))
                {
                    return username;
                }

                Guid CompanyID;
                if (!Guid.TryParse(companyID, out CompanyID))
                {
                    return Utils.WrapError("Company ID not in the correct format");
                }

                //get the logged in user
                Guid UserID = (Guid)Membership.GetUser(username).ProviderUserKey;

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    //check if there are any current assumes for this user
                    var curAssumes = (from a in entity.AssumeCompanyHistories
                                      where a.UserID == UserID && a.CurrentSession && !a.DateCompleted.HasValue
                                      select a).FirstOrDefault();

                    //if there are none, then return an error
                    if (curAssumes != null)
                    {
                        return Utils.WrapError("You cannot assume this company as you are currently assuming another company. Please stop your session with the other company before starting this session");
                    }

                    //check if the company you are trying to assume exists
                    var curCompany = (from c in entity.Companies
                                      where c.ID == CompanyID
                                      select c).FirstOrDefault();

                    if (curCompany == null)
                    {
                        return Utils.WrapError("The company you are trying to assume cannot be found");
                    }

                    var newAssume = new AssumeCompanyHistory();
                    newAssume.ID = Guid.NewGuid();
                    newAssume.UserID = UserID;
                    newAssume.CompanyID = CompanyID;
                    newAssume.CurrentSession = true;
                    newAssume.DateStarted = DateTime.Now;
                    entity.AssumeCompanyHistories.Add(newAssume);
                    entity.SaveChanges();


                    dynamic returnItem = new JObject();
                    returnItem.Status = "Success";
                    return returnItem.ToString();
                }
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        public string StopAssumeCompany(string secretKey)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);

                var username = CheckUserHasRight(secretKey, "AssumeCompany");
                if (Utils.IsError(username))
                {
                    return username;
                }

                //get the logged in user
                Guid UserID = (Guid)Membership.GetUser(username).ProviderUserKey;

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    //check if there are any current assumes for this user
                    var curAssumes = (from a in entity.AssumeCompanyHistories
                                      where a.UserID == UserID && a.CurrentSession && !a.DateCompleted.HasValue
                                      select a).FirstOrDefault();

                    //if there are none, then return an error
                    if (curAssumes == null)
                    {
                        return Utils.WrapError("You are not currently assuming a company");
                    }

                    //stop assuming the company
                    curAssumes.DateCompleted = DateTime.Now;
                    curAssumes.CurrentSession = false;
                    entity.AssumeCompanyHistories.Add(curAssumes);
                    entity.Entry(curAssumes).State = EntityState.Modified;
                    entity.SaveChanges();

                    dynamic returnItem = new JObject();
                    returnItem.Status = "Success";
                    return returnItem.ToString();
                }
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        public string GetCurrentAssumeCompany(string secretKey)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);

                var username = CheckUserHasRight(secretKey, "AssumeCompany");
                if (Utils.IsError(username))
                {
                    return username;
                }

                //get the logged in user
                Guid UserID = (Guid)Membership.GetUser(username).ProviderUserKey;

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    //check if there are any current assumes for this user
                    var curAssumes = (from a in entity.AssumeCompanyHistories
                                      where a.UserID == UserID && a.CurrentSession && !a.DateCompleted.HasValue
                                      select a).FirstOrDefault();

                    //if there are none, then return an error
                    if (curAssumes == null)
                    {
                        return Utils.WrapError("The user is not assuming any companies");
                    }

                    var curCompany = (from c in entity.Companies
                                      where c.ID == curAssumes.CompanyID
                                      select c).FirstOrDefault();

                    if (curCompany == null)
                    {
                        return Utils.WrapError("Details for the company you are assuming could not be found");
                    }

                    //return the Company details that the user is assuming
                    dynamic returnItem = new JObject();
                    returnItem.Status = "Success";
                    returnItem.CompanyID = curAssumes.CompanyID;
                    returnItem.CompanyName = curCompany.CompanyName;
                    return returnItem.ToString();
                }
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        #endregion

        #region Rights and Roles

        //rights  (JArray: id) 
        public string AddSystemRole(string secretKey, string roleName, string roleDescription, string rights)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                roleName = TrimIfNotNull(roleName);
                rights = TrimIfNotNull(rights);
                roleDescription = TrimIfNotNull(roleDescription);

                var username = CheckUserHasRight(secretKey, "AddSystemRole");
                if (Utils.IsError(username))
                {
                    return username;
                }

                //check if the user is an administrator
                /*var IsAdmin = CheckUserHasAnyAdminRole(secretKey);
                if (Utils.IsError(IsAdmin))
                {
                    return IsAdmin;
                }*/

                if (string.IsNullOrWhiteSpace(roleName))
                {
                    return Utils.WrapError("Please ensure that you enter a role name");
                }

                //check if the new role already exists
                /*if (Roles.RoleExists(roleName))
                {
                    return Utils.WrapError("The role you are trying to add already exists");
                }*/

                //parse all rights to a json array
                JArray rightsList = null;
                if (!string.IsNullOrWhiteSpace(rights))
                {
                    rightsList = JArray.Parse(rights);
                }
                if (rightsList == null || rightsList.Count <= 0)
                {
                    return Utils.WrapError("No rights found for adding");
                }

                //retrieve all the id's in the list
                Guid[] rightIDs = new Guid[rightsList.Count];
                int count = 0;
                foreach (JObject i in rightsList)
                {
                    if (!Guid.TryParse(i.GetValue("id").ToString(), out rightIDs[count]))
                    {
                        return Utils.WrapError("There are rights that are not in the correct format");
                    }
                    count++;
                }

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    //check if the role name they are trying to add is one of the system roles
                    var curSysRoles = (from r in entity.Roles
                                       where r.CompanyID == null && r.IsSysRole == true
                                       && r.LoweredRoleName == roleName.ToLower()
                                       select r).FirstOrDefault();

                    if (curSysRoles != null)
                    {
                        return Utils.WrapError("You cannot use the specified role name as it is reserved for a System Role");
                    }

                    //add a new Role
                    //Roles.CreateRole(roleName);

                    Guid RoleID = Guid.NewGuid();

                    var param = new ObjectParameter("result", typeof(string));

                    entity.CreateRole(RoleID, roleName, roleDescription, null, true, true, param);

                    if (param.Value.ToString() != "1")
                    {
                        return Utils.WrapError(param.Value.ToString());
                    }

                    /*var curRole = (from r in entity.Roles
                                   where r.RoleName == roleName
                                   select r).FirstOrDefault();

                    if (curRole == null)
                    {
                        return Utils.WrapError("The role you are trying to access does not exist");
                    }

                    Guid RoleID = curRole.RoleId;
                    curRole.Description = roleDescription;
                    curRole.IsActive = true;
                    curRole.LoweredRoleName = roleName.ToLower();
                    curRole.CompanyID = null;
                    curRole.IsSysRole = true;
                    entity.Entry(curRole).State = EntityState.Modified;*/

                    //check if the rights exist
                    var curRights = (from r in entity.Application_Rights
                                     where rightIDs.Contains(r.ID)
                                     select r).ToList();


                    if (curRights == null && curRights.Count <= 0)
                    {
                        return "[]";
                    }

                    //check if there are currently rights assigned
                    var curRightsInRoles = (from r in entity.ApplicationRightsInRoles
                                            where r.RoleID == RoleID
                                            select r).ToList();

                    //if there are - remove them
                    if (curRightsInRoles != null || curRightsInRoles.Count <= 0)
                    {
                        //remove all the items that match
                        curRightsInRoles.RemoveRange(0, curRightsInRoles.Count);
                    }

                    //get the user that is assigning rights
                    Guid userID = (Guid)Membership.GetUser(username).ProviderUserKey;

                    //cycle through all the rights to add
                    foreach (Guid rightID in rightIDs)
                    {
                        //create a new right
                        var newRightInRole = new ApplicationRightsInRole();
                        newRightInRole.ID = new Guid();
                        newRightInRole.RoleID = RoleID;
                        newRightInRole.ApplicationRightID = rightID;
                        newRightInRole.DateAssigned = DateTime.Now;
                        newRightInRole.UserAssigned = userID;
                        newRightInRole.DateUpdated = DateTime.Now;
                        newRightInRole.LastUserUpdated = userID;

                        entity.ApplicationRightsInRoles.Add(newRightInRole);
                    }


                    entity.SaveChanges();

                }

                dynamic returnItem = new JObject();
                returnItem.Status = "Success";
                return returnItem.ToString();
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        //update the specified rights of a specified role 
        //rights (JArray: id) 
        public string UpdateSystemRole(string secretKey, string roleID, string roleName, string roleDescription, string rights)
        {
            try
            {

                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                roleID = TrimIfNotNull(roleID);
                rights = TrimIfNotNull(rights);
                roleName = TrimIfNotNull(roleName);
                roleDescription = TrimIfNotNull(roleDescription);

                var username = CheckUserHasRight(secretKey, "UpdateSystemRole");
                if (Utils.IsError(username))
                {
                    return username;
                }

                //check if the user is an administrator
                /*var IsAdmin = CheckUserHasAnyAdminRole(secretKey);
                if (Utils.IsError(IsAdmin))
                {
                    return IsAdmin;
                }*/

                if (string.IsNullOrWhiteSpace(rights))
                {
                    return Utils.WrapError("No rights found for adding");
                }

                Guid RoleID;
                if (!Guid.TryParse(roleID, out RoleID))
                {
                    return Utils.WrapError("Role ID is not in the correct format");
                }

                //parse all rights to a json array
                JArray rightsList = null;
                if (!string.IsNullOrWhiteSpace(rights))
                {
                    rightsList = JArray.Parse(rights);
                }
                if (rightsList == null || rightsList.Count <= 0)
                {
                    return Utils.WrapError("No rights found for updating");
                }

                //retrieve all the id's in the list
                Guid[] rightIDs = new Guid[rightsList.Count];
                int count = 0;
                foreach (JObject i in rightsList)
                {
                    if (!Guid.TryParse(i.GetValue("id").ToString(), out rightIDs[count]))
                    {
                        return Utils.WrapError("There are rights that are not in the correct format");
                    }
                    count++;
                }

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    //check if the role exists
                    var curRole = (from r in entity.Roles
                                   where r.RoleId == RoleID
                                   select r).FirstOrDefault();

                    if (curRole == null)
                    {
                        return Utils.WrapError("Role ID does not exist");
                    }

                    //check if the role name they are trying to add is one of the system roles, but not the current one
                    var curSysRoles = (from r in entity.Roles
                                       where r.CompanyID == null && r.IsSysRole == true
                                       && r.LoweredRoleName == roleName.ToLower() && r.RoleId != RoleID
                                       select r).FirstOrDefault();

                    if (curSysRoles != null)
                    {
                        return Utils.WrapError("You cannot use the specified role name as it is reserved for a System Role");
                    }


                    curRole.RoleName = roleName;
                    curRole.Description = roleDescription;

                    //check if the rights exist
                    var curRights = (from r in entity.Application_Rights
                                     where rightIDs.Contains(r.ID)
                                     select r).ToList();


                    if (curRights == null && curRights.Count <= 0)
                    {
                        return "[]";
                    }

                    //check if there are currently rights assigned
                    var curRightsInRoles = (from r in entity.ApplicationRightsInRoles
                                            where r.RoleID == RoleID
                                            select r).ToList();

                    //if there are - remove them
                    if (curRightsInRoles != null || curRightsInRoles.Count <= 0)
                    {
                        //remove all the items that match
                        curRightsInRoles.RemoveRange(0, curRightsInRoles.Count);
                    }

                    //get the user that is assigning rights
                    Guid userID = (Guid)Membership.GetUser(username).ProviderUserKey;

                    //cycle through all the rights to add
                    foreach (Guid rightID in rightIDs)
                    {
                        //create a new right
                        var newRightInRole = new ApplicationRightsInRole();
                        newRightInRole.ID = new Guid();
                        newRightInRole.RoleID = RoleID;
                        newRightInRole.ApplicationRightID = rightID;
                        newRightInRole.DateAssigned = DateTime.Now;
                        newRightInRole.UserAssigned = userID;
                        newRightInRole.DateUpdated = DateTime.Now;
                        newRightInRole.LastUserUpdated = userID;

                        entity.ApplicationRightsInRoles.Add(newRightInRole);
                    }


                    entity.SaveChanges();


                }

                dynamic returnItem = new JObject();
                returnItem.Status = "Success";
                return returnItem.ToString();
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        //remove a role
        public string DeactivateSystemRole(string secretKey, string roleID)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                roleID = TrimIfNotNull(roleID);

                var username = CheckUserHasRight(secretKey, "DeactivateSystemRole");
                if (Utils.IsError(username))
                {
                    return username;
                }

                //check if the user is an administrator
                /*var IsAdmin = CheckUserHasAnyAdminRole(secretKey);
                if (Utils.IsError(IsAdmin))
                {
                    return IsAdmin;
                }*/

                Guid RoleID;
                if (!Guid.TryParse(roleID, out RoleID))
                {
                    return Utils.WrapError("Role ID is not in the correct format");
                }

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    //check how many users are currently assigned to the role
                    var roleUsers = (from r in entity.CompanyUsers
                                     where r.RoleID == RoleID
                                     select r).Count();

                    if (roleUsers > 0)
                    {
                        return Utils.WrapError("There are " + roleUsers + " users assigned to this role. Please reassign the users before deactivating this role");
                    }

                    var role = (from r in entity.Roles
                                where r.RoleId == RoleID
                                select r).FirstOrDefault();

                    if (role == null)
                    {
                        return Utils.WrapError("The role you are trying to delete does not exist");
                    }

                    role.IsActive = false;

                    entity.Entry(role).State = EntityState.Modified;
                    entity.SaveChanges();

                }

                dynamic returnItem = new JObject();
                returnItem.Status = "Success";
                return returnItem.ToString();
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        //reactivate a role
        public string ReactivateSystemRole(string secretKey, string roleID)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                roleID = TrimIfNotNull(roleID);

                var username = CheckUserHasRight(secretKey, "ReactivateSystemRole");
                if (Utils.IsError(username))
                {
                    return username;
                }

                //check if the user is an administrator
                /*var IsAdmin = CheckUserHasAnyAdminRole(secretKey);
                if (Utils.IsError(IsAdmin))
                {
                    return IsAdmin;
                }*/

                Guid RoleID;
                if (!Guid.TryParse(roleID, out RoleID))
                {
                    return Utils.WrapError("Role ID is not in the correct format");
                }

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    var role = (from r in entity.Roles
                                where r.RoleId == RoleID
                                select r).FirstOrDefault();

                    if (role == null)
                    {
                        return Utils.WrapError("The role you are trying to delete does not exist");
                    }

                    role.IsActive = true;

                    entity.Entry(role).State = EntityState.Modified;
                    entity.SaveChanges();

                }

                dynamic returnItem = new JObject();
                returnItem.Status = "Success";
                return returnItem.ToString();
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        #endregion

        #endregion

        #region Mobile Application

        #region Surveys

        public string GetSurveysForUser(string secretKey)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                //companyID = TrimIfNotNull(companyID);

                var username = CheckUserHasRight(secretKey, "GetSurveysForUser");
                if (Utils.IsError(username))
                {
                    return username;
                }

                //check if the user is an administrator
                /*var IsAdmin = CheckUserHasAdminRole(secretKey);

                //if the user is not an admin 
                if (Utils.IsError(IsAdmin))
                {

                    var userCompany = CheckUserCompany(secretKey, companyID);
                    if (Utils.IsError(userCompany))
                    {
                        return userCompany;
                    }
                }*/

                //convert the company id received
                /* Guid CompanyID;
                 if (!Guid.TryParse(companyID, out CompanyID))
                 {
                     return Utils.WrapError("Company ID is not in the correct format");
                 }*/

                Guid LoggedInUserID = (Guid)Membership.GetUser(username).ProviderUserKey;

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    //read the survey info
                    var survey = (from m in entity.aspnet_Membership
                                  join st in entity.SurveyTeams
                                  on m.UserId equals st.UserID
                                  join s in entity.Surveys
                                  on st.SurveyID equals s.ID
                                  join p in entity.Projects
                                  on s.ProjectID equals p.ID
                                  orderby p.ProjectName ascending
                                  where
                                        //get surveys for the user
                                        m.UserId == LoggedInUserID
                                        //that are active
                                        && s.IsActive == true
                                        //and have not been ended
                                        && s.EndDate == null
                                        && s.StartDate != null
                                  //ensure that the survey is not a emailed survey
                                  //&& (s.IsEmailed == null || s.IsEmailed == false)
                                  select new
                                  {
                                      s.ID,
                                      s.SurveyTitle,
                                      p.ProjectName,
                                      s.DateCreated
                                  }).ToList();

                    if (survey == null || survey.Count <= 0)
                    {
                        return "[]";
                    }

                    return Helper.SerializeToJavascriptOject(survey);

                }
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        //surveyIDs = JArray (id)
        public string DownloadSurveys(string secretKey, string surveyIDs, string preview)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                surveyIDs = TrimIfNotNull(surveyIDs);
                preview = TrimIfNotNull(preview);

                //check if the user is trying to preview or download
                bool Preview = false;
                if (!Boolean.TryParse(preview, out Preview))
                {
                    Preview = false;
                }

                var username = "";

                //if trying to download the survey
                if (!Preview)
                {
                    username = CheckUserHasRight(secretKey, "DownloadSurveys");
                    if (Utils.IsError(username))
                    {
                        return username;
                    }
                }
                //if trying to preview the survey
                else
                {
                    username = CheckUserHasRight(secretKey, "PreviewSurveys");
                    if (Utils.IsError(username))
                    {
                        return username;
                    }
                }
                //if there was no username retrieved from the CheckUserHasRights() above
                if (string.IsNullOrWhiteSpace(username))
                {
                    return Utils.WrapError("Username could not be determined");
                }

                if (string.IsNullOrWhiteSpace(surveyIDs))
                {
                    return Utils.WrapError("Please ensure you select surveys to download");
                }

                //get the ID for the logged in user
                Guid LoggedInUserID = (Guid)Membership.GetUser(username).ProviderUserKey;

                JArray SurveyIDs = JArray.Parse(surveyIDs);

                if (SurveyIDs == null || SurveyIDs.Count <= 0)
                {
                    return Utils.WrapError("Survey ID's array is in the incorrect format");
                }

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    string curCompanyLogoLG = "";
                    string curCompanyLogoSM = "";

                    //get the company that the project belongs to
                    var userCompany = (from c in entity.CompanyUsers
                                       where c.UserID == LoggedInUserID
                                       select new
                                       {
                                           compID = c.CompanyID
                                       }).FirstOrDefault();
                    if (userCompany == null)
                    {
                        return Utils.WrapError("No user found for user");
                    }
                    var company = (from c in entity.Companies
                                   where c.ID == userCompany.compID
                                   select new
                                   {
                                       compID = c.ID,
                                       compName = c.CompanyName,
                                       selectedSkin = c.SelectedSkin,
                                       c.LogoSM,
                                       LogoLG = c.Logo
                                   }).FirstOrDefault();
                    //curCompanyLogoLG = Helper.ImageBytesToBase64(company.LogoLG);
                    curCompanyLogoSM = Helper.ImageBytesToBase64(company.LogoSM);

                    //store all the surveys
                    JArray AllSurveys = new JArray();

                    foreach (JObject i in SurveyIDs)
                    {
                        string surveyID = i.GetValue("id").ToString();
                        Guid SurveyID;
                        if (!Guid.TryParse(surveyID, out SurveyID))
                        {
                            return Utils.WrapError("Survey ID is not in the correct format");
                        }
                        var survey = (from s in entity.Surveys
                                      join p in entity.Projects
                                      on s.ProjectID equals p.ID
                                      where s.ID == SurveyID
                                      select new
                                      {
                                          s.ID,
                                          s.SurveyTitle,
                                          s.Purpose,
                                          s.ProjectID,
                                          s.IsEmailed,
                                          s.SurveyConclusion,
                                          s.IsPageView,
                                          s.SurveyTheme,
                                          s.IsActive
                                      }).FirstOrDefault();

                        if (survey == null)
                        {
                            return Utils.WrapError("The survey details could not be found");
                        }

                        if (survey.IsActive == false)
                        {
                            return Utils.WrapError("The survey you are trying to upload your response for is no longer active");
                        }

                        //ensure that the survey is not a emailed survey
                        //if (survey.IsEmailed == null || survey.IsEmailed == false)
                        //{

                        var questionGroups = (
                                            //get the groups that gave no parent groups
                                            from pg in entity.QuestionGroups
                                            orderby pg.Position ascending
                                            where pg.SurveyID == SurveyID && pg.ParentGroupID == null
                                            select new
                                            {
                                                GroupID = pg.ID,
                                                pg.GroupType,
                                                pg.GroupName,
                                                pg.GroupHeading,
                                                GroupPosition = pg.Position,
                                                pg.SurveyID,
                                                pg.ParentGroupID,
                                                //get the questions for the group
                                                Questions = (
                                                   from q in entity.Questions
                                                   join qt in entity.QuestionTypes
                                                   on q.QuestionType equals qt.ID
                                                   where q.GroupID == pg.ID
                                                   orderby q.Position ascending
                                                   select new
                                                   {
                                                       QuestionID = q.ID,
                                                       q.QuestionText,
                                                       QuestionPosition = q.Position,
                                                       q.RegexPattern,
                                                       q.RegexPatternError,
                                                       q.MinimumValue,
                                                       q.MaximumValue,
                                                       q.RequiredQuestion,
                                                       q.ContainsValue,
                                                       q.EqualsValue,
                                                       q.NotEqualsValue,
                                                       q.StartsWithValue,
                                                       q.EndsWithValue,
                                                       q.LengthValue,
                                                       q.CalculationValue,
                                                       q.HasSum,
                                                       QuestionTypeID = q.QuestionType,
                                                       QuestionType = qt.Type,
                                                       QuestionTypeFriendlyName = qt.FriendlyName,
                                                       QuestionTypeDescription = qt.Description,
                                                       QuestionTypeHasOptions = qt.HasOptions,
                                                       QuestionValues = (
                                                        from qv in entity.QuestionValues
                                                        where qv.QuestionID == q.ID
                                                        select new
                                                        {
                                                            qv.ID,
                                                            qv.Name,
                                                            qv.Value,
                                                            qv.IsDefault,
                                                            qv.Position,
                                                            qv.IsOther
                                                        }
                                                       ).ToList()
                                                   }
                                                ).ToList(),
                                                Rows = (
                                                    from r in entity.QuestionRows
                                                    where r.GroupID == pg.ID
                                                    orderby r.Position ascending
                                                    select new
                                                    {
                                                        RowID = r.ID,
                                                        RowName = r.RowText,
                                                        RowPosition = r.Position
                                                    }
                                                ).ToList(),
                                                Piping = (
                                                    from p in entity.QuestionPipings
                                                    where p.GroupID == pg.ID
                                                    select new
                                                    {
                                                        PipingID = p.ID,
                                                        p.PipingConditions,
                                                        PipingShow = p.Show,

                                                    }).ToList(),
                                                //get the subgroups for this group
                                                Subgroups = (
                                                  from sg in entity.QuestionGroups
                                                  orderby sg.Position ascending
                                                  where sg.ParentGroupID == pg.ID
                                                  select new
                                                  {
                                                      GroupID = sg.ID,
                                                      sg.GroupType,
                                                      sg.GroupName,
                                                      sg.GroupHeading,
                                                      sg.Position,
                                                      sg.SurveyID,
                                                      sg.ParentGroupID,
                                                      //get the questions for the subgroup
                                                      Questions = (
                                                         from q in entity.Questions
                                                         join qt in entity.QuestionTypes
                                                         on q.QuestionType equals qt.ID
                                                         orderby q.Position ascending
                                                         where q.GroupID == sg.ID
                                                         select new
                                                         {
                                                             QuestionID = q.ID,
                                                             q.QuestionText,
                                                             QuestionPosition = q.Position,
                                                             q.RegexPattern,
                                                             q.RegexPatternError,
                                                             q.MinimumValue,
                                                             q.MaximumValue,
                                                             q.RequiredQuestion,
                                                             q.ContainsValue,
                                                             q.EqualsValue,
                                                             q.NotEqualsValue,
                                                             q.StartsWithValue,
                                                             q.EndsWithValue,
                                                             q.LengthValue,
                                                             q.CalculationValue,
                                                             q.HasSum,
                                                             QuestionTypeID = q.QuestionType,
                                                             QuestionType = qt.Type,
                                                             QuestionTypeFriendlyName = qt.FriendlyName,
                                                             QuestionTypeDescription = qt.Description,
                                                             QuestionTypeHasOptions = qt.HasOptions,
                                                             QuestionValues = (
                                                                from qv in entity.QuestionValues
                                                                where qv.QuestionID == q.ID
                                                                select new
                                                                {
                                                                    qv.ID,
                                                                    qv.Name,
                                                                    qv.Value,
                                                                    qv.IsDefault,
                                                                    qv.Position,
                                                                    qv.IsOther
                                                                }
                                                               ).ToList()
                                                         }
                                                      ).ToList(),
                                                      Rows = (
                                                            from r in entity.QuestionRows
                                                            where r.GroupID == sg.ID
                                                            orderby r.Position ascending
                                                            select new
                                                            {
                                                                RowID = r.ID,
                                                                RowName = r.RowText,
                                                                RowPosition = r.Position
                                                            }
                                                        ).ToList(),
                                                      Piping = (
                                                          from p in entity.QuestionPipings
                                                          where p.GroupID == sg.ID
                                                          select new
                                                          {
                                                              PipingID = p.ID,
                                                              p.PipingConditions,
                                                              PipingShow = p.Show,

                                                          }).ToList()
                                                  }
                                                ).ToList()
                                            }).ToList();

                        if (questionGroups == null || questionGroups.Count <= 0)
                        {
                            return "[]";
                        }

                        dynamic newSurvey = new JObject();
                        newSurvey.SurveyID = SurveyID;
                        newSurvey.SurveyName = survey.SurveyTitle;
                        newSurvey.SurveyDescription = survey.Purpose;

                        newSurvey.SurveyConclusion = survey.SurveyConclusion;
                        newSurvey.IsPageView = survey.IsPageView;
                        newSurvey.SurveyTheme = survey.SurveyTheme;
                        //newSurvey.LogoLG = curCompanyLogoLG;
                        newSurvey.LogoSM = curCompanyLogoSM;

                        newSurvey.SurveyQuestions = Helper.SerializeToJavascriptOject(questionGroups);

                        AllSurveys.Add(newSurvey);
                        //}
                    }

                    return AllSurveys.ToString();
                }

            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        #endregion

        #region Users

        //log the user into the mobile application
        /*public string LoginMobileUser(string username, string password)
        {

            try
            {
                //remove any extra whitespaces
                username = TrimIfNotNull(username);
                password = TrimIfNotNull(password);

                //validation
                if (string.IsNullOrWhiteSpace(username))
                {
                    return Utils.WrapError("Please ensure that you enter your username");
                }

                if (string.IsNullOrWhiteSpace(password))
                {
                    return Utils.WrapError("Please ensure that you enter your password");
                }

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {

                    //check if the user is valid
                    bool isValidUser = Membership.ValidateUser(username, password);

                    //if user is not  valid
                    if (!isValidUser)
                    {
                        return Utils.WrapError("Please ensure that you enter the correct login credentials");
                    }

                    //get the users id from the secret key
                    Guid UserID = (Guid)Membership.GetUser(username).ProviderUserKey;

                    //check if the user is active and is allowed to use the system
                    var UserIsActive = CheckUserIsActive(UserID + "");
                    if (Utils.IsError(UserIsActive))
                    {
                        return UserIsActive;
                    }

                    //generate a new secret key for the user
                    string secretKey = GenerateSecretKey(username, password);

                    //search for the user
                    var user = (from u in entity.aspnet_Membership
                                where u.UserId == UserID
                                select new
                                {
                                    u.Firstnames,
                                    u.Lastname
                                }).FirstOrDefault();


                    
                    //if found
                    dynamic returnUser = new JObject();
                    returnUser.Status = "Success";
                    returnUser.Firstnames = user.Firstnames;
                    returnUser.Lastname = user.Lastname;
                    returnUser.SecretKey = secretKey;
                    return returnUser.ToString();
                }
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }*/

        //log the user into the admin side of the mobile application
        public string LoginAdminMobileUser(string secretKey, string password)
        {

            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                password = TrimIfNotNull(password);

                //validation
                var username = CheckUserHasRight(secretKey, "AdminMobileUser");
                if (Utils.IsError(username))
                {
                    return username;
                }

                if (string.IsNullOrWhiteSpace(password))
                {
                    return Utils.WrapError("Please ensure that you enter your password");
                }

                Guid UserID = (Guid)Membership.GetUser(username).ProviderUserKey;

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    if (!Membership.ValidateUser(username, password))
                    {
                        return Utils.WrapError("Please ensure that your login credentials are correct");
                    }

                    //search for the user
                    var user = (from u in entity.aspnet_Membership
                                where u.UserId == UserID
                                select new
                                {
                                    u.Firstnames,
                                    u.Lastname
                                }).FirstOrDefault();

                    //get the roles for the user
                    var roles = entity.GetRolesForUser(UserID).ToList();

                    if (roles == null)
                    {
                        return Utils.WrapError("No roles assigned to this user");
                    }

                    Guid[] roleIDs = new Guid[roles.Count()];
                    int count = 0;
                    foreach (var r in roles)
                    {
                        roleIDs[count] = r.RoleId;
                        count++;
                    }

                    var userRights = (from rn in entity.ApplicationRightsInRoles
                                      join r in entity.Application_Rights
                                      on rn.ApplicationRightID equals r.ID
                                      where roleIDs.Contains(rn.RoleID.Value)
                                      select new
                                      {
                                          RightID = r.ID,
                                          RightName = r.Name
                                      }).ToList();

                    //start with no company details
                    string curCompany = null;
                    string curCompanyLogoLG = "";
                    string curCompanyLogoSM = "";
                    string curCompanySkin = "";
                    string curCompanyTheme = "";

                    //get the company user
                    var companyUser = (from cu in entity.CompanyUsers
                                       where cu.UserID == UserID
                                       select cu).FirstOrDefault();

                    //if there is a company user
                    if (companyUser != null)
                    {
                        //check if the company user is linked to a company
                        if (companyUser.CompanyID != null)
                        {

                            //get the company
                            var company = (from c in entity.Companies
                                           where c.ID == companyUser.CompanyID
                                           select new
                                           {
                                               compID = c.ID,
                                               compName = c.CompanyName,
                                               selectedSkin = c.SelectedSkin,
                                               selectedTheme = c.MobileAppThemeName,
                                               c.LogoSM,
                                               LogoLG = c.Logo
                                           }).FirstOrDefault();

                            curCompany = Helper.SerializeToJavascriptOject(company);
                            curCompanyLogoLG = Helper.ImageBytesToBase64(company.LogoLG);
                            curCompanyLogoSM = Helper.ImageBytesToBase64(company.LogoSM);
                            curCompanySkin = company.selectedSkin;
                            curCompanyTheme = company.selectedTheme;
                        }
                    }
                    //get the current package for the logged in users company
                    var curCompanyPackage = GetCompanyPackageDetails(secretKey);
                    if (Utils.IsError(curCompanyPackage))
                    {
                        return curCompanyPackage;
                    }

                    //get the package details out of the returns
                    var curCompanyPackageDetails = JObject.Parse(curCompanyPackage);

                    //parse all the received values
                    Boolean Piping = false;
                    if (!Boolean.TryParse(curCompanyPackageDetails.GetValue("Piping").ToString(), out Piping)) { Piping = false; }
                    Boolean Summing = false;
                    if (!Boolean.TryParse(curCompanyPackageDetails.GetValue("Summing").ToString(), out Summing)) { Summing = false; }
                    Boolean WhiteLabelling = false;
                    if (!Boolean.TryParse(curCompanyPackageDetails.GetValue("WhiteLabelling").ToString(), out WhiteLabelling)) { WhiteLabelling = false; }
                    Boolean PhotoCamera = false;
                    if (!Boolean.TryParse(curCompanyPackageDetails.GetValue("PhotoCamera").ToString(), out PhotoCamera)) { PhotoCamera = false; }
                    Boolean GeoServices = false;
                    if (!Boolean.TryParse(curCompanyPackageDetails.GetValue("GeoServices").ToString(), out GeoServices)) { GeoServices = false; }
                    Boolean Signatures = false;
                    if (!Boolean.TryParse(curCompanyPackageDetails.GetValue("Signatures").ToString(), out Signatures)) { Signatures = false; }
                    Boolean UniqueID = false;
                    if (!Boolean.TryParse(curCompanyPackageDetails.GetValue("UniqueID").ToString(), out UniqueID)) { UniqueID = false; }

                    //check if the logged in user can mark responses as complete
                    Boolean CanMarkAsComplete = false;
                    var markResponsesAsComplete = (from r in userRights
                                                   where r.RightName.Equals("MarkResponsesAsComplete")
                                                   select r).FirstOrDefault();

                    if (markResponsesAsComplete != null)
                    {
                        CanMarkAsComplete = true;
                    }

                    //check if the logged in user can upload responses
                    Boolean CanUploadResponses = false;
                    var uploadResponses = (from r in userRights
                                           where r.RightName.Equals("UploadResponses")
                                           select r).FirstOrDefault();
                    if (uploadResponses != null)
                    {
                        CanUploadResponses = true;
                    }

                    //get the number of responses that were synced
                    var NumberResponsesSynced = GetSurveyNumberResponsesSynced(UserID + "");

                    //if found
                    dynamic returnUser = new JObject();
                    returnUser.Status = "Success";
                    returnUser.Firstnames = user.Firstnames;
                    returnUser.Lastname = user.Lastname;
                    returnUser.Piping = Piping;
                    returnUser.Summing = Summing;
                    returnUser.WhiteLabelling = WhiteLabelling;
                    returnUser.PhotoCamera = PhotoCamera;
                    returnUser.GeoServices = GeoServices;
                    returnUser.Signatures = Signatures;
                    returnUser.UniqueID = UniqueID;
                    returnUser.CanMarkAsComplete = CanMarkAsComplete;
                    returnUser.CanUploadResponses = CanUploadResponses;
                    returnUser.LogoLG = curCompanyLogoLG;
                    returnUser.LogoSM = curCompanyLogoSM;
                    returnUser.SelectedSkin = curCompanySkin;
                    returnUser.SelectedTheme = curCompanyTheme;
                    returnUser.Company = curCompany;
                    returnUser.LogoLG = curCompanyLogoLG;
                    returnUser.LogoSM = curCompanyLogoSM;
                    returnUser.NumberResponsesSynced = NumberResponsesSynced;
                    return returnUser.ToString();
                }
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        #endregion

        #region Responses

        //responses = JArray (responseID, dateCreated, isCompleted, responseQuestions)
        //responseQuestions = JArray(responseQuestionID, questionID, questionText, responseValues)
        //responseValues = JArray (responseValueID, questionValueID, value)
        /*public string UploadResponses(string secretKey, string surveyID, string responses)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                responses = TrimIfNotNull(responses);

                var username = CheckUserHasRight(secretKey, "UploadResponses");
                if (Utils.IsError(username))
                {
                    return username;
                }

                Guid SurveyID;
                if (!Guid.TryParse(surveyID, out SurveyID))
                {
                    return Utils.WrapError("Survey ID is not in the correct format");
                }

                //get the ID for the logged in user
                Guid LoggedInUserID = (Guid)Membership.GetUser(username).ProviderUserKey;

                JArray Responses = JArray.Parse(responses);
                if (Responses == null || Responses.Count() <= 0)
                {
                    return Utils.WrapError("Please ensure that you select the responses to upload");
                }

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    //check that the survey exists
                    var curSurvey = (from s in entity.Surveys
                                     join p in entity.Projects
                                     on s.ProjectID equals p.ID
                                     where s.ID == SurveyID
                                     select new
                                     {
                                         s.ID,
                                         CompanyID = p.ProjectCompany
                                     }).FirstOrDefault();

                    if (curSurvey == null)
                    {
                        return Utils.WrapError("The survey you are trying to upload responses for cannot be found");
                    }

                    //check if the company is allowed to add more responses
                    var packageResult = CheckCompanyPackageNoResponses(curSurvey.CompanyID + "", SurveyID + "", Responses.Count() + "");
                    if (Utils.IsError(packageResult))
                    {
                        return packageResult;
                    }

                    //cycle through all the responses
                    //responses = JArray (responseID, dateCreated, isCompleted, responseQuestions)
                    foreach (JObject resp in Responses)
                    {
                        //get the values from the response
                        var responseID = resp.GetValue("responseID").ToString();
                        var dateCreated = resp.GetValue("dateCreated").ToString();
                        var isCompleted = resp.GetValue("isCompleted").ToString();
                        var responseQuestions = resp.GetValue("responseQuestions").ToString();

                        Guid ResponseID;
                        if (!Guid.TryParse(responseID, out ResponseID))
                        {
                            return Utils.WrapError("Response ID is not in the correct format");
                        }

                        DateTime DateCreated;
                        if (!DateTime.TryParse(dateCreated, out DateCreated))
                        {
                            return Utils.WrapError("Date Created is not in the correct format");
                        }

                        bool IsCompleted;
                        if (!Boolean.TryParse(isCompleted, out IsCompleted))
                        {
                            return Utils.WrapError("Is Completed is not in the correct format");
                        }

                        //if a response is not marked as complete, do not allow them to upload it
                        if (!IsCompleted)
                        {
                            return Utils.WrapError("Response " + responseID + " created on " + DateCreated.ToString("dd MMMM yyyy") + " has not been marked as complete. Please mark it as complete or remove the response from your sync");
                        }

                        //parse the questions that are in the response
                        JArray ResponseQuestions = JArray.Parse(responseQuestions);
                        if (ResponseQuestions == null || ResponseQuestions.Count() <= 0)
                        {
                            return Utils.WrapError("Please ensure that the response has questions associated with it");
                        }

                        //add a new response
                        var newResponse = new Respons();
                        newResponse.ID = ResponseID;
                        newResponse.SurveyID = SurveyID;
                        newResponse.CreatedBy = LoggedInUserID;
                        newResponse.DateCreated = DateCreated;
                        newResponse.IsCompleted = IsCompleted;
                        newResponse.IsDeleted = false;
                        entity.Responses.Add(newResponse);

                        //cycle through all the questions for the response
                        //responseQuestions = JArray(responseQuestionID, questionID, questionText, responseValues)
                        foreach (JObject respQuestion in ResponseQuestions)
                        {
                            //get the values for the response question
                            var responseQuestionID = respQuestion.GetValue("responseQuestionID").ToString();
                            var questionID = respQuestion.GetValue("questionID").ToString();
                            var questionText = respQuestion.GetValue("questionText").ToString();
                            var responseValues = respQuestion.GetValue("responseValues").ToString();

                            Guid ResponseQuestionID;
                            if (!Guid.TryParse(responseQuestionID, out ResponseQuestionID))
                            {
                                return Utils.WrapError("Response Question ID is not in the correct format");
                            }

                            Guid QuestionID;
                            if (!Guid.TryParse(questionID, out QuestionID))
                            {
                                return Utils.WrapError("Question ID is not in the correct format");
                            }

                            if (string.IsNullOrWhiteSpace(questionText))
                            {
                                return Utils.WrapError("Please ensure that you sync the question text");
                            }

                            //create a new response question
                            var newResponseQuestion = new ResponseQuestion();
                            newResponseQuestion.ID = Guid.NewGuid();
                            newResponseQuestion.QuestionID = QuestionID;
                            newResponseQuestion.QuestionText = questionText;
                            newResponseQuestion.ResponseID = ResponseID;
                            newResponseQuestion.IsAuditedRecord = false;
                            newResponseQuestion.IsDeleted = false;
                            newResponseQuestion.DateCreated = DateCreated;
                            newResponseQuestion.CreatedBy = LoggedInUserID;
                            entity.ResponseQuestions.Add(newResponseQuestion);

                            //parse the values that are in the response question
                            //responseValues = JArray (responseValueID, questionValueID, value)
                            JArray ResponseValues = JArray.Parse(responseValues);
                            if (ResponseValues != null && ResponseValues.Count() > 0)
                            {
                                //cycle through all the values received
                                foreach (JObject responseValue in ResponseValues)
                                {
                                    //get the values for the response value
                                    var responseValueID = respQuestion.GetValue("responseValueID").ToString();
                                    var questionValueID = respQuestion.GetValue("questionValueID").ToString();
                                    var value = respQuestion.GetValue("value").ToString();

                                    Guid ResponseValueID;
                                    if (!Guid.TryParse(responseValueID, out ResponseValueID))
                                    {
                                        return Utils.WrapError("Response Value ID is not in the correct format");
                                    }

                                    Guid QuestionValueID;
                                    if (!Guid.TryParse(questionValueID, out QuestionValueID))
                                    {
                                        return Utils.WrapError("Question Value ID is not in the correct format");
                                    }

                                    if (string.IsNullOrWhiteSpace(value))
                                    {
                                        return Utils.WrapError("Please ensure that all questions have responsess");
                                    }


                                    //create a new response value
                                    var newResponseValue = new ResponseValue();
                                    newResponseValue.ID = Guid.NewGuid();
                                    newResponseValue.ResponseQuestionID = ResponseQuestionID;
                                    newResponseValue.QuestionValueID = QuestionValueID;
                                    newResponseValue.Value = value;
                                    newResponseValue.IsAuditedRecord = false;
                                    newResponseValue.DateCreated = DateCreated;
                                    newResponseValue.CreatedBy = LoggedInUserID;
                                    newResponseValue.IsDeleted = false;
                                    entity.ResponseValues.Add(newResponseValue);
                                }

                            }
                        }
                    }

                    entity.SaveChanges();

                }

                dynamic returnItem = new JObject();
                returnItem.Status = "Success";
                return returnItem.ToString();
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }*/

        //start syncing responses
        public string StartSync(string secretKey, string surveyID)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                surveyID = TrimIfNotNull(surveyID);

                var username = CheckUserHasRight(secretKey, "UploadResponses");
                if (Utils.IsError(username))
                {
                    return username;
                }

                Guid SurveyID;
                if (!Guid.TryParse(surveyID, out SurveyID))
                {
                    return Utils.WrapError("Survey ID is not in the correct format");
                }

                //get the ID for the logged in user
                string loggedInUserID = GetUserID(secretKey);
                if (Utils.IsError(loggedInUserID))
                {
                    return loggedInUserID;
                }

                Guid LoggedInUserID;
                if (!Guid.TryParse(loggedInUserID, out LoggedInUserID))
                {
                    return Utils.WrapError("User ID is not in the correct format");
                }

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {

                    //check that the survey exists
                    var curSurvey = (from s in entity.Surveys
                                     join p in entity.Projects
                                     on s.ProjectID equals p.ID
                                     where s.ID == SurveyID
                                     select new
                                     {
                                         s.ID,
                                         CompanyID = p.ProjectCompany,
                                         ProjectID = p.ID,
                                         s.IsEmailed
                                     }).FirstOrDefault();

                    if (curSurvey == null)
                    {
                        return Utils.WrapError("The survey you are trying to upload responses for cannot be found");
                    }

                    //ensure that the survey is not a emailed survey
                    /*if (curSurvey.IsEmailed != null && curSurvey.IsEmailed == true)
                    {
                        return Utils.WrapError("You cannot submit responses for emailed Surveys on the app");
                    }*/

                    //check if the company is allowed to add more responses
                    var packageResult = CheckCompanyPackageNoResponses(curSurvey.CompanyID + "", curSurvey.ID + "", "0");
                    if (Utils.IsError(packageResult))
                    {
                        return packageResult;
                    }

                    var newSyncRequest = new SyncRequest();
                    Guid SyncID = Guid.NewGuid();
                    newSyncRequest.ID = SyncID;
                    newSyncRequest.SurveyID = SurveyID;
                    newSyncRequest.NumberSynced = 0;
                    newSyncRequest.IsComplete = false;
                    newSyncRequest.DateStarted = DateTime.Now;
                    newSyncRequest.UserID = LoggedInUserID;

                    entity.SyncRequests.Add(newSyncRequest);
                    entity.SaveChanges();

                    dynamic returnItem = new JObject();
                    returnItem.Status = "Success";
                    returnItem.SyncID = SyncID;
                    returnItem.NumberSynced = 0;
                    return returnItem.ToString();
                }

            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        //stop syncing responses
        public string StopSync(string secretKey, string syncID)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                syncID = TrimIfNotNull(syncID);

                var username = CheckUserHasRight(secretKey, "UploadResponses");
                if (Utils.IsError(username))
                {
                    return username;
                }

                Guid SyncID;
                if (!Guid.TryParse(syncID, out SyncID))
                {
                    return Utils.WrapError("Sync ID is not in the correct format");
                }

                //get the ID for the logged in user
                string loggedInUserID = GetUserID(secretKey);
                if (Utils.IsError(loggedInUserID))
                {
                    return loggedInUserID;
                }

                Guid LoggedInUserID;
                if (!Guid.TryParse(loggedInUserID, out LoggedInUserID))
                {
                    return Utils.WrapError("User ID is not in the correct format");
                }

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    //check the current sync
                    var curSync = (from s in entity.SyncRequests
                                   where s.ID == SyncID
                                   select s).FirstOrDefault();

                    if (curSync == null)
                    {
                        return Utils.WrapError("Your Sync Request cannot be found");
                    }

                    //if the sync was already complete
                    if (curSync.IsComplete)
                    {
                        return Utils.WrapError("This sync request has already been completed");
                    }

                    //if the request is not yours
                    if (curSync.UserID != LoggedInUserID)
                    {
                        return Utils.WrapError("You cannot stop the syncing for a request that you did not start");
                    }

                    //update the sync
                    curSync.IsComplete = true;
                    curSync.DateCompleted = DateTime.Now;
                    entity.SyncRequests.Add(curSync);
                    entity.Entry(curSync).State = EntityState.Modified;
                    entity.SaveChanges();


                    dynamic returnItem = new JObject();
                    returnItem.Status = "Success";
                    returnItem.SyncID = SyncID;
                    returnItem.NumberSynced = curSync.NumberSynced;
                    return returnItem.ToString();
                }

            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        //responseQuestions = JArray(responseQuestionID, questionID, questionText, responseValues)
        //responseValues = JArray (responseValueID, questionValueID, value)
        public string UploadResponse(string secretKey, string syncID, string responseID, string dateCreated,
            string isCompleted, string responseQuestions, string version, string surveyName)
        {

            Guid covidID = Guid.Parse("98224c3b-b8c2-4f0e-835a-9a06429201f1");      //COVID Survey ID

            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                syncID = TrimIfNotNull(syncID);
                responseID = TrimIfNotNull(responseID);
                dateCreated = TrimIfNotNull(dateCreated);
                isCompleted = TrimIfNotNull(isCompleted);
                responseQuestions = TrimIfNotNull(responseQuestions);
                version = TrimIfNotNull(version);
                surveyName = TrimIfNotNull(surveyName);

                var username = CheckUserHasRight(secretKey, "UploadResponses");
                if (Utils.IsError(username))
                {
                    return username;
                }

                Guid SyncID;
                if (!Guid.TryParse(syncID, out SyncID))
                {
                    return Utils.WrapError("Sync ID is not in the correct format");
                }

                Guid ResponseID;
                if (!Guid.TryParse(responseID, out ResponseID))
                {
                    return Utils.WrapError("Response ID is not in the correct format");
                }

                DateTime DateCreated;
                if (!DateTime.TryParse(dateCreated, out DateCreated))
                {
                    return Utils.WrapError("Date Created is not in the correct format");
                }

                Helper.LogMessage("Date Created received = " + dateCreated + " : Date Created converted = " + DateCreated);

                Helper.LogMessage("isCompleted : " + isCompleted);

                Boolean IsCompleted;
                if (!Boolean.TryParse(isCompleted, out IsCompleted))
                {
                    return Utils.WrapError("Is Completed is not in the correct format");
                }

                //if a response is not marked as complete, do not allow them to upload it
                if (!IsCompleted)
                {
                    return Utils.WrapError("Response " + responseID + " created on " + DateCreated.ToString("dd MMMM yyyy") + " has not been marked as complete. Please mark it as complete or remove the response from your sync");
                }

                /*if (string.IsNullOrWhiteSpace(surveyName)) {
                    return Utils.WrapError("Please ensure that your survey has a name");
                }*/

                //get the ID for the logged in user
                Guid LoggedInUserID = (Guid)Membership.GetUser(username).ProviderUserKey;

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    //check that the sync request exists
                    var curSync = (from s in entity.SyncRequests
                                   where s.ID == SyncID
                                   select s).FirstOrDefault();

                    if (curSync == null)
                    {
                        return Utils.WrapError("The sync request you are trying to upload responses for cannot be found");
                    }

                    //check that the survey exists
                    var curSurvey = (from s in entity.Surveys
                                     join p in entity.Projects
                                     on s.ProjectID equals p.ID
                                     where s.ID == curSync.SurveyID
                                     select new
                                     {
                                         s.ID,
                                         CompanyID = p.ProjectCompany,
                                         ProjectID = p.ID,
                                         s.IsEmailed
                                     }).FirstOrDefault();

                    if (curSurvey == null)
                    {
                        return Utils.WrapError("The survey you are trying to upload responses for cannot be found");
                    }
                    //ensure that the survey is not a emailed survey
                    /*if (curSurvey.IsEmailed != null && curSurvey.IsEmailed == true)
                    {
                        return Utils.WrapError("You cannot submit responses for emailed Surveys on the app");
                    }*/

                    //check if the company is allowed to add more responses
                    var packageResult = CheckCompanyPackageNoResponses(curSurvey.CompanyID + "", curSync.SurveyID + "", "1");
                    if (Utils.IsError(packageResult))
                    {
                        return packageResult;
                    }

                    //add a new response
                    var newResponse = new Respons();
                    newResponse.ID = ResponseID;
                    newResponse.SurveyID = curSync.SurveyID;
                    newResponse.SurveyTitle = surveyName;
                    newResponse.CreatedBy = LoggedInUserID;
                    newResponse.DateCreated = DateCreated;
                    newResponse.IsCompleted = IsCompleted;
                    entity.Responses.Add(newResponse);

                    /*#region Document Manager

                    //path on where to save the documents
                    string DocumentManagerPath = ConfigurationManager.AppSettings["DocumentManagerPath"].ToString();
                    string ProjectsSurveysResponsesPath = DocumentManagerPath + "\\" + curSurvey.CompanyID + "\\Projects\\" + curSurvey.ProjectID + "\\Surveys\\" + curSync.SurveyID + "\\Responses\\" + ResponseID;

                    //create the directory 
                    var directoryCreated = CreateDirectory(ProjectsSurveysResponsesPath);

                    #endregion*/

                    #region Response Values

                    //get the response questions recevied
                    JObject Response = JObject.Parse(responseQuestions);
                    if (Response == null)
                    {
                        return Utils.WrapError("Response is not valid");
                    }

                    var responseLength = Response.GetValue("ResponseValuesLength").ToString();

                    int ResponseLength = 0;
                    if (!Int32.TryParse(responseLength, out ResponseLength))
                    {
                        return Utils.WrapError("ResponseLength could not be determined");
                    }


                    //JObject ResponseValues = JObject.Parse(Response.GetValue("ResponseValues").ToString());
                    //string valStr = "ResponseValues : " + ResponseValues;

                    /********************************************************************
                     * TODO THE _array NEEDS TO BE IN WHEN USING A DEVICE (ANDROID / APPLE) 
                     * BUT REMOVED WHEN TESTING ON THE BROWSER
                     * ******************************************************************/
                    JArray arr = JArray.Parse(Response.GetValue("ResponseValues") + "");


                    //cycle through all the responses
                    for (int i = 0; i < ResponseLength; i++)
                    {

                        /********************************************************************
                        * TODO THE _array NEEDS TO BE IN WHEN USING A DEVICE (ANDROID / APPLE) 
                        * BUT REMOVED WHEN TESTING ON THE BROWSER
                        * ******************************************************************/
                        //JObject ResponseValue = JObject.Parse(ResponseValues.GetValue(i + "").ToString());
                        JObject ResponseValue = JObject.Parse(arr[i] + "");

                        Helper.LogMessage("ResponseValue_" + i + " : " + ResponseValue);

                        string questionID = ResponseValue.GetValue("QuestionID").ToString();
                        string questionText = ResponseValue.GetValue("QuestionText").ToString();
                        var responseValueObj = ResponseValue.GetValue("ResponseValue");
                        string responseValue = responseValueObj == null ? "null" : ResponseValue.GetValue("ResponseValue").ToString();
                        string questionType = ResponseValue.GetValue("QuestionType").ToString();

                        Guid QuestionRowID = Guid.Empty;
                        if (!string.IsNullOrWhiteSpace(version) && version.Equals("1"))
                        {
                            string questionRowID = ResponseValue.GetValue("QuestionRowID").ToString();

                            if (!string.IsNullOrWhiteSpace(questionRowID))
                            {
                                if (!Guid.TryParse(questionRowID, out QuestionRowID))
                                {
                                    return Utils.WrapError("Question Row ID is not in the correct format");
                                }
                            }
                        }
                        /*
                        Helper.LogMessage("1. questionID:" + questionID + " questionText : " + questionText + " responseValue : " + responseValue +
                           "questionType : " + questionType + " version : " + version + " QuestionRowID: " + QuestionRowID);
                           */
                        Guid QuestionID;
                        if (!Guid.TryParse(questionID, out QuestionID))
                        {
                            return Utils.WrapError("Question ID is not in the correct format");
                        }

                        if (string.IsNullOrWhiteSpace(questionText))
                        {
                            return Utils.WrapError("Please ensure that you sync the question text");
                        }

                        //if there is no response
                        if (responseValue.Equals("null"))
                        {
                            responseValue = "";
                        }

                        //if the question type is a ddl multi select or checkbox, there are multiple values for the question
                        if (questionType.Equals("ddlMultiple") || questionType.Equals("checkbox"))
                        {
                            //if a value was received
                            if (!string.IsNullOrWhiteSpace(responseValue))
                            {
                                //parse it
                                JArray values = JArray.Parse(responseValue);

                                string vals = "";
                                for (int rv = 0; rv < values.Count(); rv++)
                                {
                                    vals = string.IsNullOrWhiteSpace(values[rv] + "") ? "" : (values[rv] + "").Trim();
                                    //create a new response value
                                    var newResponseValue = new ResponseValue();
                                    newResponseValue.ID = Guid.NewGuid();
                                    newResponseValue.Value = vals;
                                    newResponseValue.DateCreated = DateCreated;
                                    newResponseValue.CreatedBy = LoggedInUserID;
                                    newResponseValue.QuestionID = QuestionID;
                                    newResponseValue.QuestionText = questionText;
                                    newResponseValue.ResponseID = ResponseID;

                                    if (QuestionRowID != Guid.Empty)
                                    {
                                        newResponseValue.QuestionRowID = QuestionRowID;
                                    }

                                    //no longer saving empty response values
                                    if (!string.IsNullOrWhiteSpace(vals))
                                    {
                                        entity.ResponseValues.Add(newResponseValue);
                                    }
                                }
                            }
                        }
                        //if theres only one value for the question
                        else
                        {
                            //create a new response value
                            var newResponseValue = new ResponseValue();
                            newResponseValue.ID = Guid.NewGuid();
                            newResponseValue.Value = responseValue;
                            newResponseValue.DateCreated = DateCreated;
                            newResponseValue.CreatedBy = LoggedInUserID;
                            newResponseValue.QuestionID = QuestionID;
                            newResponseValue.QuestionText = questionText;
                            newResponseValue.ResponseID = ResponseID;

                            if (QuestionRowID != Guid.Empty)
                            {
                                newResponseValue.QuestionRowID = QuestionRowID;
                            }
                            //no longer saving empty response values
                            if (!string.IsNullOrWhiteSpace(responseValue))
                            {
                                entity.ResponseValues.Add(newResponseValue);
                            }
                        }
                    }

                    #endregion

                    //update the current sync
                    curSync.NumberSynced = curSync.NumberSynced + 1;
                    entity.SyncRequests.Add(curSync);
                    entity.Entry(curSync).State = EntityState.Modified;


                    entity.SaveChanges();

                    if (curSurvey.ID == covidID)
                    {
                        InsertNewResponse(ResponseID);
                    }

                    dynamic returnItem = new JObject();
                    returnItem.Status = "Success";
                    returnItem.ResponseID = ResponseID;
                    returnItem.NumberSynced = curSync.NumberSynced;
                    return returnItem.ToString();

                }


            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                if (ee.InnerException != null)
                {
                    Helper.LogError("Inner Exception", ee.InnerException + "");
                }
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        //get the number of responses that were synced for the user, per survey
        private string GetSurveyNumberResponsesSynced(string userID)
        {
            try
            {
                //remove any extra whitespaces
                userID = TrimIfNotNull(userID);

                Guid UserID;
                if (Guid.TryParse(userID, out UserID))
                {
                    return Utils.WrapError("User ID is not in the correct format");
                }

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    //check the current sync
                    var curSyncNumbers = entity.GetResponseSyncNumbers(UserID).ToList();

                    if (curSyncNumbers == null || curSyncNumbers.Count() <= 0)
                    {
                        return "[]";
                    }

                    return Helper.SerializeToJavascriptOject(curSyncNumbers);
                }

            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        #endregion

        #endregion

        #region Emailed Surveys

        #region Surveys

        //verify the email link for a survey and retrieve company details for associated company
        public string VerifySurveyEmailLink(string id)
        {
            try
            {
                //remove any extra whitespaces
                id = TrimIfNotNull(id);

                //validation
                if (string.IsNullOrWhiteSpace(id))
                {
                    return Utils.WrapError("Please ensure that you use a valid link");
                }

                Guid ID;
                if (!Guid.TryParse(id, out ID))
                {
                    return Utils.WrapError("Please ensure that you use a valid link");
                }

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    #region validate the id received

                    //get the survey that the id belongs to
                    var curSurvey = (from s in entity.Surveys
                                     where s.EmailedUniqueID == ID
                                     select s).FirstOrDefault();

                    if (curSurvey == null)
                    {
                        return Utils.WrapError("The survey you are trying to view cannot be validated");
                    }

                    #endregion

                    #region get the project associated with the survey

                    //get the project that the survey belongs to
                    var curProject = (from p in entity.Projects
                                      where p.ID == curSurvey.ProjectID
                                      select p).FirstOrDefault();

                    if (curProject == null)
                    {
                        return Utils.WrapError("The project associated with the survey cannot be validated");
                    }

                    #endregion

                    #region get the company associated with the survey

                    //start with no company details
                    string curCompany = null;
                    string curCompanyLogoLG = "";
                    string curCompanyLogoSM = "";
                    string curCompanySkin = "";

                    //get the company that the project belongs to
                    var company = (from c in entity.Companies
                                   where c.ID == curProject.ProjectCompany
                                   select new
                                   {
                                       compID = c.ID,
                                       compName = c.CompanyName,
                                       selectedSkin = c.SelectedSkin,
                                       c.LogoSM,
                                       LogoLG = c.Logo
                                   }).FirstOrDefault();

                    curCompany = Helper.SerializeToJavascriptOject(company);
                    curCompanyLogoLG = Helper.ImageBytesToBase64(company.LogoLG);
                    curCompanyLogoSM = Helper.ImageBytesToBase64(company.LogoSM);
                    curCompanySkin = company.selectedSkin;

                    //start with no options allowed
                    Boolean Piping = false;
                    Boolean Summing = false;
                    Boolean WhiteLabelling = false;
                    Boolean PhotoCamera = false;
                    Boolean GeoServices = false;
                    Boolean Signatures = false;
                    DateTime PackageExpiryDate;
                    Boolean UniqueID = false;

                    //get the current package for the logged in users company
                    var curCompanyPackage = GetCompanyPackageDetailsByCompanyID(company.compID + "");

                    //if the user has a current package, get the details for the package
                    if (Utils.IsError(curCompanyPackage))
                    {
                        return Utils.WrapError("This link is no longer valid and has expired. Please contact the person that sent you the link");
                    }

                    //get the package details out of the returns
                    var curCompanyPackageDetails = JObject.Parse(curCompanyPackage);

                    //parse all the received values
                    if (!Boolean.TryParse(curCompanyPackageDetails.GetValue("Piping").ToString(), out Piping)) { Piping = false; }
                    if (!Boolean.TryParse(curCompanyPackageDetails.GetValue("Summing").ToString(), out Summing)) { Summing = false; }
                    if (!Boolean.TryParse(curCompanyPackageDetails.GetValue("WhiteLabelling").ToString(), out WhiteLabelling)) { WhiteLabelling = false; }
                    if (!Boolean.TryParse(curCompanyPackageDetails.GetValue("PhotoCamera").ToString(), out PhotoCamera)) { PhotoCamera = false; }
                    if (!Boolean.TryParse(curCompanyPackageDetails.GetValue("GeoServices").ToString(), out GeoServices)) { GeoServices = false; }
                    if (!Boolean.TryParse(curCompanyPackageDetails.GetValue("Signatures").ToString(), out Signatures)) { Signatures = false; }
                    if (!Boolean.TryParse(curCompanyPackageDetails.GetValue("UniqueID").ToString(), out UniqueID)) { UniqueID = false; }
                    if (!DateTime.TryParse(curCompanyPackageDetails.GetValue("DateExpires").ToString(), out PackageExpiryDate))
                    {
                        return Utils.WrapError("This link is no longer valid");
                    }

                    #endregion

                    //if found
                    dynamic returnUser = new JObject();
                    returnUser.Status = "Success";
                    returnUser.Firstnames = "Guest";
                    returnUser.Lastname = "";
                    returnUser.Company = curCompany;
                    returnUser.IsAdmin = true;
                    returnUser.LogoLG = curCompanyLogoLG;
                    returnUser.LogoSM = curCompanyLogoSM;
                    returnUser.SelectedSkin = curCompanySkin;
                    returnUser.Piping = Piping;
                    returnUser.Summing = Summing;
                    returnUser.WhiteLabelling = WhiteLabelling;
                    returnUser.PhotoCamera = PhotoCamera;
                    returnUser.GeoServices = GeoServices;
                    returnUser.Signatures = Signatures;
                    returnUser.UniqueID = UniqueID;
                    returnUser.CanMarkAsComplete = true;
                    returnUser.CanUploadResponses = true;
                    returnUser.SurveyID = curSurvey.ID;
                    returnUser.SurveyTitle = curSurvey.SurveyTitle;
                    returnUser.IsPageView = curSurvey.IsPageView;
                    returnUser.SurveyTheme = curSurvey.SurveyTheme;
                    return returnUser.ToString();
                }
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        public string DownloadEmailedSurvey(string id, string responseId)
        {
            try
            {
                //remove any extra whitespaces
                id = TrimIfNotNull(id);
                responseId = TrimIfNotNull(responseId);

                //validation
                if (string.IsNullOrWhiteSpace(id))
                {
                    return Utils.WrapError("Please ensure that you use a valid link");
                }
                Guid ID;
                if (!Guid.TryParse(id, out ID))
                {
                    return Utils.WrapError("Please ensure that you use a valid link");
                }
                Guid ResponseID = Guid.Empty;
                if (!string.IsNullOrWhiteSpace(responseId))
                {
                    if (!Guid.TryParse(responseId, out ResponseID))
                    {
                        return Utils.WrapError("Invalid response ID provided");
                    }
                }
                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {

                    string curCompanyLogoSM = "";
                    #region validate the id received

                    //check that the survey exists
                    var curSurvey = (from s in entity.Surveys
                                     join p in entity.Projects
                                     on s.ProjectID equals p.ID
                                     where s.EmailedUniqueID == ID
                                     select new
                                     {
                                         s.ID,
                                         CompanyID = p.ProjectCompany,
                                         ProjectID = p.ID,
                                         s.EmailedUserIDForResponses,
                                         s.SurveyTitle,
                                         s.Purpose,
                                         s.SurveyConclusion,
                                         s.IsPageView,
                                         s.SurveyTheme,
                                         s.IsActive
                                     }).FirstOrDefault();

                    if (curSurvey == null)
                    {
                        return Utils.WrapError("The survey you are trying to upload your response for cannot be validated");
                    }

                    if (curSurvey.IsActive == false)
                    {
                        return Utils.WrapError("The survey you are trying to upload your response for is no longer active");
                    }

                    #endregion

                    #region Validate that the package exists for the company

                    //get the current package for the logged in users company
                    var curCompanyPackage = GetCompanyPackageDetailsByCompanyID(curSurvey.CompanyID + "");

                    //if the user has a current package, get the details for the package
                    if (Utils.IsError(curCompanyPackage))
                    {
                        return Utils.WrapError("This link is no longer valid and has expired. Please contact the person that sent you the link");
                    }

                    #endregion


                    var company = (from c in entity.Companies
                                   where c.ID == curSurvey.CompanyID
                                   select new
                                   {
                                       compID = c.ID,
                                       compName = c.CompanyName,
                                       selectedSkin = c.SelectedSkin,
                                       c.LogoSM,
                                       LogoLG = c.Logo
                                   }).FirstOrDefault();
                    //curCompanyLogoLG = Helper.ImageBytesToBase64(company.LogoLG);
                    curCompanyLogoSM = Helper.ImageBytesToBase64(company.LogoSM);


                    //store all the surveys
                    JArray AllSurveys = new JArray();

                    dynamic newSurvey = new JObject();
                    newSurvey.SurveyID = curSurvey.ID;
                    newSurvey.SurveyName = curSurvey.SurveyTitle;
                    newSurvey.SurveyDescription = curSurvey.Purpose;
                    newSurvey.SurveyConclusion = curSurvey.SurveyConclusion;
                    newSurvey.IsPageView = curSurvey.IsPageView;
                    newSurvey.SurveyTheme = curSurvey.SurveyTheme;
                    newSurvey.LogoSM = curCompanyLogoSM;

                    if (ResponseID == Guid.Empty)
                    {
                        var questionGroups = (
                        //get the groups that gave no parent groups
                                        from pg in entity.QuestionGroups
                                        orderby pg.Position ascending
                                        where pg.SurveyID == curSurvey.ID && pg.ParentGroupID == null
                                        select new
                                        {
                                            GroupID = pg.ID,
                                            pg.GroupType,
                                            pg.GroupName,
                                            pg.GroupHeading,
                                            GroupPosition = pg.Position,
                                            pg.SurveyID,
                                            pg.ParentGroupID,
                                            //get the questions for the group
                                            Questions = (
                                               from q in entity.Questions
                                               join qt in entity.QuestionTypes
                                               on q.QuestionType equals qt.ID
                                               where q.GroupID == pg.ID
                                               orderby q.Position ascending
                                               select new
                                               {
                                                   QuestionID = q.ID,
                                                   q.QuestionText,
                                                   QuestionPosition = q.Position,
                                                   q.RegexPattern,
                                                   q.RegexPatternError,
                                                   q.MinimumValue,
                                                   q.MaximumValue,
                                                   q.RequiredQuestion,
                                                   q.ContainsValue,
                                                   q.EqualsValue,
                                                   q.NotEqualsValue,
                                                   q.StartsWithValue,
                                                   q.EndsWithValue,
                                                   q.LengthValue,
                                                   q.CalculationValue,
                                                   q.HasSum,
                                                   QuestionTypeID = q.QuestionType,
                                                   QuestionType = qt.Type,
                                                   QuestionTypeFriendlyName = qt.FriendlyName,
                                                   QuestionTypeDescription = qt.Description,
                                                   QuestionTypeHasOptions = qt.HasOptions,
                                                   QuestionValues = (
                                                    from qv in entity.QuestionValues
                                                    where qv.QuestionID == q.ID
                                                    select new
                                                    {
                                                        qv.ID,
                                                        qv.Name,
                                                        qv.Value,
                                                        qv.IsDefault,
                                                        qv.Position,
                                                        qv.IsOther
                                                    }
                                                   ).ToList()
                                               }
                                            ).ToList(),
                                            Rows = (
                                                from r in entity.QuestionRows
                                                where r.GroupID == pg.ID
                                                orderby r.Position ascending
                                                select new
                                                {
                                                    RowID = r.ID,
                                                    RowName = r.RowText,
                                                    RowPosition = r.Position
                                                }
                                            ).ToList(),
                                            Piping = (
                                                from p in entity.QuestionPipings
                                                where p.GroupID == pg.ID
                                                select new
                                                {
                                                    PipingID = p.ID,
                                                    p.PipingConditions,
                                                    PipingShow = p.Show,

                                                }).ToList(),
                                            //get the subgroups for this group
                                            Subgroups = (
                                              from sg in entity.QuestionGroups
                                              orderby sg.Position ascending
                                              where sg.ParentGroupID == pg.ID
                                              select new
                                              {
                                                  GroupID = sg.ID,
                                                  sg.GroupType,
                                                  sg.GroupName,
                                                  sg.GroupHeading,
                                                  sg.Position,
                                                  sg.SurveyID,
                                                  sg.ParentGroupID,
                                                  //get the questions for the subgroup
                                                  Questions = (
                                                     from q in entity.Questions
                                                     join qt in entity.QuestionTypes
                                                     on q.QuestionType equals qt.ID
                                                     orderby q.Position ascending
                                                     where q.GroupID == sg.ID
                                                     select new
                                                     {
                                                         QuestionID = q.ID,
                                                         q.QuestionText,
                                                         QuestionPosition = q.Position,
                                                         q.RegexPattern,
                                                         q.RegexPatternError,
                                                         q.MinimumValue,
                                                         q.MaximumValue,
                                                         q.RequiredQuestion,
                                                         q.ContainsValue,
                                                         q.EqualsValue,
                                                         q.NotEqualsValue,
                                                         q.StartsWithValue,
                                                         q.EndsWithValue,
                                                         q.LengthValue,
                                                         q.CalculationValue,
                                                         q.HasSum,
                                                         QuestionTypeID = q.QuestionType,
                                                         QuestionType = qt.Type,
                                                         QuestionTypeFriendlyName = qt.FriendlyName,
                                                         QuestionTypeDescription = qt.Description,
                                                         QuestionTypeHasOptions = qt.HasOptions,
                                                         QuestionValues = (
                                                            from qv in entity.QuestionValues
                                                            where qv.QuestionID == q.ID
                                                            select new
                                                            {
                                                                qv.ID,
                                                                qv.Name,
                                                                qv.Value,
                                                                qv.IsDefault,
                                                                qv.Position,
                                                                qv.IsOther
                                                            }
                                                           ).ToList()
                                                     }
                                                  ).ToList(),
                                                  Rows = (
                                                        from r in entity.QuestionRows
                                                        where r.GroupID == sg.ID
                                                        orderby r.Position ascending
                                                        select new
                                                        {
                                                            RowID = r.ID,
                                                            RowName = r.RowText,
                                                            RowPosition = r.Position
                                                        }
                                                    ).ToList(),
                                                  Piping = (
                                                      from p in entity.QuestionPipings
                                                      where p.GroupID == sg.ID
                                                      select new
                                                      {
                                                          PipingID = p.ID,
                                                          p.PipingConditions,
                                                          PipingShow = p.Show,

                                                      }).ToList()
                                              }
                                            ).ToList()
                                        }).ToList();

                        if (questionGroups == null || questionGroups.Count <= 0)
                        {
                            return "[]";
                        }
                        newSurvey.SurveyQuestions = Helper.SerializeToJavascriptOject(questionGroups);
                    }
                    else
                    {
                        var responseValues = (from qr in entity.ResponseValues
                                              where ResponseID == qr.ResponseID
                                              select new
                                              {
                                                  qr.ID,
                                                  qr.Value,
                                                  qr.QuestionID,
                                                  qr.QuestionText,
                                                  qr.ResponseID
                                              }).ToList();

                        var questionGroups = (
                        //get the groups that gave no parent groups
                                        from pg in entity.QuestionGroups
                                        orderby pg.Position ascending
                                        where pg.SurveyID == curSurvey.ID && pg.ParentGroupID == null
                                        select new
                                        {
                                            GroupID = pg.ID,
                                            pg.GroupType,
                                            pg.GroupName,
                                            pg.GroupHeading,
                                            GroupPosition = pg.Position,
                                            pg.SurveyID,
                                            pg.ParentGroupID,
                                            //get the questions for the group
                                            Questions = (
                                               from q in entity.Questions
                                               join qt in entity.QuestionTypes
                                               on q.QuestionType equals qt.ID
                                               where q.GroupID == pg.ID
                                               orderby q.Position ascending
                                               select new
                                               {
                                                   QuestionID = q.ID,
                                                   q.QuestionText,
                                                   QuestionPosition = q.Position,
                                                   q.RegexPattern,
                                                   q.RegexPatternError,
                                                   q.MinimumValue,
                                                   q.MaximumValue,
                                                   q.RequiredQuestion,
                                                   q.ContainsValue,
                                                   q.EqualsValue,
                                                   q.NotEqualsValue,
                                                   q.StartsWithValue,
                                                   q.EndsWithValue,
                                                   q.LengthValue,
                                                   q.CalculationValue,
                                                   q.HasSum,
                                                   QuestionTypeID = q.QuestionType,
                                                   QuestionType = qt.Type,
                                                   QuestionTypeFriendlyName = qt.FriendlyName,
                                                   QuestionTypeDescription = qt.Description,
                                                   QuestionTypeHasOptions = qt.HasOptions,
                                                   QuestionValues = (
                                                            from qv in entity.QuestionValues
                                                            where qv.QuestionID == q.ID
                                                            select new
                                                            {
                                                                qv.ID,
                                                                qv.Name,
                                                                qv.Value,
                                                                qv.IsDefault,
                                                                qv.Position,
                                                                qv.IsOther,
                                                                qv.QuestionID
                                                            }
                                                           ).Distinct().ToList()
                                               }
                                            ).ToList(),
                                            Rows = (
                                                from r in entity.QuestionRows
                                                where r.GroupID == pg.ID
                                                orderby r.Position ascending
                                                select new
                                                {
                                                    RowID = r.ID,
                                                    RowName = r.RowText,
                                                    RowPosition = r.Position
                                                }
                                            ).ToList(),
                                            Piping = (
                                                from p in entity.QuestionPipings
                                                where p.GroupID == pg.ID
                                                select new
                                                {
                                                    PipingID = p.ID,
                                                    p.PipingConditions,
                                                    PipingShow = p.Show,

                                                }).ToList(),
                                            //get the subgroups for this group
                                            Subgroups = (
                                              from sg in entity.QuestionGroups
                                              orderby sg.Position ascending
                                              where sg.ParentGroupID == pg.ID
                                              select new
                                              {
                                                  GroupID = sg.ID,
                                                  sg.GroupType,
                                                  sg.GroupName,
                                                  sg.GroupHeading,
                                                  sg.Position,
                                                  sg.SurveyID,
                                                  sg.ParentGroupID,
                                                  //get the questions for the subgroup
                                                  Questions = (
                                                     from q in entity.Questions
                                                     join qt in entity.QuestionTypes
                                                     on q.QuestionType equals qt.ID
                                                     orderby q.Position ascending
                                                     where q.GroupID == sg.ID
                                                     select new
                                                     {
                                                         QuestionID = q.ID,
                                                         q.QuestionText,
                                                         QuestionPosition = q.Position,
                                                         q.RegexPattern,
                                                         q.RegexPatternError,
                                                         q.MinimumValue,
                                                         q.MaximumValue,
                                                         q.RequiredQuestion,
                                                         q.ContainsValue,
                                                         q.EqualsValue,
                                                         q.NotEqualsValue,
                                                         q.StartsWithValue,
                                                         q.EndsWithValue,
                                                         q.LengthValue,
                                                         q.CalculationValue,
                                                         q.HasSum,
                                                         QuestionTypeID = q.QuestionType,
                                                         QuestionType = qt.Type,
                                                         QuestionTypeFriendlyName = qt.FriendlyName,
                                                         QuestionTypeDescription = qt.Description,
                                                         QuestionTypeHasOptions = qt.HasOptions,
                                                         QuestionValues = (
                                                            from qv in entity.QuestionValues
                                                            where qv.QuestionID == q.ID
                                                            select new
                                                            {
                                                                qv.ID,
                                                                qv.Name,
                                                                qv.Value,
                                                                qv.IsDefault,
                                                                qv.Position,
                                                                qv.IsOther,
                                                                qv.QuestionID
                                                            }
                                                           ).Distinct().ToList()
                                                     }
                                                  ).ToList(),
                                                  Rows = (
                                                        from r in entity.QuestionRows
                                                        where r.GroupID == sg.ID
                                                        orderby r.Position ascending
                                                        select new
                                                        {
                                                            RowID = r.ID,
                                                            RowName = r.RowText,
                                                            RowPosition = r.Position
                                                        }
                                                    ).ToList(),
                                                  Piping = (
                                                      from p in entity.QuestionPipings
                                                      where p.GroupID == sg.ID
                                                      select new
                                                      {
                                                          PipingID = p.ID,
                                                          p.PipingConditions,
                                                          PipingShow = p.Show,

                                                      }).ToList()
                                              }
                                            ).ToList()
                                        }).ToList();

                        if (questionGroups == null || questionGroups.Count <= 0)
                        {
                            return "[]";
                        }
                        newSurvey.SurveyResponses = Helper.SerializeToJavascriptOject(responseValues);
                        newSurvey.SurveyQuestions = Helper.SerializeToJavascriptOject(questionGroups);
                    }

                    AllSurveys.Add(newSurvey);

                    return AllSurveys.ToString();
                }

            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        #endregion

        #region Responses

        //start syncing responses
        public string StartEmailedSurveySync(string id)
        {
            try
            {
                //remove any extra whitespaces
                id = TrimIfNotNull(id);

                //validation
                if (string.IsNullOrWhiteSpace(id))
                {
                    return Utils.WrapError("Please ensure that you use a valid link");
                }

                Guid ID;
                if (!Guid.TryParse(id, out ID))
                {
                    return Utils.WrapError("Please ensure that you use a valid link");
                }


                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {

                    #region validate the id received

                    //check that the survey exists
                    var curSurvey = (from s in entity.Surveys
                                     join p in entity.Projects
                                     on s.ProjectID equals p.ID
                                     where s.EmailedUniqueID == ID
                                     select new
                                     {
                                         s.ID,
                                         CompanyID = p.ProjectCompany,
                                         ProjectID = p.ID,
                                         s.EmailedUserIDForResponses,
                                         IsActive = s.IsActive,
                                         StartDate = s.StartDate,
                                         EndDate = s.EndDate
                                     }).FirstOrDefault();

                    if (curSurvey == null)
                    {
                        return Utils.WrapError("The survey you are trying to upload your response for cannot be validated");
                    }

                    #endregion


                    if (curSurvey.EndDate.HasValue)
                    {
                        return Utils.WrapError("The survey you are trying to upload is marked as complete.");
                    }

                    #region Validate that the package  for the company

                    //check if the company is allowed to add more responses
                    var packageResult = CheckCompanyPackageNoResponses(curSurvey.CompanyID + "", curSurvey.ID + "", "0");
                    if (Utils.IsError(packageResult))
                    {
                        return packageResult;
                    }

                    #endregion

                    var newSyncRequest = new SyncRequest();
                    Guid SyncID = Guid.NewGuid();
                    newSyncRequest.ID = SyncID;
                    newSyncRequest.SurveyID = curSurvey.ID;
                    newSyncRequest.NumberSynced = 0;
                    newSyncRequest.IsComplete = false;
                    newSyncRequest.DateStarted = DateTime.Now;
                    newSyncRequest.UserID = curSurvey.EmailedUserIDForResponses.HasValue ? curSurvey.EmailedUserIDForResponses.Value : Guid.Empty;

                    entity.SyncRequests.Add(newSyncRequest);
                    entity.SaveChanges();

                    dynamic returnItem = new JObject();
                    returnItem.Status = "Success";
                    returnItem.SyncID = SyncID;
                    returnItem.NumberSynced = 0;
                    return returnItem.ToString();
                }

            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        //stop syncing responses
        public string StopEmailedSurveySync(string id, string syncID)
        {
            try
            {
                //remove any extra whitespaces
                id = TrimIfNotNull(id);
                syncID = TrimIfNotNull(syncID);

                //validation
                if (string.IsNullOrWhiteSpace(id))
                {
                    return Utils.WrapError("Please ensure that you use a valid link");
                }

                Guid ID;
                if (!Guid.TryParse(id, out ID))
                {
                    return Utils.WrapError("Please ensure that you use a valid link");
                }

                Guid SyncID;
                if (!Guid.TryParse(syncID, out SyncID))
                {
                    return Utils.WrapError("Sync ID is not in the correct format");
                }

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {

                    //check the current sync
                    var curSync = (from s in entity.SyncRequests
                                   where s.ID == SyncID
                                   select s).FirstOrDefault();

                    if (curSync == null)
                    {
                        return Utils.WrapError("Your Sync Request cannot be found");
                    }

                    #region validate the id received

                    //get the survey that the id belongs to
                    var curSurvey = (from s in entity.Surveys
                                     where s.EmailedUniqueID == ID
                                     select s).FirstOrDefault();

                    if (curSurvey == null)
                    {
                        return Utils.WrapError("The survey you are trying to upload your response for cannot be validated");
                    }

                    #endregion

                    #region validate the company

                    //get the survey that the id belongs to
                    var curCompany = (from c in entity.Companies
                                      join p in entity.Projects on c.ID equals p.ProjectCompany
                                      where p.ID == curSurvey.ProjectID
                                      select c).FirstOrDefault();

                    if (curCompany == null)
                    {
                        return Utils.WrapError("The company of the survey you are trying to upload your response for cannot be validated");
                    }

                    #endregion

                    //if the sync was already complete
                    if (curSync.IsComplete)
                    {
                        return Utils.WrapError("This sync request has already been completed");
                    }

                    //if the request is not yours
                    if (curSync.UserID != curSurvey.EmailedUserIDForResponses)
                    {
                        return Utils.WrapError("You cannot stop the syncing for a request that you did not start");
                    }


                    // ZIBA ZIBA
                    List<string> coups = new List<string>();
                    Guid CodeID = Guid.Empty, CodeID1, CodeID2, CodeID3;
                    string Code = string.Empty, Code1, Code2, Code3;
                    do
                    {
                        CodeID1 = Guid.NewGuid();
                        Code1 = CodeID1.ToString().Substring(0, 6).ToUpper();

                        CodeID2 = Guid.NewGuid();
                        Code2 = CodeID2.ToString().Substring(0, 6).ToUpper();

                        CodeID3 = Guid.NewGuid();
                        Code3 = CodeID3.ToString().Substring(0, 6).ToUpper();

                        coups = (from cp in entity.Coupons
                                 where cp.CompanyID == curCompany.ID && (cp.Code == Code1 || cp.Code == Code2 || cp.Code == Code3)
                                 select cp.Code).ToList();

                    } while (coups.Count == 3);

                    if (!coups.Contains(Code1))
                    {
                        CodeID = CodeID1;
                        Code = Code1;
                    }
                    else if (!coups.Contains(Code2))
                    {
                        CodeID = CodeID2;
                        Code = Code2;
                    }
                    else if (!coups.Contains(Code3))
                    {
                        CodeID = CodeID3;
                        Code = Code3;
                    }

                    Coupon curCoupon = new Coupon
                    {
                        ID = CodeID,
                        CompanyID = curCompany.ID,
                        Code = Code,
                        isRedeemed = false,
                        CreatedBy = curSync.UserID,
                        DateCreated = DateTime.Now
                    };

                    entity.Entry(curCoupon).State = EntityState.Added;
                    entity.SaveChanges();

                    //update the sync
                    curSync.IsComplete = true;
                    curSync.DateCompleted = DateTime.Now;
                    entity.SyncRequests.Add(curSync);
                    entity.Entry(curSync).State = EntityState.Modified;
                    entity.SaveChanges();


                    dynamic returnItem = new JObject();
                    returnItem.Status = "Success";
                    returnItem.SyncID = SyncID;
                    returnItem.CouponCode = curCoupon.Code;
                    returnItem.NumberSynced = curSync.NumberSynced;
                    return returnItem.ToString();
                }

            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        //responseQuestions = JArray(responseQuestionID, questionID, questionText, responseValues)
        //responseValues = JArray (responseValueID, questionValueID, value)
        public string UploadEmailedSurveyResponse(string id, string syncID, string responseID, string dateCreated,
            string isCompleted, string responseQuestions, string version, string surveyName)
        {
            Guid covidID = Guid.Parse("98224c3b-b8c2-4f0e-835a-9a06429201f1");      //COVID Survey ID
            try
            {
                //remove any extra whitespaces
                id = TrimIfNotNull(id);
                syncID = TrimIfNotNull(syncID);
                responseID = TrimIfNotNull(responseID);
                dateCreated = TrimIfNotNull(dateCreated);
                isCompleted = TrimIfNotNull(isCompleted);
                responseQuestions = TrimIfNotNull(responseQuestions);
                version = TrimIfNotNull(version);
                surveyName = TrimIfNotNull(surveyName);

                //validation
                if (string.IsNullOrWhiteSpace(id))
                {
                    return Utils.WrapError("Please ensure that you use a valid link");
                }

                Guid ID;
                if (!Guid.TryParse(id, out ID))
                {
                    return Utils.WrapError("Please ensure that you use a valid link");
                }

                Guid SyncID;
                if (!Guid.TryParse(syncID, out SyncID))
                {
                    return Utils.WrapError("Sync ID is not in the correct format");
                }

                Guid ResponseID;
                if (!Guid.TryParse(responseID, out ResponseID))
                {
                    return Utils.WrapError("Response ID is not in the correct format");
                }

                DateTime DateCreated;
                if (!DateTime.TryParse(dateCreated, out DateCreated))
                {
                    return Utils.WrapError("Date Created is not in the correct format");
                }

                Boolean IsCompleted = true;
                /*if (!Boolean.TryParse(isCompleted, out IsCompleted))
                {
                    return Utils.WrapError("Is Completed is not in the correct format");
                }*/

                //if a response is not marked as complete, do not allow them to upload it
                if (!IsCompleted)
                {
                    return Utils.WrapError("Response " + responseID + " created on " + DateCreated.ToString("dd MMMM yyyy") + " has not been marked as complete. Please mark it as complete or remove the response from your sync");
                }

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    //check that the sync request exists
                    var curSync = (from s in entity.SyncRequests
                                   where s.ID == SyncID
                                   select s).FirstOrDefault();

                    if (curSync == null)
                    {
                        return Utils.WrapError("The sync request you are trying to upload responses for cannot be found");
                    }

                    //check that the survey exists
                    var curSurvey = (from s in entity.Surveys
                                     join p in entity.Projects
                                     on s.ProjectID equals p.ID
                                     where s.ID == curSync.SurveyID && s.EmailedUniqueID == ID
                                     select new
                                     {
                                         s.ID,
                                         CompanyID = p.ProjectCompany,
                                         ProjectID = p.ID,
                                         s.EmailedUserIDForResponses
                                     }).FirstOrDefault();

                    if (curSurvey == null)
                    {
                        return Utils.WrapError("The survey you are trying to upload your response for cannot be validated");
                    }


                    //check if the company is allowed to add more responses
                    var packageResult = CheckCompanyPackageNoResponses(curSurvey.CompanyID + "", curSync.SurveyID + "", "1");
                    if (Utils.IsError(packageResult))
                    {
                        return packageResult;
                    }

                    //add a new response
                    Respons thisResponse;

                    thisResponse = (from r in entity.Responses
                                    where r.ID == ResponseID
                                    select r).FirstOrDefault();

                    if (thisResponse == null)
                    {
                        thisResponse = new Respons();
                        thisResponse.ID = ResponseID;
                        thisResponse.SurveyID = curSync.SurveyID;
                        thisResponse.SurveyTitle = surveyName;
                        thisResponse.CreatedBy = curSurvey.EmailedUserIDForResponses.HasValue ? curSurvey.EmailedUserIDForResponses.Value : Guid.Empty;
                        thisResponse.DateCreated = DateCreated;
                        thisResponse.IsCompleted = IsCompleted;
                        //entity.Responses.Add(thisResponse);
                        entity.Entry(thisResponse).State = EntityState.Added;
                        Helper.LogMessage($"New survey response : {ResponseID.ToString()}, SurveyTitle: {surveyName}");
                    }
                    else
                    {
                        thisResponse.SurveyTitle = surveyName;
                        thisResponse.DateCreated = DateCreated;
                        thisResponse.IsCompleted = true;
                        entity.Entry(thisResponse).State = EntityState.Modified;
                        Helper.LogMessage($"update survey response : {ResponseID.ToString()}, SurveyTitle: {surveyName}");

                        var responseVals = (from rv in entity.ResponseValues
                                            where rv.ResponseID == ResponseID
                                            select rv).ToList();

                        entity.ResponseValues.RemoveRange(responseVals);
                        Helper.LogMessage($"ResponseValues to delete : {Helper.SerializeToJavascriptOject(responseVals)}");


                        var auditedRespVals = (from au in entity.AuditedResponses
                                           where au.ResponseID == ResponseID
                                           select au).ToList();
                        if (auditedRespVals.Count > 0)
                        {
                            entity.AuditedResponses.RemoveRange(auditedRespVals);
                            Helper.LogMessage($"Audited Responses to delete : {Helper.SerializeToJavascriptOject(auditedRespVals)}");
                            /*
                            var newAuditRespList = CopyResponsesToAudit(responseVals, curSync.SurveyID);

                            entity.AuditedResponses.AddRange(newAuditRespList);
                            */
                        }
                    }

                    #region Response Values

                    //get the response questions recevied
                    JObject Response = JObject.Parse(responseQuestions);
                    if (Response == null)
                    {
                        return Utils.WrapError("Response is not valid");
                    }

                    var responseLength = Response.GetValue("ResponseValuesLength").ToString();

                    int ResponseLength = 0;
                    if (!Int32.TryParse(responseLength, out ResponseLength))
                    {
                        return Utils.WrapError("ResponseLength could not be determined");
                    }

                    JArray ResponseValues = JArray.Parse(Response.GetValue("ResponseValues").ToString());

                    if (ResponseLength > 0 && (ResponseValues == null || ResponseValues.Count == 0))
                    {
                        Helper.LogMessage($"ResponseValues.Count: {ResponseValues.Count}, ResponseValuesLength: {ResponseLength}");
                        // string id, string syncID, string responseID, string dateCreated,
                        // string isCompleted, string responseQuestions, string version, string surveyName
                        Helper.LogMessage($"id: {id}, syncID: {syncID}, responseID: {responseID}, dateCreated: {dateCreated}, " +
                            $"isCompleted: {isCompleted}, responseQuestions: {responseQuestions}, version: {version}, surveyName: {surveyName}");

                        return Utils.WrapError("Browser not supported - Please use Google Chrome, Microsoft Edge, Opera, or Brave");
                    }
                    //cycle through all the responses
                    for (int i = 0; i < ResponseLength; i++)
                    {
                        JObject ResponseValue = JObject.Parse(ResponseValues[i].ToString());

                        string questionID = ResponseValue.GetValue("QuestionID").ToString();
                        string questionText = ResponseValue.GetValue("QuestionText").ToString();
                        var responseValueObj = ResponseValue.GetValue("ResponseValue");
                        string responseValue = (responseValueObj != null) ? responseValueObj.ToString() : "";
                        string questionType = ResponseValue.GetValue("QuestionType").ToString();

                        Guid QuestionRowID = Guid.Empty;
                        if (!string.IsNullOrWhiteSpace(version) && version.Equals("1"))
                        {
                            string questionRowID = ResponseValue.GetValue("QuestionRowID").ToString();

                            if (!string.IsNullOrWhiteSpace(questionRowID))
                            {
                                if (!Guid.TryParse(questionRowID, out QuestionRowID))
                                {
                                    return Utils.WrapError("Question Row ID is not in the correct format");
                                }
                            }
                        }

                        Guid QuestionID;
                        if (!Guid.TryParse(questionID, out QuestionID))
                        {
                            return Utils.WrapError("Question ID is not in the correct format");
                        }

                        if (string.IsNullOrWhiteSpace(questionText))
                        {
                            return Utils.WrapError("Please ensure that you sync the question text");
                        }

                        //if there is no response
                        if (responseValue.Equals("null"))
                        {
                            responseValue = "";
                        }

                        //if the question type is a ddl multi select or checkbox, there are multiple values for the question
                        if (questionType.Equals("ddlMultiple") || questionType.Equals("checkbox"))
                        {
                            //if a value was received
                            if (!string.IsNullOrWhiteSpace(responseValue))
                            {
                                //parse it
                                JArray values = JArray.Parse(responseValue);

                                for (int rv = 0; rv < values.Count(); rv++)
                                {

                                    if (!(values[rv]).HasValues)
                                    {
                                        //create a new response value
                                        var newResponseValue = new ResponseValue();
                                        newResponseValue.ID = Guid.NewGuid();
                                        newResponseValue.Value = values[rv] + "";
                                        newResponseValue.DateCreated = DateCreated;
                                        newResponseValue.CreatedBy = curSurvey.EmailedUserIDForResponses.HasValue ? curSurvey.EmailedUserIDForResponses.Value : Guid.Empty;
                                        newResponseValue.QuestionID = QuestionID;
                                        newResponseValue.QuestionText = questionText;
                                        newResponseValue.ResponseID = ResponseID;

                                        if (QuestionRowID != Guid.Empty)
                                        {
                                            newResponseValue.QuestionRowID = QuestionRowID;
                                        }
                                        entity.ResponseValues.Add(newResponseValue);
                                        entity.Entry(newResponseValue).State = EntityState.Added;
                                        Helper.LogMessage($"ResponseValue({rv}/{values.Count()}) to add :- questionText:{questionText}, Value:{values[rv]}");
                                    }
                                }
                            }
                        }
                        //if theres only one value for the question
                        else
                        {
                            if (!string.IsNullOrWhiteSpace(responseValue))
                            {
                                //create a new response value
                                var newResponseValue = new ResponseValue();
                                newResponseValue.ID = Guid.NewGuid();
                                newResponseValue.Value = responseValue;
                                newResponseValue.DateCreated = DateCreated;
                                newResponseValue.CreatedBy = curSurvey.EmailedUserIDForResponses.HasValue ? curSurvey.EmailedUserIDForResponses.Value : Guid.Empty;
                                newResponseValue.QuestionID = QuestionID;
                                newResponseValue.QuestionText = questionText;
                                newResponseValue.ResponseID = ResponseID;

                                if (QuestionRowID != Guid.Empty)
                                {
                                    newResponseValue.QuestionRowID = QuestionRowID;
                                }
                                //entity.ResponseValues.Add(newResponseValue);
                                entity.Entry(newResponseValue).State = EntityState.Added;
                                Helper.LogMessage($"ResponseValue to add :- questionText:{questionText}, Value:{responseValue}");
                            }
                        }

                    }

                    #endregion

                    //update the current sync
                    curSync.NumberSynced = curSync.NumberSynced + 1;
                    entity.SyncRequests.Add(curSync);
                    entity.Entry(curSync).State = EntityState.Modified;

                    entity.SaveChanges();

                    if (curSurvey.ID == covidID)
                    {
                        InsertNewResponse(ResponseID);
                    }
                    dynamic returnItem = new JObject();
                    returnItem.Status = "Success";
                    returnItem.ResponseID = ResponseID;
                    returnItem.NumberSynced = curSync.NumberSynced;
                    return returnItem.ToString();

                }


            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                if (ex.InnerException != null)
                {
                    Helper.LogError("Inner Exception", ex.InnerException.ToString() + "");
                }
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                if (ee.InnerException != null)
                {
                    Helper.LogError("Inner Exception", ee.InnerException.ToString() + "");
                }
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        public string UploadPartialSurveyResponse(string responseID, string dateCreated,
            string responseQuestions, string version, string surveyName)
        {
            try
            {
                //remove any extra whitespaces
                responseID = TrimIfNotNull(responseID);
                dateCreated = TrimIfNotNull(dateCreated);
                responseQuestions = TrimIfNotNull(responseQuestions);
                version = TrimIfNotNull(version);
                surveyName = TrimIfNotNull(surveyName);


                Guid ResponseID;
                if (!Guid.TryParse(responseID, out ResponseID))
                {
                    return Utils.WrapError("Response ID is not in the correct format");
                }

                DateTime DateCreated;
                if (!DateTime.TryParse(dateCreated, out DateCreated))
                {
                    return Utils.WrapError("Date Created is not in the correct format");
                }

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    //add a new response
                    Respons thisResponse = (from r in entity.Responses
                                            where r.ID == ResponseID
                                            select r).FirstOrDefault();
                    if (thisResponse == null)
                    {
                        return Utils.WrapError("Could not find Response to update");
                    }
                    thisResponse.IsCompleted = false;
                    entity.Entry(thisResponse).State = EntityState.Modified;

                    var curSurvey = (from s in entity.Surveys
                                     where s.ID == thisResponse.SurveyID
                                     select s).FirstOrDefault();
                    if (curSurvey == null)
                    {
                        return Utils.WrapError("Could not find Survey for this response");
                    }

                    #region Response Values

                    var responseVals = (from rv in entity.ResponseValues
                                        where rv.ResponseID == ResponseID
                                        select rv).ToList();

                    entity.ResponseValues.RemoveRange(responseVals);

                    //get the response questions recevied
                    JObject Response = JObject.Parse(responseQuestions);
                    if (Response == null)
                    {
                        return Utils.WrapError("Response is not valid");
                    }

                    var responseLength = Response.GetValue("ResponseValuesLength").ToString();

                    int ResponseLength = 0;
                    if (!Int32.TryParse(responseLength, out ResponseLength))
                    {
                        return Utils.WrapError("ResponseLength could not be determined");
                    }

                    JArray ResponseValues = JArray.Parse(Response.GetValue("ResponseValues").ToString());

                    if (ResponseLength > 0 && (ResponseValues == null || ResponseValues.Count == 0))
                    {
                        Helper.LogMessage($"ResponseValues.Count: {ResponseValues.Count}, ResponseValuesLength: {ResponseLength}");
                        // string id, string syncID, string responseID, string dateCreated,
                        // string isCompleted, string responseQuestions, string version, string surveyName
                        Helper.LogMessage($"responseID: {responseID}, dateCreated: {dateCreated}, " +
                            $"responseQuestions: {responseQuestions}, version: {version}, surveyName: {surveyName}");

                        return Utils.WrapError("Browser not supported - Please use Google Chrome, Microsoft Edge, Opera, or Brave");
                    }
                    //cycle through all the responses
                    for (int i = 0; i < ResponseLength; i++)
                    {
                        JObject ResponseValue = JObject.Parse(ResponseValues[i].ToString());

                        string questionID = ResponseValue.GetValue("QuestionID").ToString();
                        string questionText = ResponseValue.GetValue("QuestionText").ToString();
                        var responseValueObj = ResponseValue.GetValue("ResponseValue");
                        string responseValue = (responseValueObj != null) ? responseValueObj.ToString() : "";
                        string questionType = ResponseValue.GetValue("QuestionType").ToString();

                        Guid QuestionRowID = Guid.Empty;
                        if (!string.IsNullOrWhiteSpace(version) && version.Equals("1"))
                        {
                            string questionRowID = ResponseValue.GetValue("QuestionRowID").ToString();

                            if (!string.IsNullOrWhiteSpace(questionRowID))
                            {
                                if (!Guid.TryParse(questionRowID, out QuestionRowID))
                                {
                                    return Utils.WrapError("Question Row ID is not in the correct format");
                                }
                            }
                        }

                        Guid QuestionID;
                        if (!Guid.TryParse(questionID, out QuestionID))
                        {
                            return Utils.WrapError("Question ID is not in the correct format");
                        }

                        if (string.IsNullOrWhiteSpace(questionText))
                        {
                            return Utils.WrapError("Please ensure that you sync the question text");
                        }

                        //if there is no response
                        if (responseValue.Equals("null"))
                        {
                            responseValue = "";
                        }

                        //if the question type is a ddl multi select or checkbox, there are multiple values for the question
                        if (questionType.Equals("ddlMultiple") || questionType.Equals("checkbox"))
                        {
                            //if a value was received
                            if (!string.IsNullOrWhiteSpace(responseValue))
                            {
                                //parse it
                                JArray values = JArray.Parse(responseValue);

                                for (int rv = 0; rv < values.Count(); rv++)
                                {

                                    if (!(values[rv]).HasValues)
                                    {
                                        //create a new response value
                                        var newResponseValue = new ResponseValue();
                                        newResponseValue.ID = Guid.NewGuid();
                                        newResponseValue.Value = values[rv] + "";
                                        newResponseValue.DateCreated = DateCreated;
                                        newResponseValue.CreatedBy = curSurvey.EmailedUserIDForResponses.HasValue ? curSurvey.EmailedUserIDForResponses.Value : Guid.Empty;
                                        newResponseValue.QuestionID = QuestionID;
                                        newResponseValue.QuestionText = questionText;
                                        newResponseValue.ResponseID = ResponseID;

                                        if (QuestionRowID != Guid.Empty)
                                        {
                                            newResponseValue.QuestionRowID = QuestionRowID;
                                        }
                                        entity.ResponseValues.Add(newResponseValue);
                                    }
                                }
                            }
                        }
                        //if theres only one value for the question
                        else
                        {
                            if (!string.IsNullOrWhiteSpace(responseValue))
                            {
                                //create a new response value
                                var newResponseValue = new ResponseValue();
                                newResponseValue.ID = Guid.NewGuid();
                                newResponseValue.Value = responseValue;
                                newResponseValue.DateCreated = DateCreated;
                                newResponseValue.CreatedBy = curSurvey.EmailedUserIDForResponses.HasValue ? curSurvey.EmailedUserIDForResponses.Value : Guid.Empty;
                                newResponseValue.QuestionID = QuestionID;
                                newResponseValue.QuestionText = questionText;
                                newResponseValue.ResponseID = ResponseID;

                                if (QuestionRowID != Guid.Empty)
                                {
                                    newResponseValue.QuestionRowID = QuestionRowID;
                                }
                                entity.ResponseValues.Add(newResponseValue);
                            }
                        }

                    }

                    #endregion


                    entity.SaveChanges();

                    dynamic returnItem = new JObject();
                    returnItem.Status = "Success";
                    returnItem.ResponseID = ResponseID;
                    return returnItem.ToString();

                }


            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                if (ex.InnerException != null)
                {
                    Helper.LogError("Inner Exception", ex.InnerException.ToString() + "");
                }
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                if (ee.InnerException != null)
                {
                    Helper.LogError("Inner Exception", ee.InnerException.ToString() + "");
                }
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        private List<AuditedRespons> CopyResponsesToAudit(List<ResponseValue> ResponseValues, Guid SurveyID)
        {
            List<AuditedRespons> auditedResponsList = new List<AuditedRespons>();

            for (int i = 0; i < ResponseValues.Count; i++)
            {
                ResponseValue rv = ResponseValues[i];
                auditedResponsList.Add(new AuditedRespons
                {
                    ID = Guid.NewGuid(),
                    DateCreated = DateTime.Now,
                    CreatedBy = rv.CreatedBy,
                    SurveyID = SurveyID,
                    ResponseID = rv.ID,
                    ResponseCreatedBy = rv.CreatedBy,
                    ResponseDateCreated = DateTime.Now,
                    ResponseValueID =  rv.ID,
                    ResponseValue = rv.Value,
                    ResponseValueQuestionID = (Guid)rv.QuestionID,
                    ResponseValueQuestionText  =rv.QuestionText
                });
            }

            return auditedResponsList;
        }

        #endregion

        #endregion

        #region API Methods

        /*private string secret = "123AW3$0M3$3CR3T@S3CR3T4SURV3Y@0NLY321";

        private string CalculateMD5Hash(string input)
        {
            // step 1, calculate MD5 hash from input
            MD5 md5 = System.Security.Cryptography.MD5.Create();
            byte[] inputBytes = Encoding.ASCII.GetBytes(input);
            byte[] hash = md5.ComputeHash(inputBytes);

            // step 2, convert byte array to hex string
            StringBuilder sb = new StringBuilder();
            for (int i = 0; i < hash.Length; i++)
            {
                sb.Append(hash[i].ToString("X2"));
            }
            return sb.ToString();
        }*/

        //Validate that the user does not already exist
        //p1: users email address
        //p2: users firstnames
        //p3: users lastname
        //p4: date submitted
        //p5: md5 hash
        /*public string ValidateNewCompanyUser(string p1, string p2, string p3, string p4, string p5)
        {
            return Utils.WrapError("This method is no longer supported");
            try
            {
                //remove any extra whitespaces
                p1 = TrimIfNotNull(p1);
                p2 = TrimIfNotNull(p2);
                p3 = TrimIfNotNull(p3);
                p4 = TrimIfNotNull(p4);
                p5 = TrimIfNotNull(p5);

                //validate that fahdiel is trying to call this method
                string tknCheck = p1 + p2 + p3 + p4 + secret;

                string ReceivedString = tknCheck;
                string MD5HashOfReceivedString = CalculateMD5Hash(ReceivedString);

                if (p5.ToLower() != MD5HashOfReceivedString.ToLower())
                {
                    return (Utils.WrapError("Cannot Authorise Request"));
                }

                if (string.IsNullOrWhiteSpace(p1))
                {
                    return Utils.WrapError("Please ensure that you enter a value for p1");
                }

                if (string.IsNullOrWhiteSpace(p2))
                {
                    return Utils.WrapError("Please ensure that you enter a value for p2");
                }

                if (string.IsNullOrWhiteSpace(p3))
                {
                    return Utils.WrapError("Please ensure that you enter a value for p3");
                }

                if (string.IsNullOrWhiteSpace(p4))
                {
                    return Utils.WrapError("Please ensure that you enter a value for p4");
                }

                if (string.IsNullOrWhiteSpace(p5))
                {
                    return Utils.WrapError("Please ensure that you enter a value for p5");
                }

                DateTime P4;
                if (!DateTime.TryParse(p4, out P4))
                {
                    return Utils.WrapError("P4 is not in the correct format");
                }

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {

                    dynamic returnItem = new JObject();
                    returnItem.Status = "OK";
                    returnItem.CompanyDetails = null;
                    returnItem.UserDetails = null;

                    //get the current user
                    var curUser = (from u in entity.aspnet_Membership
                                   where u.LoweredEmail == p1.ToLower()
                                   select new
                                   {
                                       u.UserId,
                                       u.Firstnames,
                                       u.Lastname,
                                       u.Email
                                   }).FirstOrDefault();

                    // if there is a user
                    if (curUser != null)
                    {
                        //return the company details
                        returnItem.Status = "NotOK";
                        returnItem.UserDetails = Helper.SerializeToJavascriptOject(curUser);

                        //get the company the user is assigned to
                        var curCompany = (
                            from x in
                                (
                                    from cu in entity.CompanyUsers
                                    join c in entity.Companies
                                    on cu.CompanyID equals c.ID
                                    where cu.UserID == curUser.UserId
                                    select new
                                      {
                                          c.ID,
                                          c.CompanyName,
                                          c.RegistrationNumber,
                                          c.VatNumber,
                                          c.Logo,
                                          c.PackageID,
                                          c.IsActive,
                                          c.PhysicalAddress
                                      }).ToList()
                            select new
                            {
                                x.ID,
                                x.CompanyName,
                                x.RegistrationNumber,
                                x.VatNumber,
                                Logo = x.Logo != null ? Helper.ImageBytesToBase64(x.Logo) : null,
                                x.PackageID,
                                x.PhysicalAddress,
                                x.IsActive
                            }
                    ).FirstOrDefault();

                        //if there is a company
                        if (curCompany != null)
                        {
                            returnItem.CompanyDetails = Helper.SerializeToJavascriptOject(curCompany);
                        }
                    }
                    return returnItem.ToString();
                }
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }*/

        //Add a new company to a new user
        //p1: users email address
        //p2: users firstnames
        //p3: users lastname
        //p4: date submitted
        //p5: md5 hash
        //p6: company name
        //p7: registration number (can be null)
        //p8: vat number (can be null)
        //p9: logo (base64 string of the logo) (can be null)
        //p10: package id
        //p11: users contact number (can be null)
        //p12: users country (can be null)
        //p13: users physical address (can be null)
        //p14: company physical address (can be null)
        /* public string AddNewCompany(string p1, string p2, string p3, string p4, string p5, string p6, string p7, string p8, string p9, string p10,
             string p11, string p12, string p13, string p14)
         {
             return Utils.WrapError("This method is no longer supported");
             try
             {
                 //remove any extra whitespaces
                 p1 = TrimIfNotNull(p1);
                 p2 = TrimIfNotNull(p2);
                 p3 = TrimIfNotNull(p3);
                 p4 = TrimIfNotNull(p4);
                 p5 = TrimIfNotNull(p5);
                 p6 = TrimIfNotNull(p6);
                 p7 = TrimIfNotNull(p7);
                 p8 = TrimIfNotNull(p8);
                 p9 = TrimIfNotNull(p9);
                 p10 = TrimIfNotNull(p10);
                 p11 = TrimIfNotNull(p11);
                 p12 = TrimIfNotNull(p12);
                 p13 = TrimIfNotNull(p13);
                 p14 = TrimIfNotNull(p14);

                 //validate that fahdiel is trying to call this method
                 string tknCheck = p1 + p2 + p3 + p4 + p6 + p7 + p8 + p9 + p10 + p11 + p12 + p13 + p14 + secret;

                 string ReceivedString = tknCheck;
                 string MD5HashOfReceivedString = CalculateMD5Hash(ReceivedString);

                 if (p5.ToLower() != MD5HashOfReceivedString.ToLower())
                 {
                     return (Utils.WrapError("Cannot Authorise Request"));
                 }

                 if (string.IsNullOrWhiteSpace(p1))
                 {
                     return Utils.WrapError("Please ensure that you enter a value for p1");
                 }

                 if (string.IsNullOrWhiteSpace(p2))
                 {
                     return Utils.WrapError("Please ensure that you enter a value for p2");
                 }

                 if (string.IsNullOrWhiteSpace(p3))
                 {
                     return Utils.WrapError("Please ensure that you enter a value for p3");
                 }

                 if (string.IsNullOrWhiteSpace(p4))
                 {
                     return Utils.WrapError("Please ensure that you enter a value for p4");
                 }

                 if (string.IsNullOrWhiteSpace(p5))
                 {
                     return Utils.WrapError("Please ensure that you enter a value for p5");
                 }

                 if (string.IsNullOrWhiteSpace(p6))
                 {
                     return Utils.WrapError("Please ensure that you enter a value for p6");
                 }

                 if (string.IsNullOrWhiteSpace(p10))
                 {
                     return Utils.WrapError("Please ensure that you enter a value for p10");
                 }


                 DateTime P4;
                 if (!DateTime.TryParse(p4, out P4))
                 {
                     return Utils.WrapError("P4 is not in the correct format");
                 }

                 using (Surveya_DevEntities entity = new Surveya_DevEntities())
                 {
                     //get the current user
                     //p1: users email address
                     string userEmail = Membership.GetUserNameByEmail(p1);

                     if (userEmail != null)
                     {
                         return Utils.WrapError("Email address is already in use");
                     }
                     //add as a company owner role
                     var theRole = (from r in entity.Roles
                                    where r.RoleId == CompanyOwnerRoleID
                                    select r).FirstOrDefault();

                     if (theRole == null)
                     {
                         return Utils.WrapError("The role you are trying to assign this user to does not exist");
                     }

                     // CHECK PACKAGE 
                     Guid P10;
                     if (!Guid.TryParse(p10, out P10))
                     {
                         return Utils.WrapError("P10 is not in the correct format");
                     }

                     var curPackage = (from p in entity.Packages
                                       where p.ID == P10
                                       select p).FirstOrDefault();

                     if (curPackage == null)
                     {
                         return Utils.WrapError("Package does not exist");
                     }

                     // NEW USER 

                     //create a new password
                     string thePassword = Helper.CreatePassword(7, 1, 1, false);

                     //create a new user
                     MembershipUser newMembershipUser = Membership.CreateUser(p1, thePassword, p1);

                     //get the user's id
                     Guid TheUserID = (Guid)newMembershipUser.ProviderUserKey;

                     //user info
                     var newUser = (from u in entity.aspnet_Membership
                                    where u.UserId == TheUserID
                                    select u).FirstOrDefault();

                     if (newUser == null)
                     {
                         return Utils.WrapError("The registration unexpectedly failed");
                     }

                     //p1: users email address
                     //p2: users firstnames
                     //p3: users lastname
                     //p11: users contact number (can be null)
                     //p12: users country (can be null)
                     //p13: users physical address (can be null)
                     newUser.Firstnames = p2;
                     newUser.Lastname = p3;
                     newUser.Email = p1;
                     newUser.ContactNumber = p11;
                     newUser.Country = p12;
                     newUser.PhysicalAddress = p13;
                     newUser.IsLockedOut = false;
                     newUser.IsApproved = true;

                     entity.Entry(newUser).State = EntityState.Modified;

                     // NEW COMPANY 

                     //p6: company name
                     //p7: registration number
                     //p8: vat number (can be null)
                     //p9: logo (base64 string of the logo) (can be null)
                     //p10: package id
                     Guid CompanyID = Guid.NewGuid();
                     var newCompany = new Company();
                     newCompany.ID = CompanyID;
                     newCompany.CompanyName = p6;
                     newCompany.RegistrationNumber = p7;
                     newCompany.VatNumber = p8;
                     newCompany.PackageID = P10;
                     //set the new company to active
                     newCompany.IsActive = true;
                     newCompany.PhysicalAddress = p14;

                     //if there is a logo
                     if (p9 != null)
                     {

                         Image img = Helper.Base64ToImage(p9);
                         if (img == null)
                         {

                             return Utils.WrapError("Image is not in the correct format");
                         }

                         newCompany.Logo = Helper.Base64ToBytes(p9);
                     }

                     //add the new company
                     entity.Companies.Add(newCompany);


                     //NEW COMPANY USER 

                     //company user info
                     var newCompanyUser = new CompanyUser();
                     newCompanyUser.ID = Guid.NewGuid();
                     newCompanyUser.CompanyID = CompanyID;
                     newCompanyUser.UserID = TheUserID;
                     newCompanyUser.RoleID = theRole.RoleId;
                     entity.CompanyUsers.Add(newCompanyUser);

                     entity.SaveChanges();

                     //p1: users email address
                     //p6: company name
                     //string result = SendEmailAddCompanyUserPackage(p1, newCompany.CompanyName, curPackage.PackageName, p1, thePassword);
                     string result = SendEmail(EmailPurpose.AddCompanyUserPackage, p1, CompanyID + "", "", "", thePassword, "", theRole.RoleId + "", theRole.RoleName);
                     if (Utils.IsError(result))
                     {
                         return result;
                     }

                     dynamic returnItem = new JObject();
                     returnItem.Status = "OK";
                     return returnItem.ToString();
                 }
             }
             catch (DbEntityValidationException ex)
             {
                 string errors = Helper.GetCleanEntityValidationErrors(ex);
                 Helper.LogError(errors, ex.ToString());
                 return Utils.WrapError(errors);
             }
             catch (Exception ee)
             {
                 Helper.LogError(ee.Message, ee.StackTrace);
                 return Utils.WrapError(ee.Message);
             }
         }*/

        //View all companies and company owners details
        //p1: date submitted
        //p2: md5 hash
        /*public string ViewAllCompaniesAndOwners(string p1, string p2)
       {
           return Utils.WrapError("This method is no longer supported");
           
           try
           {
               //remove any extra whitespaces
               p1 = TrimIfNotNull(p1);
               p2 = TrimIfNotNull(p2);

               //validate that fahdiel is trying to call this method
               string tknCheck = p1 + secret;

               string ReceivedString = tknCheck;
               string MD5HashOfReceivedString = CalculateMD5Hash(ReceivedString);

               if (p2.ToLower() != MD5HashOfReceivedString.ToLower())
               {
                   return (Utils.WrapError("Cannot Authorise Request"));
               }

               if (string.IsNullOrWhiteSpace(p1))
               {
                   return Utils.WrapError("Please ensure that you enter a value for p1");
               }

               if (string.IsNullOrWhiteSpace(p2))
               {
                   return Utils.WrapError("Please ensure that you enter a value for p2");
               }

               using (Surveya_DevEntities entity = new Surveya_DevEntities())
               {
                   var companyUsers = (from c in entity.Companies
                                       join cu in entity.CompanyUsers
                                       on c.ID equals cu.CompanyID
                                       join m in entity.aspnet_Membership
                                       on cu.UserID equals m.UserId
                                       where cu.RoleID == CompanyOwnerRoleID
                                       select new
                                       {
                                           UserID = m.UserId,
                                           m.Firstnames,
                                           m.Lastname,
                                           m.Email,
                                           m.ContactNumber,
                                           CompanyID = c.ID,
                                           c.CompanyName,
                                           CompanyPhysicalAddress = c.PhysicalAddress != null ? c.PhysicalAddress : ""
                                       }).ToList();

                   dynamic returnItem = new JObject();

                   if (companyUsers == null || companyUsers.Count <= 0)
                   {

                       returnItem.Status = "NotOK";
                       returnItem.CompanyUsers = null;
                       return returnItem.ToString();
                   }

                   returnItem.Status = "OK";
                   returnItem.CompanyUsers = Helper.SerializeToJavascriptOject(companyUsers);
                   return returnItem.ToString();
               }
           }
           catch (DbEntityValidationException ex)
           {
               string errors = Helper.GetCleanEntityValidationErrors(ex);
               Helper.LogError(errors, ex.ToString());
               return Utils.WrapError(errors);
           }
           catch (Exception ee)
           {
               Helper.LogError(ee.Message, ee.StackTrace);
               return Utils.WrapError(ee.Message);
           }
       }*/

        //View a specific company and its owners details
        //p1: date submitted
        //p2: md5 hash
        //p3: company ID
        /*public string ViewSpecificCompanyAndOwner(string p1, string p2, string p3)
        {
            return Utils.WrapError("This method is no longer supported");
            
            try
            {
                //remove any extra whitespaces
                p1 = TrimIfNotNull(p1);
                p2 = TrimIfNotNull(p2);
                p3 = TrimIfNotNull(p3);

                //validate that fahdiel is trying to call this method
                string tknCheck = p1 + p3 + secret;

                string ReceivedString = tknCheck;
                string MD5HashOfReceivedString = CalculateMD5Hash(ReceivedString);

                if (p2.ToLower() != MD5HashOfReceivedString.ToLower())
                {
                    return (Utils.WrapError("Cannot Authorise Request"));
                }

                if (string.IsNullOrWhiteSpace(p1))
                {
                    return Utils.WrapError("Please ensure that you enter a value for p1");
                }

                if (string.IsNullOrWhiteSpace(p2))
                {
                    return Utils.WrapError("Please ensure that you enter a value for p2");
                }

                Guid P3;
                if (!Guid.TryParse(p3, out P3))
                {
                    return Utils.WrapError("P3 is not in the correct format");
                }

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    var companyUser = (
                        from x in
                            (
                                from c in entity.Companies
                                join cu in entity.CompanyUsers
                                on c.ID equals cu.CompanyID
                                join m in entity.aspnet_Membership
                                on cu.UserID equals m.UserId
                                where c.ID == P3
                                select new
                                {
                                    UserID = m.UserId,
                                    m.Firstnames,
                                    m.Lastname,
                                    m.Email,
                                    ContactNumber = m.ContactNumber != null ? m.ContactNumber : "",
                                    Country = m.Country != null ? m.Country : "",
                                    UserPhysicalAddress = m.PhysicalAddress != null ? m.PhysicalAddress : "",
                                    CompanyID = c.ID,
                                    c.CompanyName,
                                    RegistrationNumber = c.RegistrationNumber != null ? c.RegistrationNumber : "",
                                    VatNumber = c.VatNumber != null ? c.VatNumber : "",
                                    c.IsActive,
                                    Logo = c.Logo,
                                    PackageID = c.PackageID,
                                    CompanyPhysicalAddress = c.PhysicalAddress != null ? c.PhysicalAddress : ""
                                }).ToList()
                        select new
                        {
                            x.UserID,
                            x.Firstnames,
                            x.Lastname,
                            x.Email,
                            x.ContactNumber,
                            x.Country,
                            x.UserPhysicalAddress,
                            x.CompanyID,
                            x.CompanyName,
                            x.RegistrationNumber,
                            x.VatNumber,
                            x.IsActive,
                            Logo = x.Logo != null ? Helper.ImageBytesToBase64(x.Logo) : null,
                            x.CompanyPhysicalAddress,
                            x.PackageID
                        }
                    ).FirstOrDefault();

                    if (companyUser == null)
                    {
                        return Utils.WrapError("No company found");
                    }

                    dynamic returnItem = new JObject();
                    returnItem.Status = "OK";
                    returnItem.CompanyUsers = Helper.SerializeToJavascriptOject(companyUser);
                    return returnItem.ToString();
                }
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }*/

        //Update a company and users details
        //p1: users email address
        //p2: users firstnames
        //p3: users lastname
        //p4: date submitted
        //p5: md5 hash
        //p6: company name
        //p7: registration number (can be null)
        //p8: vat number (can be null)
        //p9: logo (base64 string of the logo) (can be null)
        //p10: package id
        //p11: users contact number (can be null)
        //p12: users country (can be null)
        //p13: users physical address (can be null)
        //p14: company ID
        //p15: if the company is active (true / false)
        //p16: users ID
        //p17: Company physical address (can be null)
        /*public string UpdateCompany(string p1, string p2, string p3, string p4, string p5, string p6, string p7, string p8, string p9, string p10,
            string p11, string p12, string p13, string p14, string p15, string p16, string p17)
        {
            return Utils.WrapError("This method is no longer supported");
            
            try
            {
                //remove any extra whitespaces
                p1 = TrimIfNotNull(p1);
                p2 = TrimIfNotNull(p2);
                p3 = TrimIfNotNull(p3);
                p4 = TrimIfNotNull(p4);
                p5 = TrimIfNotNull(p5);
                p6 = TrimIfNotNull(p6);
                p7 = TrimIfNotNull(p7);
                p8 = TrimIfNotNull(p8);
                p9 = TrimIfNotNull(p9);
                p10 = TrimIfNotNull(p10);
                p11 = TrimIfNotNull(p11);
                p12 = TrimIfNotNull(p12);
                p13 = TrimIfNotNull(p13);
                p14 = TrimIfNotNull(p14);
                p15 = TrimIfNotNull(p15);
                p16 = TrimIfNotNull(p16);
                p17 = TrimIfNotNull(p17);

                //validate that fahdiel is trying to call this method
                string tknCheck = p1 + p2 + p3 + p4 + p6 + p7 + p8 + p9 + p10 + p11 + p12 + p13 + p14 + p15 + p16 + p17 + secret;

                string ReceivedString = tknCheck;
                string MD5HashOfReceivedString = CalculateMD5Hash(ReceivedString);

                if (p5.ToLower() != MD5HashOfReceivedString.ToLower())
                {
                    return (Utils.WrapError("Cannot Authorise Request"));
                }

                if (string.IsNullOrWhiteSpace(p1))
                {
                    return Utils.WrapError("Please ensure that you enter a value for p1");
                }

                if (string.IsNullOrWhiteSpace(p2))
                {
                    return Utils.WrapError("Please ensure that you enter a value for p2");
                }

                if (string.IsNullOrWhiteSpace(p3))
                {
                    return Utils.WrapError("Please ensure that you enter a value for p3");
                }

                if (string.IsNullOrWhiteSpace(p4))
                {
                    return Utils.WrapError("Please ensure that you enter a value for p4");
                }

                if (string.IsNullOrWhiteSpace(p5))
                {
                    return Utils.WrapError("Please ensure that you enter a value for p5");
                }

                if (string.IsNullOrWhiteSpace(p6))
                {
                    return Utils.WrapError("Please ensure that you enter a value for p6");
                }

                if (string.IsNullOrWhiteSpace(p10))
                {
                    return Utils.WrapError("Please ensure that you enter a value for p10");
                }


                DateTime P4;
                if (!DateTime.TryParse(p4, out P4))
                {
                    return Utils.WrapError("P4 is not in the correct format");
                }

                Guid P14;
                if (!Guid.TryParse(p14, out P14))
                {
                    return Utils.WrapError("P14 is not in the correct format");
                }

                bool P15;
                if (!Boolean.TryParse(p15, out P15))
                {
                    return Utils.WrapError("P15 is not in the correct format");
                }

                Guid P16;
                if (!Guid.TryParse(p16, out P16))
                {
                    return Utils.WrapError("P16 is not in the correct format");
                }

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {

                    var userEmailExists = (from m in entity.aspnet_Membership
                                           where m.UserId != P16 && m.LoweredEmail == p1.ToLower()
                                           select m).FirstOrDefault();

                    if (userEmailExists != null)
                    {
                        return Utils.WrapError("Email address is already in use");
                    }

                    //get the current company
                    //p7: registration number
                    var curCompany = (from c in entity.Companies
                                      where c.ID == P14
                                      select c).FirstOrDefault();

                    // if there is no company found
                    if (curCompany == null)
                    {
                        return Utils.WrapError("Company not found");
                    }

                    // CHECK PACKAGE 
                    Guid P10;
                    if (!Guid.TryParse(p10, out P10))
                    {
                        return Utils.WrapError("P10 is not in the correct format");
                    }

                    var curPackage = (from p in entity.Packages
                                      where p.ID == P10
                                      select p).FirstOrDefault();

                    if (curPackage == null)
                    {
                        return Utils.WrapError("Package does not exist");
                    }

                    //user info
                    var curUser = (from u in entity.aspnet_Membership
                                   where u.UserId == P16
                                   select u).FirstOrDefault();

                    if (curUser == null)
                    {
                        return Utils.WrapError("User not found");
                    }

                    //p1: users email address
                    //p2: users firstnames
                    //p3: users lastname
                    //p11: users contact number (can be null)
                    //p12: users country (can be null)
                    //p13: users physical address (can be null)
                    curUser.Firstnames = p2;
                    curUser.Lastname = p3;
                    curUser.Email = p1;
                    curUser.ContactNumber = p11;
                    curUser.Country = p12;
                    curUser.PhysicalAddress = p13;

                    entity.Entry(curUser).State = EntityState.Modified;

                    //p6: company name
                    //p7: registration number
                    //p8: vat number (can be null)
                    //p9: logo (base64 string of the logo) (can be null)
                    //p10: package id
                    //p15: if the company is active (true / false)
                    curCompany.CompanyName = p6;
                    curCompany.RegistrationNumber = p7;
                    curCompany.VatNumber = p8;
                    curCompany.PackageID = P10;
                    curCompany.IsActive = P15;
                    curCompany.PhysicalAddress = p17;

                    //if there is a logo
                    if (p9 != null)
                    {
                        Image img = Helper.Base64ToImage(p9);
                        if (img == null)
                        {

                            return Utils.WrapError("Image is not in the correct format");
                        }

                        curCompany.Logo = Helper.Base64ToBytes(p9);
                    }

                    entity.Entry(curCompany).State = EntityState.Modified;


                    entity.SaveChanges();

                    //p1: users email address
                    //p6: company name
                    //string result = SendEmailUpdateCompanyUserPackage(p1, curCompany.CompanyName, curPackage.PackageName);
                    string result = SendEmail(EmailPurpose.UpdateCompanyUserPackage, p1, curCompany.ID + "", "", "", "", "", "", "");
                    if (Utils.IsError(result))
                    {
                        return result;
                    }

                    dynamic returnItem = new JObject();
                    returnItem.Status = "OK";
                    return returnItem.ToString();
                }
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }*/

        #endregion

        #region Coupons

        public string GenerateCoupon(string secretKey)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);

                var username = CheckUserHasRight(secretKey, "GetSpecificSurvey");
                if (Utils.IsError(username))
                {
                    return username;
                }

                Guid LoggedInUserID = (Guid)Membership.GetUser(username).ProviderUserKey;

                #region Check if the logged in user is assuming a company

                //check if the user is assuming a company
                var assumeResult = CheckAssumeCompany(secretKey);
                if (Utils.IsError(assumeResult))
                {
                    return assumeResult;
                }

                //parse the company ID to a Guid
                Guid CompanyID = Guid.Empty;
                if (!Guid.TryParse(assumeResult, out CompanyID))
                {
                    return Utils.WrapError("The ID of the Company that you are trying to view is in the incorrect format");
                }

                #endregion

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    List<string> coups = new List<string>();
                    Guid CodeID = Guid.Empty, CodeID1, CodeID2, CodeID3;
                    string Code = string.Empty, Code1, Code2, Code3;
                    do
                    {
                        CodeID1 = Guid.NewGuid();
                        Code1 = CodeID1.ToString().Substring(0, 6).ToUpper();

                        CodeID2 = Guid.NewGuid();
                        Code2 = CodeID2.ToString().Substring(0, 6).ToUpper();

                        CodeID3 = Guid.NewGuid();
                        Code3 = CodeID3.ToString().Substring(0, 6).ToUpper();

                        coups = (from cp in entity.Coupons
                                 where cp.CompanyID == CompanyID && (cp.Code == Code1 || cp.Code == Code2 || cp.Code == Code3)
                                 select cp.Code).ToList();

                    } while (coups.Count == 3);

                    if (!coups.Contains(Code1))
                    {
                        CodeID = CodeID1;
                        Code = Code1;
                    }
                    else if (!coups.Contains(Code2))
                    {
                        CodeID = CodeID2;
                        Code = Code2;
                    }
                    else if (!coups.Contains(Code3))
                    {
                        CodeID = CodeID3;
                        Code = Code3;
                    }

                    var curCoupon = new Coupon
                    {
                        ID = CodeID,
                        CompanyID = CompanyID,
                        Code = Code,
                        isRedeemed = false,
                        CreatedBy = LoggedInUserID,
                        DateCreated = DateTime.Now
                    };

                    entity.Entry(curCoupon).State = EntityState.Added;
                    entity.SaveChanges();

                    dynamic returnItem = new JObject();
                    returnItem.Status = "Success";
                    returnItem.Coupon = Helper.SerializeToJavascriptOject(curCoupon);
                    return returnItem.ToString();
                }

            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        public string GetAllCoupons(string secretKey)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);

                var username = CheckUserHasRight(secretKey, "GetSpecificSurvey");
                if (Utils.IsError(username))
                {
                    return username;
                }

                Guid LoggedInUserID = (Guid)Membership.GetUser(username).ProviderUserKey;

                #region Check if the logged in user is assuming a company

                //check if the user is assuming a company
                var assumeResult = CheckAssumeCompany(secretKey);
                if (Utils.IsError(assumeResult))
                {
                    return assumeResult;
                }

                //parse the company ID to a Guid
                Guid CompanyID = Guid.Empty;
                if (!Guid.TryParse(assumeResult, out CompanyID))
                {
                    return Utils.WrapError("The ID of the Company that you are trying to view is in the incorrect format");
                }

                #endregion

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    var coupons = (from cp in entity.Coupons
                                   where cp.CompanyID == CompanyID
                                   select cp.Code).ToList();

                    dynamic returnItem = new JObject();
                    returnItem.Status = "Success";
                    returnItem.Coupons = Helper.SerializeToJavascriptOject(coupons);
                    return returnItem.ToString();
                }

            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        public string GetUserCoupons(string secretKey, string top)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);

                var username = CheckUserHasRight(secretKey, "GetSpecificSurvey");
                if (Utils.IsError(username))
                {
                    return username;
                }
                int limit = 10;
                if (!string.IsNullOrWhiteSpace(top))
                {
                    int.TryParse(top, out limit);
                }

                Guid LoggedInUserID = (Guid)Membership.GetUser(username).ProviderUserKey;

                #region Check if the logged in user is assuming a company

                //check if the user is assuming a company
                var assumeResult = CheckAssumeCompany(secretKey);
                if (Utils.IsError(assumeResult))
                {
                    return assumeResult;
                }

                //parse the company ID to a Guid
                Guid CompanyID = Guid.Empty;
                if (!Guid.TryParse(assumeResult, out CompanyID))
                {
                    return Utils.WrapError("The ID of the Company that you are trying to view is in the incorrect format");
                }

                #endregion

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    var coupons = (from cp in entity.Coupons
                                   where cp.CompanyID == CompanyID && cp.CreatedBy == LoggedInUserID
                                   orderby cp.DateCreated descending
                                   select new
                                   {
                                       cp.Code,
                                       cp.DateCreated
                                   }).Take(limit).ToList();

                    dynamic returnItem = new JObject();
                    returnItem.Status = "Success";
                    returnItem.Coupons = Helper.SerializeToJavascriptOject(coupons);
                    return returnItem.ToString();
                }

            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        public string GetCouponCount(string secretKey)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);

                var username = CheckUserHasRight(secretKey, "GetSpecificSurvey");
                if (Utils.IsError(username))
                {
                    return username;
                }

                Guid LoggedInUserID = (Guid)Membership.GetUser(username).ProviderUserKey;

                #region Check if the logged in user is assuming a company

                //check if the user is assuming a company
                var assumeResult = CheckAssumeCompany(secretKey);
                if (Utils.IsError(assumeResult))
                {
                    return assumeResult;
                }

                //parse the company ID to a Guid
                Guid CompanyID = Guid.Empty;
                if (!Guid.TryParse(assumeResult, out CompanyID))
                {
                    return Utils.WrapError("The ID of the Company that you are trying to view is in the incorrect format");
                }

                #endregion

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    var coupons = (from cp in entity.Coupons
                                   where cp.CompanyID == CompanyID
                                   select cp).ToList();

                    int allCount = coupons.Count();
                    int userCount = coupons.Count(cp => cp.CreatedBy == LoggedInUserID);

                    dynamic returnItem = new JObject();
                    returnItem.Status = "Success";
                    returnItem.TotalCoupons = allCount;
                    returnItem.MyCoupons = userCount;
                    return returnItem.ToString();
                }

            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        #endregion

        #region CRM for World Bank

        //TO-DO
        //get a list of traders for the enumerator
        public string GetTradersForEnumerator(string secretKey, string includeComplete, string getAll, string statusList)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                includeComplete = TrimIfNotNull(includeComplete);
                getAll = TrimIfNotNull(getAll);

                bool IncludeComplete = false;
                if (includeComplete != null && includeComplete.Equals("true"))
                {
                    IncludeComplete = true;
                }

                var username = CheckUserHasRight(secretKey, "GetTradersForEnumerator");
                if (Utils.IsError(username))
                {
                    return username;
                }

                //get the ID for the logged in user
                string loggedInUserID = GetUserID(secretKey);
                if (Utils.IsError(loggedInUserID))
                {
                    return loggedInUserID;
                }
                Guid LoggedInUserID;
                if (!Guid.TryParse(loggedInUserID, out LoggedInUserID))
                {
                    return Utils.WrapError("User ID is not in the correct format");
                }

                List<String> StatusList = new List<String>();
                if (!string.IsNullOrWhiteSpace(statusList) && statusList != "[]")
                {
                   JArray statuses = JArray.Parse(statusList);
                    foreach (string s in statuses)
                    {
                        StatusList.Add(s);
                    }
                }
                #region Check if the logged in user is assuming a company

                //check if the user is assuming a company
                var assumeResult = CheckAssumeCompany(secretKey);
                if (Utils.IsError(assumeResult))
                {
                    return assumeResult;
                }

                //parse the company ID to a Guid
                Guid CompanyID = Guid.Empty;
                if (!Guid.TryParse(assumeResult, out CompanyID))
                {
                    return Utils.WrapError("The ID of the Company that you are trying to view is in the incorrect format");
                }

                #endregion

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    //var traders = entity.CRMTraders.ToList();
                    /*
                    * if there is no value or the value is false, then do not display the inactive projects
                    */
                    if (getAll == null || getAll.Equals("false"))
                    {
                        //read the trader info
                        var traders = (from t in entity.CRMTraders
                                       join u in entity.aspnet_Membership
                                       on t.AssignedTo equals u.UserId
                                       where t.AssignedTo == LoggedInUserID
                                       orderby t.DateCreated
                                       select new
                                       {
                                           t.ID,
                                           t.isScheduled,
                                           t.ScheduledDate,
                                           t.isSurveyed,
                                           t.SurveyedDate,
                                           t.isComplete,
                                           t.CompletedDate,
                                           t.CompanyType,
                                           t.OwnedManagedBy,
                                           t.BusinessLocation,
                                           t.SizeOfBusiness,
                                           t.ProductCategory,
                                           t.ParticipateFullName,
                                           t.TraderName,
                                           t.ParticipateEmailAddress,
                                           t.ParticipatePhoneNumber,
                                           t.ResponseID,
                                           AssignedToID = t.AssignedTo,
                                           AssignedTo = (u.Firstnames != null ? u.Firstnames : "") + " " + (u.Lastname != null ? u.Lastname : ""),
                                           t.Status,
                                           t.NumberRescheduled
                                       }).ToList();

                        if (traders == null || traders.Count <= 0)
                        {
                            return "[]";
                        }
                        //filter statuses
                        if (StatusList.Count() > 0)
                        {
                            traders = traders.Where(t => StatusList.Contains(t.Status)).ToList();
                        }
                        if (!IncludeComplete)
                        {
                            traders = (from t in traders
                                       where t.isComplete != true
                                       select t
                                       ).ToList();
                        }
                        return Helper.SerializeToJavascriptOject(traders);
                    }
                    else
                    {
                        //read the trader info
                        var traders = (from t in entity.CRMTraders
                                       join u in entity.aspnet_Membership
                                       on t.AssignedTo equals u.UserId into gj
                                       from sub in gj.DefaultIfEmpty()

                                       orderby t.DateCreated
                                       select new
                                       {
                                           t.ID,
                                           t.isScheduled,
                                           t.ScheduledDate,
                                           t.isSurveyed,
                                           t.SurveyedDate,
                                           t.isComplete,
                                           t.CompletedDate,
                                           t.CompanyType,
                                           t.OwnedManagedBy,
                                           t.BusinessLocation,
                                           t.SizeOfBusiness,
                                           t.ProductCategory,
                                           t.ParticipateFullName,
                                           t.TraderName,
                                           t.ParticipateEmailAddress,
                                           t.ParticipatePhoneNumber,
                                           t.ResponseID,
                                           t.Status,
                                           AssignedToID = t.AssignedTo,
                                           AssignedTo = (sub.Firstnames != null ? sub.Firstnames : "") + " " + (sub.Lastname != null ? sub.Lastname : ""),
                                           t.NumberRescheduled
                                       }).ToList();

                        if (traders == null || traders.Count <= 0)
                        {
                            return "[]";
                        }

                        //filter statuses
                        if (StatusList.Count() > 0)
                        {
                            traders = traders.Where(t => StatusList.Contains(t.Status)).ToList();
                        }
                        if (!IncludeComplete)
                        {
                            traders = (from t in traders
                                       where t.isComplete != true
                                       select t
                                       ).ToList();
                        }

                        return Helper.SerializeToJavascriptOject(traders);
                    }

                }
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        public string GetTraderTotals(string secretKey)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);

                var username = CheckUserHasRight(secretKey, "GetTradersForEnumerator");
                if (Utils.IsError(username))
                {
                    return username;
                }

                //get the ID for the logged in user
                string loggedInUserID = GetUserID(secretKey);
                if (Utils.IsError(loggedInUserID))
                {
                    return loggedInUserID;
                }
                Guid LoggedInUserID;
                if (!Guid.TryParse(loggedInUserID, out LoggedInUserID))
                {
                    return Utils.WrapError("User ID is not in the correct format");
                }

                #region Check if the logged in user is assuming a company

                //check if the user is assuming a company
                var assumeResult = CheckAssumeCompany(secretKey);
                if (Utils.IsError(assumeResult))
                {
                    return assumeResult;
                }

                //parse the company ID to a Guid
                Guid CompanyID = Guid.Empty;
                if (!Guid.TryParse(assumeResult, out CompanyID))
                {
                    return Utils.WrapError("The ID of the Company that you are trying to view is in the incorrect format");
                }

                #endregion

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    var traders = entity.CRMTraders.ToList();

                    int unscheduled = traders.Where(t => t.Status == "New").Count();
                    int scheduled = traders.Where(t => t.Status == "Scheduled").Count();
                    int surveyed = traders.Where(t => t.Status == "Started").Count();
                    int complete = traders.Where(t => t.Status == "Complete").Count();


                    dynamic returnItem = new JObject();
                    returnItem.Status = "Success";
                    returnItem.Unscheduled = unscheduled;
                    returnItem.Scheduled = scheduled;
                    returnItem.Surveyed = surveyed;
                    returnItem.Complete = complete;
                    return returnItem.ToString();

                }
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        public string ReassignTraderToUser(string secretKey, string traderId, string userId)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                traderId = TrimIfNotNull(traderId);
                userId = TrimIfNotNull(userId);

                Guid TraderId;
                if (!Guid.TryParse(traderId, out TraderId))
                {
                    return Utils.WrapError("Trader ID is not in the correct format");
                }

                Guid UserId;
                if (!Guid.TryParse(userId, out UserId))
                {
                    return Utils.WrapError("User ID is not in the correct format");
                }

                DateTime now = DateTime.Now;

                var username = CheckUserHasRight(secretKey, "TraderAssignEnumerator");
                if (Utils.IsError(username))
                {
                    return username;
                }

                //get the ID for the logged in user
                string loggedInUserID = GetUserID(secretKey);
                if (Utils.IsError(loggedInUserID))
                {
                    return loggedInUserID;
                }
                Guid LoggedInUserID;
                if (!Guid.TryParse(loggedInUserID, out LoggedInUserID))
                {
                    return Utils.WrapError("User ID is not in the correct format");
                }

                #region Check if the logged in user is assuming a company

                //check if the user is assuming a company
                var assumeResult = CheckAssumeCompany(secretKey);
                if (Utils.IsError(assumeResult))
                {
                    return assumeResult;
                }

                //parse the company ID to a Guid
                Guid CompanyID = Guid.Empty;
                if (!Guid.TryParse(assumeResult, out CompanyID))
                {
                    return Utils.WrapError("The ID of the Company that you are trying to view is in the incorrect format");
                }

                #endregion

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {

                    var toUser = entity.aspnet_Membership.FirstOrDefault(u => u.UserId == UserId);
                    if (toUser == null)
                    {
                        return Utils.WrapError("No User found for the provided ID");
                    }

                    var trader = entity.CRMTraders.FirstOrDefault(t => t.ID == TraderId);
                    if (trader == null)
                    {
                        return Utils.WrapError("No Trader found for provided ID");
                    }

                    string assigned = "Assigned";
                    if (trader.AssignedTo.HasValue)
                    {
                        assigned = "Reassigned";
                    }
                    trader.AssignedTo = UserId;
                    trader.Status = "Assigned";

                    entity.Entry(trader).State = EntityState.Modified;

                    var completeHistory = CreateTraderHistory(trader.ID, assigned, username + " " + assigned.ToLower() + " trader survey for " + trader.TraderName + " to " + toUser.Firstnames + " " + toUser.Lastname, LoggedInUserID);
                    entity.Entry(completeHistory).State = EntityState.Added;


                    string enumeratorName = toUser.Firstnames + " " + toUser.Lastname;
                    string enumeratorID = toUser.UserId.ToString();
                    string scheduleLink = "";

                    switch (UserId.ToString().ToUpper())
                    {
                        case "50359FAC-E438-4DBE-9E52-7D8E0CFBF8DE":
                            scheduleLink = "https://calendly.com/e10-1";
                            break;
                        case "2DB6FDC7-63A1-4F9F-83BE-4D452F0AC263":
                            scheduleLink = "https://calendly.com/e2surveya";
                            break;
                        case "47F261F4-BA09-40F2-8092-FFB521E10777":
                            scheduleLink = "https://calendly.com/e4-";
                            break;
                        case "91EA3B29-BA34-4CBF-908E-40820A736790":
                            scheduleLink = "https://calendly.com/e6-";
                            break;
                        case "976BA6A2-5723-4EB4-AE6B-1C7B1D0961B5":
                            scheduleLink = "https://calendly.com/e9-";
                            break;
                    };

                    SendCRMEmail("InterviewAssigned", trader.ParticipateEmailAddress, enumeratorName, enumeratorID, scheduleLink);

                    entity.SaveChanges();


                    dynamic returnItem = new JObject();
                    returnItem.Status = "Success";
                    return returnItem.ToString();
                }
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        public string ScheduleTraderCall(string secretKey, string traderId, string scheduleDate)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                traderId = TrimIfNotNull(traderId);
                scheduleDate = TrimIfNotNull(scheduleDate);

                Guid TraderId;
                if (!Guid.TryParse(traderId, out TraderId))
                {
                    return Utils.WrapError("Trader ID is not in the correct format");
                }

                DateTime ScheduleDate;
                DateTime now = DateTime.Now;
                if (!DateTime.TryParse(scheduleDate, CultureInfo.InvariantCulture, DateTimeStyles.None, out ScheduleDate))
                {
                    return Utils.WrapError("Schedule Date is not in the correct format");
                }


                if (ScheduleDate < now)
                {
                    return Utils.WrapError("Schedule Date cannot be in the past");
                }

                var username = CheckUserHasRight(secretKey, "TraderActionForEnumerator");
                if (Utils.IsError(username))
                {
                    return username;
                }

                //get the ID for the logged in user
                string loggedInUserID = GetUserID(secretKey);
                if (Utils.IsError(loggedInUserID))
                {
                    return loggedInUserID;
                }
                Guid LoggedInUserID;
                if (!Guid.TryParse(loggedInUserID, out LoggedInUserID))
                {
                    return Utils.WrapError("User ID is not in the correct format");
                }

                #region Check if the logged in user is assuming a company

                //check if the user is assuming a company
                var assumeResult = CheckAssumeCompany(secretKey);
                if (Utils.IsError(assumeResult))
                {
                    return assumeResult;
                }

                //parse the company ID to a Guid
                Guid CompanyID = Guid.Empty;
                if (!Guid.TryParse(assumeResult, out CompanyID))
                {
                    return Utils.WrapError("The ID of the Company that you are trying to view is in the incorrect format");
                }

                #endregion

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    var trader = entity.CRMTraders.FirstOrDefault(t => t.ID == TraderId);
                    if (trader == null)
                    {
                        return Utils.WrapError("No Trader found for provided ID");
                    }

                    if (trader.isScheduled.HasValue && trader.isScheduled.Value)
                    {
                        trader.ReScheduledBy = LoggedInUserID;
                        trader.ReScheduledDate = now;
                        trader.isReScheduled = true;
                        trader.NumberRescheduled = trader.NumberRescheduled == null ? 1 : trader.NumberRescheduled + 1;

                        if (trader.NumberRescheduled >= 3)
                        {
                            trader.Status = "Unreachable";
                        }
                    }
                    else
                    {
                        trader.ScheduledBy = LoggedInUserID;
                        trader.isScheduled = true;
                        trader.Status = "Scheduled";
                    }
                    
                    trader.ScheduledDate = ScheduleDate;
                    entity.Entry(trader).State = EntityState.Modified;

                    entity.SaveChanges();

                    var completeHistory = CreateTraderHistory(trader.ID, "Scheduled", username + " scheduled trader survey for " + trader.TraderName, LoggedInUserID);
                    entity.Entry(completeHistory).State = EntityState.Added;

                    dynamic returnItem = new JObject();
                    returnItem.Status = "Success";
                    return returnItem.ToString();
                }
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        public string StartTraderCall(string secretKey, string traderId)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                traderId = TrimIfNotNull(traderId);

                Guid TraderId;
                if (!Guid.TryParse(traderId, out TraderId))
                {
                    return Utils.WrapError("Trader ID is not in the correct format");
                }

                DateTime now = DateTime.Now;

                var username = CheckUserHasRight(secretKey, "TraderActionForEnumerator");
                if (Utils.IsError(username))
                {
                    return username;
                }

                //get the ID for the logged in user
                string loggedInUserID = GetUserID(secretKey);
                if (Utils.IsError(loggedInUserID))
                {
                    return loggedInUserID;
                }
                Guid LoggedInUserID;
                if (!Guid.TryParse(loggedInUserID, out LoggedInUserID))
                {
                    return Utils.WrapError("User ID is not in the correct format");
                }

                #region Check if the logged in user is assuming a company

                //check if the user is assuming a company
                var assumeResult = CheckAssumeCompany(secretKey);
                if (Utils.IsError(assumeResult))
                {
                    return assumeResult;
                }

                //parse the company ID to a Guid
                Guid CompanyID = Guid.Empty;
                if (!Guid.TryParse(assumeResult, out CompanyID))
                {
                    return Utils.WrapError("The ID of the Company that you are trying to view is in the incorrect format");
                }

                #endregion

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    var trader = entity.CRMTraders.FirstOrDefault(t => t.ID == TraderId);
                    if (trader == null)
                    {
                        return Utils.WrapError("No Trader found for provided ID");
                    }

                    if (!trader.isScheduled.HasValue || trader.isScheduled.Value == false)
                    {
                        // impromptu
                        trader.isScheduled = true;
                        trader.ScheduledBy = LoggedInUserID;
                        trader.ScheduledDate = now;
                        trader.Status = "Scheduled";
                    }

                    if (trader.isSurveyed.HasValue && trader.isSurveyed.Value)
                    {
                        // surveying again
                    }
                    trader.Status = "Started";
                    trader.isSurveyed = true;
                    trader.SurveyedBy = LoggedInUserID;
                    trader.SurveyedDate = now;

                    entity.Entry(trader).State = EntityState.Modified;

                    var completeHistory = CreateTraderHistory(trader.ID, "Started", username + " started trader survey for " + trader.TraderName, LoggedInUserID);
                    entity.Entry(completeHistory).State = EntityState.Added;

                    entity.SaveChanges();


                    dynamic returnItem = new JObject();
                    returnItem.Status = "Success";
                    return returnItem.ToString();
                }
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        public string RefuseTraderCall(string secretKey, string traderId)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                traderId = TrimIfNotNull(traderId);

                Guid TraderId;
                if (!Guid.TryParse(traderId, out TraderId))
                {
                    return Utils.WrapError("Trader ID is not in the correct format");
                }

                DateTime now = DateTime.Now;

                var username = CheckUserHasRight(secretKey, "TraderActionForEnumerator");
                if (Utils.IsError(username))
                {
                    return username;
                }

                //get the ID for the logged in user
                string loggedInUserID = GetUserID(secretKey);
                if (Utils.IsError(loggedInUserID))
                {
                    return loggedInUserID;
                }
                Guid LoggedInUserID;
                if (!Guid.TryParse(loggedInUserID, out LoggedInUserID))
                {
                    return Utils.WrapError("User ID is not in the correct format");
                }

                #region Check if the logged in user is assuming a company

                //check if the user is assuming a company
                var assumeResult = CheckAssumeCompany(secretKey);
                if (Utils.IsError(assumeResult))
                {
                    return assumeResult;
                }

                //parse the company ID to a Guid
                Guid CompanyID = Guid.Empty;
                if (!Guid.TryParse(assumeResult, out CompanyID))
                {
                    return Utils.WrapError("The ID of the Company that you are trying to view is in the incorrect format");
                }

                #endregion

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    var trader = entity.CRMTraders.FirstOrDefault(t => t.ID == TraderId);
                    if (trader == null)
                    {
                        return Utils.WrapError("No Trader found for provided ID");
                    }

                    trader.Status = "Refused";

                    entity.Entry(trader).State = EntityState.Modified;

                    var completeHistory = CreateTraderHistory(trader.ID, "Refused", username + " refused trader survey for " + trader.TraderName, LoggedInUserID);
                    entity.Entry(completeHistory).State = EntityState.Added;

                    entity.SaveChanges();


                    dynamic returnItem = new JObject();
                    returnItem.Status = "Success";
                    return returnItem.ToString();
                }
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        public string CompleteTraderCall(string secretKey, string traderId)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                traderId = TrimIfNotNull(traderId);

                Guid TraderId;
                if (!Guid.TryParse(traderId, out TraderId))
                {
                    return Utils.WrapError("Trader ID is not in the correct format");
                }

                DateTime now = DateTime.Now;

                var username = CheckUserHasRight(secretKey, "TraderActionForEnumerator");
                if (Utils.IsError(username))
                {
                    return username;
                }

                //get the ID for the logged in user
                string loggedInUserID = GetUserID(secretKey);
                if (Utils.IsError(loggedInUserID))
                {
                    return loggedInUserID;
                }
                Guid LoggedInUserID;
                if (!Guid.TryParse(loggedInUserID, out LoggedInUserID))
                {
                    return Utils.WrapError("User ID is not in the correct format");
                }

                #region Check if the logged in user is assuming a company

                //check if the user is assuming a company
                var assumeResult = CheckAssumeCompany(secretKey);
                if (Utils.IsError(assumeResult))
                {
                    return assumeResult;
                }

                //parse the company ID to a Guid
                Guid CompanyID = Guid.Empty;
                if (!Guid.TryParse(assumeResult, out CompanyID))
                {
                    return Utils.WrapError("The ID of the Company that you are trying to view is in the incorrect format");
                }

                #endregion

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    var trader = entity.CRMTraders.FirstOrDefault(t => t.ID == TraderId);
                    if (trader == null)
                    {
                        return Utils.WrapError("No Trader found for provided ID");
                    }

                    trader.isComplete = true;
                    trader.CompletedBy = LoggedInUserID;
                    trader.CompletedDate = now;
                    trader.Status = "Complete";

                    entity.Entry(trader).State = EntityState.Modified;

                    var completeHistory = CreateTraderHistory(trader.ID, "Complete", username + " completed trader survey for " + trader.TraderName, LoggedInUserID);
                    entity.Entry(completeHistory).State = EntityState.Added;

                    SendCRMEmail("InterviewComplete", trader.ParticipateEmailAddress, "", "", "");

                    entity.SaveChanges();


                    dynamic returnItem = new JObject();
                    returnItem.Status = "Success";
                    return returnItem.ToString();
                }
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        private CRMTraderHistory CreateTraderHistory(Guid TraderID, string Type, string Description, Guid UserID)
        {
            CRMTraderHistory thisCRMTraderHist = new CRMTraderHistory
            {
                ID = Guid.NewGuid(),
                TraderID = TraderID,
                Type = Type,
                Description = Description,
                DateCreated = DateTime.Now,
                CreatedBy = UserID
            };

            return thisCRMTraderHist;
        }

        public string AddNoteForTraderCall(string secretKey, string traderId, string text)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                traderId = TrimIfNotNull(traderId);
                text = TrimIfNotNull(text);

                Guid TraderId;
                if (!Guid.TryParse(traderId, out TraderId))
                {
                    return Utils.WrapError("Trader ID is not in the correct format");
                }

                DateTime now = DateTime.Now;
                if (string.IsNullOrWhiteSpace(text))
                {
                    return Utils.WrapError("Text is required for adding a note");
                }


                var username = CheckUserHasRight(secretKey, "TraderActionForEnumerator");
                if (Utils.IsError(username))
                {
                    return username;
                }

                //get the ID for the logged in user
                string loggedInUserID = GetUserID(secretKey);
                if (Utils.IsError(loggedInUserID))
                {
                    return loggedInUserID;
                }
                Guid LoggedInUserID;
                if (!Guid.TryParse(loggedInUserID, out LoggedInUserID))
                {
                    return Utils.WrapError("User ID is not in the correct format");
                }

                #region Check if the logged in user is assuming a company

                //check if the user is assuming a company
                var assumeResult = CheckAssumeCompany(secretKey);
                if (Utils.IsError(assumeResult))
                {
                    return assumeResult;
                }

                //parse the company ID to a Guid
                Guid CompanyID = Guid.Empty;
                if (!Guid.TryParse(assumeResult, out CompanyID))
                {
                    return Utils.WrapError("The ID of the Company that you are trying to view is in the incorrect format");
                }

                #endregion

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    var trader = entity.CRMTraders.FirstOrDefault(t => t.ID == TraderId);
                    if (trader == null)
                    {
                        return Utils.WrapError("No Trader found for provided ID");
                    }

                    var noteHistory = CreateTraderHistory(trader.ID, "Noted", username + " added the following note to trader survey for " + trader.TraderName + " " + text, LoggedInUserID);
                    entity.Entry(noteHistory).State = EntityState.Added;

                    entity.SaveChanges();


                    dynamic returnItem = new JObject();
                    returnItem.Status = "Success";
                    return returnItem.ToString();
                }
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        public string GetHistoryForTraderCall(string secretKey, string traderId)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                traderId = TrimIfNotNull(traderId);

                Guid TraderId;
                if (!Guid.TryParse(traderId, out TraderId))
                {
                    return Utils.WrapError("Trader ID is not in the correct format");
                }

                var username = CheckUserHasRight(secretKey, "GetTradersForEnumerator");
                if (Utils.IsError(username))
                {
                    return username;
                }

                //get the ID for the logged in user
                string loggedInUserID = GetUserID(secretKey);
                if (Utils.IsError(loggedInUserID))
                {
                    return loggedInUserID;
                }
                Guid LoggedInUserID;
                if (!Guid.TryParse(loggedInUserID, out LoggedInUserID))
                {
                    return Utils.WrapError("User ID is not in the correct format");
                }

                #region Check if the logged in user is assuming a company

                //check if the user is assuming a company
                var assumeResult = CheckAssumeCompany(secretKey);
                if (Utils.IsError(assumeResult))
                {
                    return assumeResult;
                }

                //parse the company ID to a Guid
                Guid CompanyID = Guid.Empty;
                if (!Guid.TryParse(assumeResult, out CompanyID))
                {
                    return Utils.WrapError("The ID of the Company that you are trying to view is in the incorrect format");
                }

                #endregion

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    var trader = entity.CRMTraders.FirstOrDefault(t => t.ID == TraderId);
                    if (trader == null)
                    {
                        return Utils.WrapError("No Trader found for provided ID");
                    }

                    var traderHistory = entity.CRMTraderHistories
                        .Where(n => n.TraderID == TraderId)
                        .OrderBy(n => n.DateCreated)
                        .ToList();

                    entity.SaveChanges();


                    dynamic returnItem = new JObject();
                    returnItem.Status = "Success";
                    returnItem.TraderHistory = Helper.SerializeToJavascriptOject(traderHistory);
                    return returnItem.ToString();
                }
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }


        //all the users for a specific company
        public string GetEnumeratorsForCompany(string secretKey, string getAll)
        {
            try
            {
                //3baefb8c-f868-4bd5-844c-8b8b2a2cee66
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                getAll = TrimIfNotNull(getAll);

                #region Check if the logged in user is assuming a company

                //check if the user is assuming a company
                var assumeResult = CheckAssumeCompany(secretKey);
                if (Utils.IsError(assumeResult))
                {
                    return assumeResult;
                }

                //parse the company ID to a Guid
                Guid CompanyID = Guid.Empty;
                if (!Guid.TryParse("3baefb8c-f868-4bd5-844c-8b8b2a2cee66", out CompanyID))
                {
                    return Utils.WrapError("The ID of the Company that you are trying to view is in the incorrect format");
                }

                #endregion

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    //get roles
                    //string [] roles = Roles.GetRolesForUser(username);
                    //use the roleid to get the rights


                    //if false or null then get only the active users
                    if (getAll != null && getAll.ToLower().Equals("false"))
                    {

                        var users = (from u in entity.aspnet_Membership
                                     join c in entity.CompanyUsers
                                     on u.UserId equals c.UserID
                                     join r in entity.Roles
                                     on c.RoleID equals r.RoleId
                                     where c.CompanyID == CompanyID && u.IsActive == true
                                     select new
                                     {
                                         u.UserId,
                                         Firstnames = u.Firstnames != null ? u.Firstnames : "",
                                         Lastname = u.Lastname != null ? u.Lastname : "",
                                         u.Email,
                                         ContactNumber = u.ContactNumber != null ? u.ContactNumber : "",
                                         Country = u.Country != null ? u.Country : "",
                                         c.CompanyID,
                                         c.RoleID,
                                         r.RoleName,
                                         IsActive = u.IsActive

                                     }).ToList();


                        if (users == null || users.Count <= 0)
                        {
                            return "[]";
                        }

                        return Helper.SerializeToJavascriptOject(users);
                    }
                    //if true then get all the users
                    else
                    {


                        var users = (from u in entity.aspnet_Membership
                                     join c in entity.CompanyUsers
                                     on u.UserId equals c.UserID
                                     join r in entity.Roles
                                     on c.RoleID equals r.RoleId
                                     where c.CompanyID == CompanyID
                                     select new
                                     {
                                         u.UserId,
                                         Firstnames = u.Firstnames != null ? u.Firstnames : "",
                                         Lastname = u.Lastname != null ? u.Lastname : "",
                                         u.Email,
                                         ContactNumber = u.ContactNumber != null ? u.ContactNumber : "",
                                         Country = u.Country != null ? u.Country : "",
                                         c.CompanyID,
                                         c.RoleID,
                                         r.RoleName,
                                         IsActive = u.IsActive

                                     }).ToList();


                        if (users == null || users.Count <= 0)
                        {
                            return "[]";
                        }

                        return Helper.SerializeToJavascriptOject(users);
                    }
                }
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }


        private string SendCRMEmail(string mailType, string sendTo, string enumeratorName, string enumeratorID, string scheduledLink)
        {
            try
            {

                string overrideAddress = (ConfigurationManager.AppSettings["OverrideEmailAddress"] == null ? "" : ConfigurationManager.AppSettings["OverrideEmailAddress"]);
                if (!string.IsNullOrWhiteSpace(overrideAddress))
                {
                    sendTo = overrideAddress;
                }
                enumeratorName = (enumeratorName == null ? "Surveya Agent" : enumeratorName);
                //setup details based on which email is being sent
                string baseEmail = Helper.RetrieveMailTemplate("SurveyaCRMEmailTemplate.html");

                string surveyaLogo = ConfigurationManager.AppSettings["defaultLogoPath"] == null ? "" : ConfigurationManager.AppSettings["defaultLogoPath"].ToString();
                string wbgLogo = ConfigurationManager.AppSettings["worldBankLogoPath"] == null ? "" : ConfigurationManager.AppSettings["worldBankLogoPath"].ToString();

                string contentEmail = "";
                string hText = "";
                if (mailType == "InterviewAssigned")
                {
                    contentEmail = Helper.RetrieveMailTemplate("CRMEnumeratorAssigned.html");
                    hText = "Assigned Surveya Agent";
                    baseEmail = baseEmail.Replace("[Content]", contentEmail);
                    baseEmail = baseEmail.Replace("[EnumeratorName]", enumeratorName);
                    baseEmail = baseEmail.Replace("[ScheduleLink]", scheduledLink);

                    string enumeratorImgPath = ConfigurationManager.AppSettings["enumeratorImagePath"] == null ? "" : ConfigurationManager.AppSettings["enumeratorImagePath"].ToString();
                    if(!string.IsNullOrWhiteSpace(enumeratorImgPath) && !string.IsNullOrWhiteSpace(enumeratorID))
                    {
                        string enumeratorImg = enumeratorImgPath + enumeratorID.ToUpper() + ".jpg";
                        baseEmail = baseEmail.Replace("[EnumeratorImage]", "<img src=" + enumeratorImg + " title='"+ enumeratorName + "' style='display: inline-block; vertical-align: middle;' height='150px' /><br />");
                    }
                    else
                    {
                        baseEmail = baseEmail.Replace("[EnumeratorImage]", "");
                    }
                }
                else if(mailType == "InterviewComplete")
                {
                    contentEmail = Helper.RetrieveMailTemplate("CRMResponseSubmited.html");
                    baseEmail = baseEmail.Replace("[Content]", contentEmail);
                    hText = "Thank You";
                }
                baseEmail = baseEmail.Replace("[HeaderText]", hText);

                //check if there is a logo to display
                if (surveyaLogo != null && !string.IsNullOrWhiteSpace(surveyaLogo))
                {
                    baseEmail = baseEmail.Replace("[SurveyaLogo]", "<img src=" + surveyaLogo + " title='Surveya' style='display: inline-block; vertical-align: middle;' height='60px' /><br />");
                }
                else
                {
                    baseEmail = baseEmail.Replace("[SurveyaLogo]", "");
                }

                if (wbgLogo != null && !string.IsNullOrWhiteSpace(wbgLogo))
                {
                    baseEmail = baseEmail.Replace("[WorldBankLogo]", "<img src=" + wbgLogo + " title='World Bank Group' style='display: inline-block; vertical-align: middle;' height='60px' /><br />");
                }
                else
                {
                    baseEmail = baseEmail.Replace("[WorldBankLogo]", "");
                }

                string sendmail = Helper.SendMail(sendTo, hText, baseEmail, true);

                if (Utils.IsError(sendmail))
                {
                    // return sendmail;
                    Helper.LogMessage(hText + " " + enumeratorName + " could not be sent to " + sendTo);
                }

                return "true";
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }


        public string NewCRMTrader(string secretKey, string traderName, string participantName, string contactNumber, string email)
        {
            try
            {
                //remove any extra whitespaces
                secretKey = TrimIfNotNull(secretKey);
                traderName = TrimIfNotNull(traderName);
                participantName = TrimIfNotNull(participantName);
                contactNumber = TrimIfNotNull(contactNumber);
                email = TrimIfNotNull(email);

                if (string.IsNullOrWhiteSpace(contactNumber) && string.IsNullOrWhiteSpace(email))
                {
                    return Utils.WrapError("Contact number or Email is required");
                }

                DateTime now = DateTime.Now;

                var username = CheckUserHasRight(secretKey, "TraderAssignEnumerator");
                if (Utils.IsError(username))
                {
                    return username;
                }

                //get the ID for the logged in user
                string loggedInUserID = GetUserID(secretKey);
                if (Utils.IsError(loggedInUserID))
                {
                    return loggedInUserID;
                }
                Guid LoggedInUserID;
                if (!Guid.TryParse(loggedInUserID, out LoggedInUserID))
                {
                    return Utils.WrapError("User ID is not in the correct format");
                }

                #region Check if the logged in user is assuming a company

                //check if the user is assuming a company
                var assumeResult = CheckAssumeCompany(secretKey);
                if (Utils.IsError(assumeResult))
                {
                    return assumeResult;
                }

                //parse the company ID to a Guid
                Guid CompanyID = Guid.Empty;
                if (!Guid.TryParse(assumeResult, out CompanyID))
                {
                    return Utils.WrapError("The ID of the Company that you are trying to view is in the incorrect format");
                }

                #endregion

                using (Surveya_DevEntities entity = new Surveya_DevEntities())
                {
                    Guid ResponseID = Guid.NewGuid();
                    Guid SurveyID = Guid.Parse("C023F072-8FB2-46D1-8D04-35DD9155A9ED");

                    CRMTrader trader = new CRMTrader()
                    {
                        ID = Guid.NewGuid(),
                        isStateOwned = false,
                        isCrossBorderTrader = true,
                        isAgreedToParticipate = true,
                        TraderName = traderName,
                        ParticipateFullName = participantName,
                        ParticipatePhoneNumber = contactNumber,
                        ParticipateEmailAddress = email,
                        Status = "New",
                        DateCreated = now,
                        CreatedBy = LoggedInUserID,
                        ResponseID = ResponseID,
                        CompanyType = "",
                        OwnedManagedBy = "",
                        BusinessLocation = "",
                        SizeOfBusiness = "",
                        ProductCategory = ""
                    };
                    entity.Entry(trader).State = EntityState.Added;

                    Respons newResp = new Respons()
                    {
                        ID = ResponseID,
                        SurveyID = SurveyID,
                        CreatedBy = LoggedInUserID,
                        DateCreated = now,
                        IsCompleted = false,
                        SurveyTitle = "NEW/"+now.ToString("yyyy-MM-dd/hh:mm:ss")
                    };
                    entity.Entry(newResp).State = EntityState.Added;


                    ResponseValue tNameVal = new ResponseValue()
                    {
                        ID = Guid.NewGuid(),
                        Value = traderName,
                        DateCreated = now,
                        CreatedBy = LoggedInUserID,
                        QuestionID = Guid.Parse("57ABD9CE-9E9B-4A02-9339-1B41C8987D94"),
                        QuestionText = "Please provide the name of your business:",
                        ResponseID = ResponseID
                    };
                    entity.Entry(tNameVal).State = EntityState.Added;

                    ResponseValue participantNameVal = new ResponseValue()
                    {
                        ID = Guid.NewGuid(),
                        Value = participantName,
                        DateCreated = now,
                        CreatedBy = LoggedInUserID,
                        QuestionID = Guid.Parse("8E6C292A-8934-4F70-8467-DC90225AFD78"),
                        QuestionText = "To participate in the survey, please provide your first and last name:",
                        ResponseID = ResponseID
                    };
                    entity.Entry(participantNameVal).State = EntityState.Added;

                    ResponseValue contactNumberVal = new ResponseValue()
                    {
                        ID = Guid.NewGuid(),
                        Value = contactNumber,
                        DateCreated = now,
                        CreatedBy = LoggedInUserID,
                        QuestionID = Guid.Parse("09EF067E-F9BE-4A99-8DD6-CBE3F6545978"),
                        QuestionText = "To contact you for the survey, please provide your contact number (landline or mobile): Please include AREA CODE",
                        ResponseID = ResponseID
                    };
                    entity.Entry(contactNumberVal).State = EntityState.Added;

                    ResponseValue emailVal = new ResponseValue()
                    {
                        ID = Guid.NewGuid(),
                        Value = email,
                        DateCreated = now,
                        CreatedBy = LoggedInUserID,
                        QuestionID = Guid.Parse("44340DF6-591B-4870-BA00-7C458ECD2341"),
                        QuestionText = "To schedule an interview, please provide your email address:",
                        ResponseID = ResponseID
                    };
                    entity.Entry(emailVal).State = EntityState.Added;

                    ResponseValue stateOwnedVal = new ResponseValue()
                    {
                        ID = Guid.NewGuid(),
                        Value = "No",
                        DateCreated = now,
                        CreatedBy = LoggedInUserID,
                        QuestionID = Guid.Parse("A15C3DC8-13C7-46A1-84ED-692FDFC7B2A1"),
                        QuestionText = "Is your business a state-owned enterprise? (If yes, this survey is intended for non-government owned businesses. You may submit your form. Thank you for your time.)",
                        ResponseID = ResponseID
                    };
                    entity.Entry(stateOwnedVal).State = EntityState.Added;

                    ResponseValue crossBorderVal = new ResponseValue()
                    {
                        ID = Guid.NewGuid(),
                        Value = "Yes",
                        DateCreated = now,
                        CreatedBy = LoggedInUserID,
                        QuestionID = Guid.Parse("A0F5606F-0EFE-461A-8AD3-A8469798A61F"),
                        QuestionText = "Please confirm that your business is involved in cross-border trade (import/export/transit): (If no, this survey is intended for businesses that conduct cross-border trade.  You may submit the form. Thank you for your time.)",
                        ResponseID = ResponseID
                    };
                    entity.Entry(crossBorderVal).State = EntityState.Added;

                    ResponseValue agreeVal = new ResponseValue()
                    {
                        ID = Guid.NewGuid(),
                        Value = "Yes",
                        DateCreated = now,
                        CreatedBy = LoggedInUserID,
                        QuestionID = Guid.Parse("A16F9CEB-038B-44E0-A91C-4D41FA51758E"),
                        QuestionText = "Does your business agree to participate in the survey? (If no, please submit your form. Thank you for your time.)",
                        ResponseID = ResponseID
                    };
                    entity.Entry(agreeVal).State = EntityState.Added;


                    var completeHistory = CreateTraderHistory(trader.ID, "New", username + " created CRM Trader for " + trader.TraderName, LoggedInUserID);
                    entity.Entry(completeHistory).State = EntityState.Added;

                    entity.SaveChanges();


                    dynamic returnItem = new JObject();
                    returnItem.Status = "Success";
                    return returnItem.ToString();
                }
            }
            catch (DbEntityValidationException ex)
            {
                string errors = Helper.GetCleanEntityValidationErrors(ex);
                Helper.LogError(errors, ex.ToString());
                return Utils.WrapError(errors);
            }
            catch (Exception ee)
            {
                Helper.LogError(ee.Message, ee.StackTrace);
                return Utils.WrapError(ee.Message);
            }
        }

        #endregion

    }

    #region Classes used to save data in for method returns and lists of data

    //result for CheckPackageFeatures()
    public class PackageFeaturesResult
    {
        public Decimal OptionalFeaturesPrice { get; set; }
        public ArrayList OptionalFeatures { get; set; }
        public ArrayList MandatoryFeatures { get; set; }
        public Boolean IsError { get; set; }
        public String ErrorMessage { get; set; }
    }

    //result for CheckForDiscounts()
    public class DiscountResult
    {
        public Boolean HasDiscount { get; set; }
        public Decimal DiscountPerc { get; set; }
        public String DiscountDescription { get; set; }
        public Boolean IsError { get; set; }
        public String ErrorMessage { get; set; }
    }

    //result for AddSignupPackage()
    public class SignupPackageResult
    {
        public Decimal Price { get; set; }
        public Decimal FinalPrice { get; set; }
        public Boolean HasDiscount { get; set; }
        public Decimal DiscountValue { get; set; }
        public Decimal DiscountPercentage { get; set; }
        public String DiscountDescription { get; set; }
        public Boolean IsComplete { get; set; }
        public Boolean IsActive { get; set; }
        public String PaymentStatus { get; set; }
        public Boolean PendingPayment { get; set; }
        public Guid CompanyPackageID { get; set; }
        public Boolean IsError { get; set; }
        public String ErrorMessage { get; set; }
        public String PurchaseOrderNumber { get; set; }
    }

    //store the features details for the package
    public class PackageFeatureDetails
    {
        public Guid ID { get; set; }
        public String Name { get; set; }
        public String FriendlyName { get; set; }
        public Decimal OptionalPrice { get; set; }
        public Boolean OptionalFeature { get; set; }
    }

    //store the features details
    public class FeatureDetails
    {
        public Guid ID { get; set; }
        public Decimal OptionalPrice { get; set; }
        public Boolean OptionalFeature { get; set; }
    }

    //result for CheckFeatures()
    public class FeatureDetailsResult
    {
        public Boolean IsError { get; set; }
        public String ErrorMessage { get; set; }
        public ArrayList Features { get; set; }
    }

    #endregion
}
